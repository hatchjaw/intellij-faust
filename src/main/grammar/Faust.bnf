{
    parserClass="com.github.hatchjaw.faust.FaustParser"
    parserUtilClass="com.github.hatchjaw.faust.FaustParserUtil"

    extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

    psiClassPrefix="Faust"
    psiImplClassSuffix="Impl"
    psiPackage="com.github.hatchjaw.faust.psi"
    psiImplPackage="com.github.hatchjaw.faust.psi.impl"

    elementTypeHolderClass="com.github.hatchjaw.faust.psi.FaustTypes"
    elementTypeClass="com.github.hatchjaw.faust.psi.FaustElementType"
    tokenTypeClass="com.github.hatchjaw.faust.psi.FaustTokenType"

    extends(".+(Expr|Comp)")=Expression
    extends(".+Ifx")=Infix
    extends(".+Arg")=Argument

    tokens = [
        PAR=','
        SEQ=':'
        MERGE=':>'
        SPLIT='<:'
        REC='~'

        ADD='+'
        SUB='-'
        MUL='*'
        DIV='/'
        MOD='%'
        DELAY='@'
        DELAY1="'"

        AND='&'
        OR='|'
        XOR='xor'

        LSH='<<'
        RSH='>>'

        LT='<'
        LE='<='
        GT='>'
        GE='>='
        EQ='=='
        NE='!='

        WIRE='_'
        CUT='!'

        ENDDEF=';'
        DEF='='
        LPAREN='('
        RPAREN=')'
        LBRACE='{'
        RBRACE='}'
        LBRACK='['
        RBRACK=']'

        LAMBDA='\'
        DOT='.'
        WITH='with'
        LETREC='letrec'
        WHERE='where'

        MEM='mem'
        PRFIX='prefix'

        INTCAST='int'
        FLOATCAST='float'
        NOTYPECAST='any'

        RDTBL='rdtable'
        RWTBL='rwtable'

        SELECT2='select2'
        SELECT3='select3'

        FFUNCTION='ffunction'
        FCONSTANT='fconstant'
        FVARIABLE='fvariable'

        BUTTON='button'
        CHECKBOX='checkbox'
        VSLIDER='vslider'
        HSLIDER='hslider'
        NENTRY='nentry'
        VGROUP='vgroup'
        HGROUP='hgroup'
        TGROUP='tgroup'
        VBARGRAPH='vbargraph'
        HBARGRAPH='hbargraph'
        SOUNDFILE='soundfile'

        ATTACH='attach'
        MODULATE='minput'

        ACOS='acos'
        ASIN='asin'
        ATAN='atan'
        ATAN2='atan2'

        COS='cos'
        SIN='sin'
        TAN='tan'

        EXP='exp'
        LOG='log'
        LOG10='log10'
        POWOP='^'
        POWFUN='pow'
        SQRT='sqrt'

        ABS='abs'
        MIN='min'
        MAX='max'

        FMOD='fmod'
        REMAINDER='remainder'

        FLOOR='floor'
        CEIL='ceil'
        RINT='rint'
        ROUND='round'

        ISEQ='seq'
        IPAR='par'
        ISUM='sum'
        IPROD='prod'

        INS='inputs'
        OUTS='outputs'

        IMPORT='import'
        COMPONENT='component'
        LIBRARY='library'
        ENVIRONMENT='environment'

        WAVEFORM='waveform'
        ROUTE='route'
        ENABLE='enable'
        CONTROL='control'

        DECLARE='declare'

        CASE='case'
        ARROW='=>'
        LAPPLY='->'

        ASSERTBOUNDS='assertbounds'
        LOWEST='lowest'
        HIGHEST='highest'

        FLOATMODE='singleprecision'
        DOUBLEMODE='doubleprecision'
        QUADMODE='quadprecision'
        FIXEDPOINTMODE='fixedpointprecision'

        WHITE_SPACE='regexp:[ \t\r\n]+'
        IDENTIFIER='regexp:(::)?_*[a-zA-Z]\w*(::_*[a-zA-Z]\w*)*'
        STRING_LITERAL="regexp:\"[^\"]*\""
        C_HEADER = "regexp:<\w+(\.[a-zA-Z])?>"
        DOC_COMMENT="regexp:(//-+?[^-]+-+[\r\n])(//.*[\r\n]|[\r\n])*?(//-+\R)" // Dodgy
        LINE_COMMENT='regexp://[^\r\n]*'
        BLOCK_COMMENT="regexp:/\*(([^*]|[\r\n])*(\*+[^*/])?)*(\*+/)?"
        NUMBER='regexp:(\d+(\.\d*)?|(\.\d+))([eE][+-]?\d+)?f?'
    ]
}

Program ::= !<<eof>> StmtList

private StmtList ::= (VariantList Statement)*

private DefList ::= (VariantList Definition)*

private VariantList ::= Variant*

private RecList ::= RecDefinition*

ValList ::= (NUMBER PAR)* NUMBER

Variant ::=
      FLOATMODE
    | DOUBLEMODE
    | QUADMODE
    | FIXEDPOINTMODE

private Statement ::=
      FileImport
    | Declaration
    | Definition
//    | BDOC Doc EDOC

FileImport ::= IMPORT LPAREN UqString RPAREN ENDDEF

Declaration ::=
      DECLARE DecName String ENDDEF
    | DECLARE DecName DecName String ENDDEF

Definition ::=
      DefName LPAREN ArgList RPAREN DEF Expression ENDDEF
    | DefName DEF Expression ENDDEF
//    | Error ENDDEF

RecDefinition ::=
      RecName DEF Expression ENDDEF
//    | Error ENDDEF

DefName ::= Ident

RecName ::= DELAY1 IDENTIFIER

Params ::= (IDENTIFIER PAR)* IDENTIFIER

Expression ::=
      WithExpr
    | LetrecExpr
    | LetrecDefListExpr
    | SequentialComp
    | ParallelComp
    | SplitComp
    | MergeComp
    | RecursiveComp
    | InfixExpr

WithExpr ::= Expression WITH LBRACE DefList RBRACE
LetrecExpr ::= Expression LETREC LBRACE RecList RBRACE
LetrecDefListExpr ::= Expression LETREC LBRACE RecList WHERE DefList RBRACE
ParallelComp ::= Expression PAR Expression
SequentialComp ::= Expression SEQ Expression
SplitComp ::= Expression SPLIT Expression
MergeComp ::= Expression MERGE Expression
RecursiveComp ::= Expression REC Expression
InfixExpr ::= Infix

Infix ::=
      AddIfx
    | SubIfx
    | MulIfx
    | DivIfx
    | ModIfx
    | PowIfx
    | DelayIfx
    | Delay1Ifx
    | AccessIfx
    | AndIfx
    | OrIfx
    | XorIfx
    | LshIfx
    | RshIfx
    | LtIfx
    | LeIfx
    | GtIfx
    | GeIfx
    | EqIfx
    | NeIfx
    | ParenIfx
    | BrackIfx
    | Primitive

AddIfx ::= Infix ADD Infix
SubIfx ::= Infix SUB Infix
MulIfx ::= Infix MUL Infix
DivIfx ::= Infix DIV Infix
ModIfx ::= Infix MOD Infix
PowIfx ::= Infix POWOP Infix
DelayIfx ::= Infix DELAY Infix
Delay1Ifx::= Infix DELAY1
AccessIfx ::= Infix DOT IDENTIFIER
AndIfx ::= Infix AND Infix
OrIfx ::= Infix OR Infix
XorIfx ::= Infix XOR Infix
LshIfx ::= Infix LSH Infix
RshIfx ::= Infix RSH Infix
LtIfx ::= Infix LT Infix
LeIfx ::= Infix LE Infix
GtIfx ::= Infix GT Infix
GeIfx ::= Infix GE Infix
EqIfx ::= Infix EQ Infix
NeIfx ::= Infix NE Infix
ParenIfx ::= Infix LPAREN ArgList RPAREN
BrackIfx ::= Infix LBRACK DefList RBRACK
Primitive ::=
      IDENTIFIER
    | SUB IDENTIFIER
    | NUMBER
    | ADD NUMBER
    | SUB NUMBER
    | WIRE
    | CUT
    | MEM
    | PREFIX
    | INTCAST
    | FLOATCAST
    | ADD
    | SUB
    | MUL
    | DIV
    | MOD
    | DELAY
    | AND
    | OR
    | XOR
    | LSH
    | RSH
    | LT
    | LE
    | GT
    | GE
    | EQ
    | NE
    | ATTACH
    | ENABLE
    | CONTROL
    | ACOS
    | ASIN
    | ATAN
    | ATAN2
    | COS
    | SIN
    | TAN
    | EXP
    | LOG
    | LOG10
    | POWOP
    | POWFUN
    | SQRT
    | ABS
    | MIN
    | MAX
    | FMOD
    | REMAINDER
    | FLOOR
    | CEIL
    | RINT
    | ROUND
    | RDTBL
    | RWTBL
    | SELECT2
    | SELECT3
    | ASSERTBOUNDS
    | LOWEST
    | HIGHEST
    | LPAREN Expression RPAREN
    | LambdaAbstraction
//    | LBRACK ModList LAPPLY Expression RBRACK
    | PatternAbstraction
    | ForeignFunction
    | ForeignConstant
    | ForeignVariable
    | COMPONENT LPAREN UqString RPAREN
    | LIBRARY LPAREN UqString RPAREN
    | EnvironmentConstruction
    | WaveformPrimItive
    | ROUTE LPAREN Argument PAR Argument RPAREN // Fake route?
    | ROUTE LPAREN Argument PAR Argument PAR Expression RPAREN
    | UiButton
    | UiCheckbox
    | UiVslider
    | UiHslider
    | UiNentry
    | UiVgroup
    | UiHgroup
    | UiTgroup
    | UiVbargraph
    | UiHbargraph
    | SoundfilePrim
    | Iteration
    | Inputs
    | Outputs {
    extends=Infix
}

PatternAbstraction ::= CASE LBRACE RuleList RBRACE

LambdaAbstraction ::= LAMBDA LPAREN Params RPAREN DOT LPAREN Expression RPAREN

EnvironmentConstruction ::= ENVIRONMENT LBRACE StmtList RBRACE

WaveformPrimItive ::= WAVEFORM LBRACE ValList RBRACE

Ident ::= IDENTIFIER

DecName ::= IDENTIFIER

ArgList ::= (Argument PAR)* Argument

Argument ::=
      SeqArg
    | SplitArg
    | MergeArg
    | RecArg
    | InfixArg

SeqArg ::= Argument SEQ Argument
SplitArg ::= Argument SPLIT Argument
MergeArg ::= Argument MERGE Argument
RecArg ::= Argument REC Argument
InfixArg ::= Infix

String ::= STRING_LITERAL

UqString ::= STRING_LITERAL

Fstring ::= STRING_LITERAL | C_HEADER

Iteration ::= (IPAR | ISEQ | ISUM | IPROD) LPAREN IDENTIFIER PAR Argument PAR Expression RPAREN

Inputs ::= INS LPAREN Expression RPAREN
Outputs ::= OUTS LPAREN Expression RPAREN
ForeignFunction ::= FFUNCTION LPAREN Signature PAR Fstring PAR String RPAREN
ForeignConstant ::= FCONSTANT LPAREN Type IDENTIFIER PAR Fstring RPAREN
ForeignVariable ::= FVARIABLE LPAREN Type IDENTIFIER PAR Fstring RPAREN
UiButton ::= BUTTON LPAREN UqString RPAREN
UiCheckbox ::= CHECKBOX LPAREN UqString RPAREN
UiVslider ::= VSLIDER LPAREN UqString PAR Argument PAR Argument PAR Argument PAR Argument RPAREN
UiHslider ::= HSLIDER LPAREN UqString PAR Argument PAR Argument PAR Argument PAR Argument RPAREN
UiNentry ::= NENTRY LPAREN UqString PAR Argument PAR Argument PAR Argument PAR Argument RPAREN
UiVgroup ::= VGROUP LPAREN UqString PAR Expression RPAREN
UiHgroup ::= HGROUP LPAREN UqString PAR Expression RPAREN
UiTgroup ::= TGROUP LPAREN UqString PAR Expression RPAREN
UiVbargraph ::= VBARGRAPH LPAREN UqString PAR Argument PAR Argument RPAREN
UiHbargraph ::= HBARGRAPH LPAREN UqString PAR Argument PAR Argument RPAREN
SoundfilePrim ::= SOUNDFILE LPAREN UqString PAR Argument RPAREN

Signature ::=
      Type Ident LPAREN TypeList RPAREN
    | Type Ident OR Ident LPAREN TypeList RPAREN
    | Type Ident OR Ident OR Ident LPAREN TypeList RPAREN
    | Type Ident OR Ident OR Ident OR Ident LPAREN TypeList RPAREN
    | Type Ident LPAREN RPAREN
    | Type Ident OR Ident LPAREN RPAREN
    | Type Ident OR Ident OR Ident LPAREN RPAREN
    | Type Ident OR Ident OR Ident OR Ident LPAREN RPAREN

TypeList ::= (ArgType PAR)* ArgType

Type ::= INTCAST | FLOATCAST

ArgType ::= Type | NOTYPECAST

RuleList ::= Rule*
Rule ::= LPAREN ArgList RPAREN ARROW Expression ENDDEF
