{
    parserClass="com.github.hatchjaw.faust.FaustParser"
    parserUtilClass="com.github.hatchjaw.faust.FaustParserUtil"

    extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

    psiClassPrefix="Faust"
    psiImplClassSuffix="Impl"
    psiPackage="com.github.hatchjaw.faust.psi"
    psiImplPackage="com.github.hatchjaw.faust.psi.impl"

    elementTypeHolderClass="com.github.hatchjaw.faust.psi.FaustTypes"
    elementTypeClass="com.github.hatchjaw.faust.psi.FaustElementType"
    tokenTypeClass="com.github.hatchjaw.faust.psi.FaustTokenType"

    extends(".+(Expression|Composition)")=Expression
    extends(".+Infix")=Infix
    extends(".+Arg")=Argument

    tokens = [
        BDOC='<mdoc>'
        EDOC='</mdoc>'
        BEQN='<equation>'
        EEQN='</equation>'
        BDGM='<diagram>'
        EDGM='</diagram>'
        NOTICE='regexp:<notice\s?/>'
        BLST='<listing'
        ELST='/>'
        BMTD='<metadata>'
        EMTD='</metadata>'
//        LSTEQ='='
        LSTDEPENDENCIES='dependencies'
        LSTMDOCTAGS='mdoctags'
        LSTDISTRIBUTED='distributed'
        LSTTRUE='"true"'
        LSTFALSE='"false"'

        PAR=','
        SEQ=':'
        MERGE=':>'
        SPLIT='<:'
        REC='~'

        ADD='+'
        SUB='-'
        MUL='*'
        DIV='/'
        MOD='%'
        DELAY='@'
        DELAY1="'"

        AND='&'
        OR='|'
        XOR='xor'

        LSH='<<'
        RSH='>>'

        LT='<'
        LE='<='
        GT='>'
        GE='>='
        EQ='=='
        NE='!='

        WIRE='_'
        CUT='!'

        ENDDEF=';'
        DEF='='
        LPAREN='('
        RPAREN=')'
        LBRACE='{'
        RBRACE='}'
        LBRACK='['
        RBRACK=']'

        LAMBDA='\'
        DOT='.'
        WITH='with'
        LETREC='letrec'
        WHERE='where'

        MEM='mem'
        PREFIX='prefix'

        INTCAST='int'
        FLOATCAST='float'
        NOTYPECAST='any'

        RDTBL='rdtable'
        RWTBL='rwtable'

        SELECT2='select2'
        SELECT3='select3'

        FFUNCTION='ffunction'
        FCONSTANT='fconstant'
        FVARIABLE='fvariable'

        BUTTON='button'
        CHECKBOX='checkbox'
        VSLIDER='vslider'
        HSLIDER='hslider'
        NENTRY='nentry'
        VGROUP='vgroup'
        HGROUP='hgroup'
        TGROUP='tgroup'
        VBARGRAPH='vbargraph'
        HBARGRAPH='hbargraph'
        SOUNDFILE='soundfile'

        ATTACH='attach'
        MODULATE='minput'

        ACOS='acos'
        ASIN='asin'
        ATAN='atan'
        ATAN2='atan2'

        COS='cos'
        SIN='sin'
        TAN='tan'

        EXP='exp'
        LOG='log'
        LOG10='log10'
        POWOP='^'
        POWFUN='pow'
        SQRT='sqrt'

        ABS='abs'
        MIN='min'
        MAX='max'

        FMOD='fmod'
        REMAINDER='remainder'

        FLOOR='floor'
        CEIL='ceil'
        RINT='rint'
        ROUND='round'

        ITER_SEQ='seq'
        ITER_PAR='par'
        ITER_SUM='sum'
        ITER_PROD='prod'

        INS='inputs'
        OUTS='outputs'

        IMPORT='import'
        COMPONENT='component'
        LIBRARY='library'
        ENVIRONMENT='environment'

        WAVEFORM='waveform'
        ROUTE='route'
        ENABLE='enable'
        CONTROL='control'

        DECLARE='declare'

        CASE='case'
        ARROW='=>'
        LAPPLY='->'

        ASSERTBOUNDS='assertbounds'
        LOWEST='lowest'
        HIGHEST='highest'

        FLOATMODE='singleprecision'
        DOUBLEMODE='doubleprecision'
        QUADMODE='quadprecision'
        FIXEDPOINTMODE='fixedpointprecision'

        WHITE_SPACE='regexp:[ \t\r\n]+'
        IDENTIFIER='regexp:(::)?_*[a-zA-Z]\w*(::_*[a-zA-Z]\w*)*'
        STRING_LITERAL="regexp:\"[^\"]*\""
        C_HEADER = "regexp:<\w+(\.[a-zA-Z])?>"
        LIB_DOC_COMMENT="regexp:(//#+([^#]+?)#+[\r\n])(//.*[\r\n])+"
        DEF_DOC_COMMENT="regexp:(//-+`([^-]+?)`-+[\r\n])(//.*[\r\n])+"
        LINE_COMMENT='regexp://[^\r\n]*'
        BLOCK_COMMENT="regexp:/\*(([^*]|[\r\n])*(\*+[^*/])?)*(\*+/)?"
        NUMBER='regexp:(\d+(\.\d*)?|(\.\d+))([eE][+-]?\d+)?f?'
    ]
}

Program ::= !<<eof>> StmtList

private StmtList ::= (VariantList Statement)*

private DefList ::= (VariantList Definition)*

private VariantList ::= Variant*

private RecList ::= RecDefinition*

ValList ::= (NUMBER PAR)* NUMBER

Variant ::=
      FLOATMODE
    | DOUBLEMODE
    | QUADMODE
    | FIXEDPOINTMODE

private Statement ::=
      FileImport
    | Declaration
    | Definition
    | BDOC Documentation EDOC

Documentation ::= DocElement*

private DocElement ::=
      <<parseDocFreeText>>
    | DocEquation
    | DocDiagram
    | DocNotice
    | DocList
    | DocMetadata

DocEquation ::= BEQN Expression EEQN
DocDiagram ::= BDGM Expression EDGM
DocNotice ::= NOTICE
DocList ::= BLST [LstAttrList] ELST
DocMetadata ::= BMTD MdName EMTD

LstAttrList ::= LstAttrDef*

LstAttrDef ::=
      LSTDEPENDENCIES DEF LstAttrVal
    | LSTMDOCTAGS DEF LstAttrVal
    | LSTDISTRIBUTED DEF LstAttrVal

LstAttrVal ::= LSTTRUE | LSTFALSE

MdName ::= IDENTIFIER

FileImport ::= IMPORT LPAREN UqString RPAREN ENDDEF

Declaration ::=
      DECLARE DecName String ENDDEF
    | DECLARE DefName DecName String ENDDEF

private Definition ::=
      FunctionDefinition
    | SimpleDefinition

SimpleDefinition ::= DefName DEF Expression ENDDEF

// TODO: Identify definitions with pattern matching via (probably) annotation
FunctionDefinition ::= DefName LPAREN ArgList RPAREN DEF Expression ENDDEF

RecDefinition ::= RecName DEF Expression ENDDEF

DefName ::= Ident

RecName ::= DELAY1 IDENTIFIER

Params ::= (IDENTIFIER PAR)* IDENTIFIER

ModEntry ::= UqString (SEQ Argument)?

ModList ::= (ModEntry PAR)* ModEntry

Expression ::=
      WithExpression
    | LetrecExpression
    | LetrecDefListExpression
    | SequentialComposition
    | ParallelComposition
    | SplitComposition
    | MergeComposition
    | RecursiveComposition
    | InfixExpression

WithExpression ::= Expression WITH LBRACE DefList RBRACE
LetrecExpression ::= Expression LETREC LBRACE RecList RBRACE
LetrecDefListExpression ::= Expression LETREC LBRACE RecList WHERE DefList RBRACE
ParallelComposition ::= Expression PAR Expression
SequentialComposition ::= Expression SEQ Expression
SplitComposition ::= Expression SPLIT Expression
MergeComposition ::= Expression MERGE Expression
RecursiveComposition ::= Expression REC Expression
InfixExpression ::= Infix

Infix ::=
      AddInfix
    | SubInfix
    | MulInfix
    | DivInfix
    | ModInfix
    | PowInfix
    | DelayInfix
    | Delay1Infix
    | AccessInfix
    | AndInfix
    | OrInfix
    | XorInfix
    | LshInfix
    | RshInfix
    | LtInfix
    | LeInfix
    | GtInfix
    | GeInfix
    | EqInfix
    | NeInfix
    | ParenInfix
    | BrackInfix
    | Primitive

AddInfix ::= Infix ADD Infix
SubInfix ::= Infix SUB Infix
MulInfix ::= Infix MUL Infix
DivInfix ::= Infix DIV Infix
ModInfix ::= Infix MOD Infix
PowInfix ::= Infix POWOP Infix
DelayInfix ::= Infix DELAY Infix
Delay1Infix::= Infix DELAY1
AccessInfix ::= Infix DOT IDENTIFIER
AndInfix ::= Infix AND Infix
OrInfix ::= Infix OR Infix
XorInfix ::= Infix XOR Infix
LshInfix ::= Infix LSH Infix
RshInfix ::= Infix RSH Infix
LtInfix ::= Infix LT Infix
LeInfix ::= Infix LE Infix
GtInfix ::= Infix GT Infix
GeInfix ::= Infix GE Infix
EqInfix ::= Infix EQ Infix
NeInfix ::= Infix NE Infix
ParenInfix ::= Infix LPAREN ArgList RPAREN
BrackInfix ::= Infix LBRACK DefList RBRACK
Primitive ::=
      IDENTIFIER
    | SUB IDENTIFIER
    | NUMBER
    | ADD NUMBER
    | SUB NUMBER
    | WIRE
    | CUT
    | MEM
    | PREFIX
    | INTCAST
    | FLOATCAST
    | ADD
    | SUB
    | MUL
    | DIV
    | MOD
    | DELAY
    | AND
    | OR
    | XOR
    | LSH
    | RSH
    | LT
    | LE
    | GT
    | GE
    | EQ
    | NE
    | ATTACH
    | ENABLE
    | CONTROL
    | ACOS
    | ASIN
    | ATAN
    | ATAN2
    | COS
    | SIN
    | TAN
    | EXP
    | LOG
    | LOG10
    | POWOP
    | POWFUN
    | SQRT
    | ABS
    | MIN
    | MAX
    | FMOD
    | REMAINDER
    | FLOOR
    | CEIL
    | RINT
    | ROUND
    | RDTBL
    | RWTBL
    | SELECT2
    | SELECT3
    | ASSERTBOUNDS
    | LOWEST
    | HIGHEST
    | LPAREN Expression RPAREN
    | LambdaAbstraction
    | WidgetModulation
    | PatternAbstraction
    | ForeignFunction
    | ForeignConstant
    | ForeignVariable
    | ComponentConstruction
    | LibraryConstruction
    | EnvironmentConstruction
    | WaveformPrimitive
    | RoutePrimitive
    | UiButton
    | UiCheckbox
    | UiVslider
    | UiHslider
    | UiNentry
    | UiVgroup
    | UiHgroup
    | UiTgroup
    | UiVbargraph
    | UiHbargraph
    | SoundfilePrimitive
    | IterationParallel
    | IterationSequential
    | IterationSum
    | IterationProduct
    | Inputs
    | Outputs {
    extends=Infix
}

WidgetModulation ::= LBRACK ModList LAPPLY Expression RBRACK

PatternAbstraction ::= CASE LBRACE RuleList RBRACE

LambdaAbstraction ::= LAMBDA LPAREN Params RPAREN DOT LPAREN Expression RPAREN

EnvironmentConstruction ::= ENVIRONMENT LBRACE StmtList RBRACE

ComponentConstruction ::= COMPONENT LPAREN UqString RPAREN

LibraryConstruction ::= LIBRARY LPAREN UqString RPAREN

WaveformPrimitive ::= WAVEFORM LBRACE ValList RBRACE

RoutePrimitive ::=
      ROUTE LPAREN Argument PAR Argument RPAREN // "Fake route"?
    | ROUTE LPAREN Argument PAR Argument PAR Expression RPAREN

Ident ::= IDENTIFIER

DecName ::= IDENTIFIER

ArgList ::= (Argument PAR)* Argument

Argument ::=
      SeqArg
    | SplitArg
    | MergeArg
    | RecArg
    | InfixArg

SeqArg ::= Argument SEQ Argument
SplitArg ::= Argument SPLIT Argument
MergeArg ::= Argument MERGE Argument
RecArg ::= Argument REC Argument
InfixArg ::= Infix

String ::= STRING_LITERAL

UqString ::= STRING_LITERAL

Fstring ::= STRING_LITERAL | C_HEADER

IterationParallel ::= ITER_PAR LPAREN IDENTIFIER PAR Argument PAR Expression RPAREN
IterationSequential ::= ITER_SEQ LPAREN IDENTIFIER PAR Argument PAR Expression RPAREN
IterationSum ::= ITER_SUM LPAREN IDENTIFIER PAR Argument PAR Expression RPAREN
IterationProduct ::= ITER_PROD LPAREN IDENTIFIER PAR Argument PAR Expression RPAREN

Inputs ::= INS LPAREN Expression RPAREN
Outputs ::= OUTS LPAREN Expression RPAREN

ForeignFunction ::= FFUNCTION LPAREN Signature PAR Fstring PAR String RPAREN
ForeignConstant ::= FCONSTANT LPAREN Type IDENTIFIER PAR Fstring RPAREN
ForeignVariable ::= FVARIABLE LPAREN Type IDENTIFIER PAR Fstring RPAREN

// TODO: Identify parameter metadata
UiButton ::= BUTTON LPAREN UqString RPAREN
UiCheckbox ::= CHECKBOX LPAREN UqString RPAREN
UiVslider ::= VSLIDER LPAREN UqString PAR Argument PAR Argument PAR Argument PAR Argument RPAREN
UiHslider ::= HSLIDER LPAREN UqString PAR Argument PAR Argument PAR Argument PAR Argument RPAREN
UiNentry ::= NENTRY LPAREN UqString PAR Argument PAR Argument PAR Argument PAR Argument RPAREN
UiVgroup ::= VGROUP LPAREN UqString PAR Expression RPAREN
UiHgroup ::= HGROUP LPAREN UqString PAR Expression RPAREN
UiTgroup ::= TGROUP LPAREN UqString PAR Expression RPAREN
UiVbargraph ::= VBARGRAPH LPAREN UqString PAR Argument PAR Argument RPAREN
UiHbargraph ::= HBARGRAPH LPAREN UqString PAR Argument PAR Argument RPAREN

SoundfilePrimitive ::= SOUNDFILE LPAREN UqString PAR Argument RPAREN

Signature ::=
      Type Ident LPAREN TypeList RPAREN
    | Type Ident OR Ident LPAREN TypeList RPAREN
    | Type Ident OR Ident OR Ident LPAREN TypeList RPAREN
    | Type Ident OR Ident OR Ident OR Ident LPAREN TypeList RPAREN
    | Type Ident LPAREN RPAREN
    | Type Ident OR Ident LPAREN RPAREN
    | Type Ident OR Ident OR Ident LPAREN RPAREN
    | Type Ident OR Ident OR Ident OR Ident LPAREN RPAREN

TypeList ::= (ArgType PAR)* ArgType

Type ::= INTCAST | FLOATCAST

ArgType ::= Type | NOTYPECAST

RuleList ::= Rule*
Rule ::= LPAREN ArgList RPAREN ARROW Expression ENDDEF
