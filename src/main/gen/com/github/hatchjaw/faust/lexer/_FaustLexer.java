// Generated by JFlex 1.9.2 http://jflex.de/  (tweaked for IntelliJ platform)
// source: FaustLexer.flex

package com.github.hatchjaw.faust.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static com.github.hatchjaw.faust.psi.FaustTypes.*;


public class _FaustLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700"+
    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00"+
    "\1\u1000\1\u0100\1\u1100\1\u1200\1\u1300\1\u0100\1\u1400\1\u1500"+
    "\1\u1600\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u0100\1\u1c00"+
    "\1\u1d00\1\u1e00\12\u1f00\1\u2000\1\u2100\1\u2200\1\u1f00\1\u2300"+
    "\1\u2400\2\u1f00\31\u0100\1\u2500\121\u0100\1\u2600\4\u0100\1\u2700"+
    "\1\u0100\1\u2800\1\u2900\1\u2a00\1\u2b00\1\u2c00\1\u2d00\53\u0100"+
    "\1\u2e00\10\u2f00\31\u1f00\1\u0100\1\u3000\1\u3100\1\u0100\1\u3200"+
    "\1\u3300\1\u3400\1\u3500\1\u1f00\1\u3600\1\u3700\1\u3800\1\u3900"+
    "\1\u0100\1\u3a00\1\u3b00\1\u3c00\1\u3d00\1\u3e00\1\u3f00\1\u4000"+
    "\1\u1f00\1\u4100\1\u4200\1\u4300\1\u4400\1\u4500\1\u4600\1\u4700"+
    "\1\u4800\1\u4900\1\u4a00\1\u4b00\1\u4c00\1\u1f00\1\u4d00\1\u4e00"+
    "\1\u4f00\1\u1f00\3\u0100\1\u5000\1\u5100\1\u5200\12\u1f00\4\u0100"+
    "\1\u5300\17\u1f00\2\u0100\1\u5400\41\u1f00\2\u0100\1\u5500\1\u5600"+
    "\2\u1f00\1\u5700\1\u5800\27\u0100\1\u5900\2\u0100\1\u5a00\45\u1f00"+
    "\1\u0100\1\u5b00\1\u5c00\11\u1f00\1\u5d00\27\u1f00\1\u5e00\1\u5f00"+
    "\1\u6000\1\u6100\11\u1f00\1\u6200\1\u6300\5\u1f00\1\u6400\1\u6500"+
    "\4\u1f00\1\u6600\21\u1f00\246\u0100\1\u6700\20\u0100\1\u6800\1\u6900"+
    "\25\u0100\1\u6a00\34\u0100\1\u6b00\14\u1f00\2\u0100\1\u6c00\u0e05\u1f00";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\4\2\22\0\1\1\1\3\1\4\2\0"+
    "\1\5\1\6\1\7\2\0\1\10\1\11\1\12\1\13"+
    "\1\14\1\15\12\16\1\17\1\0\1\20\1\21\1\22"+
    "\1\0\1\23\4\24\1\25\1\26\1\27\1\24\1\30"+
    "\1\24\1\31\1\24\1\32\1\33\3\24\1\34\1\35"+
    "\1\36\6\24\3\0\1\37\1\40\1\0\1\41\1\42"+
    "\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\24"+
    "\1\52\1\53\1\54\1\55\1\56\1\57\1\60\1\61"+
    "\1\62\1\63\1\64\1\65\1\66\1\67\1\70\1\24"+
    "\1\0\1\71\1\0\1\72\6\0\1\2\32\0\1\1"+
    "\11\0\1\73\12\0\1\73\4\0\1\73\5\0\27\73"+
    "\1\0\37\73\1\0\u01ca\73\4\0\14\73\16\0\5\73"+
    "\7\0\1\73\1\0\1\73\201\0\5\73\1\0\2\73"+
    "\2\0\4\73\1\0\1\73\6\0\1\73\1\0\3\73"+
    "\1\0\1\73\1\0\24\73\1\0\123\73\1\0\213\73"+
    "\10\0\246\73\1\0\46\73\2\0\1\73\6\0\51\73"+
    "\107\0\33\73\4\0\4\73\55\0\53\73\43\0\2\73"+
    "\1\0\143\73\1\0\1\73\17\0\2\73\7\0\2\73"+
    "\12\0\3\73\2\0\1\73\20\0\1\73\1\0\36\73"+
    "\35\0\131\73\13\0\1\73\30\0\41\73\11\0\2\73"+
    "\4\0\1\73\5\0\26\73\4\0\1\73\11\0\1\73"+
    "\3\0\1\73\27\0\31\73\7\0\13\73\65\0\25\73"+
    "\1\0\10\73\106\0\66\73\3\0\1\73\22\0\1\73"+
    "\7\0\12\73\17\0\20\73\4\0\10\73\2\0\2\73"+
    "\2\0\26\73\1\0\7\73\1\0\1\73\3\0\4\73"+
    "\3\0\1\73\20\0\1\73\15\0\2\73\1\0\3\73"+
    "\16\0\2\73\12\0\1\73\10\0\6\73\4\0\2\73"+
    "\2\0\26\73\1\0\7\73\1\0\2\73\1\0\2\73"+
    "\1\0\2\73\37\0\4\73\1\0\1\73\23\0\3\73"+
    "\20\0\11\73\1\0\3\73\1\0\26\73\1\0\7\73"+
    "\1\0\2\73\1\0\5\73\3\0\1\73\22\0\1\73"+
    "\17\0\2\73\27\0\1\73\13\0\10\73\2\0\2\73"+
    "\2\0\26\73\1\0\7\73\1\0\2\73\1\0\5\73"+
    "\3\0\1\73\36\0\2\73\1\0\3\73\17\0\1\73"+
    "\21\0\1\73\1\0\6\73\3\0\3\73\1\0\4\73"+
    "\3\0\2\73\1\0\1\73\1\0\2\73\3\0\2\73"+
    "\3\0\3\73\3\0\14\73\26\0\1\73\64\0\10\73"+
    "\1\0\3\73\1\0\27\73\1\0\20\73\3\0\1\73"+
    "\32\0\3\73\5\0\2\73\36\0\1\73\4\0\10\73"+
    "\1\0\3\73\1\0\27\73\1\0\12\73\1\0\5\73"+
    "\3\0\1\73\40\0\1\73\1\0\2\73\17\0\2\73"+
    "\22\0\10\73\1\0\3\73\1\0\51\73\2\0\1\73"+
    "\20\0\1\73\5\0\3\73\10\0\3\73\30\0\6\73"+
    "\5\0\22\73\3\0\30\73\1\0\11\73\1\0\1\73"+
    "\2\0\7\73\72\0\60\73\1\0\2\73\14\0\7\73"+
    "\72\0\2\73\1\0\1\73\1\0\5\73\1\0\30\73"+
    "\1\0\1\73\1\0\12\73\1\0\2\73\11\0\1\73"+
    "\2\0\5\73\1\0\1\73\25\0\4\73\40\0\1\73"+
    "\77\0\10\73\1\0\44\73\33\0\5\73\163\0\53\73"+
    "\24\0\1\73\20\0\6\73\4\0\4\73\3\0\1\73"+
    "\3\0\2\73\7\0\3\73\4\0\15\73\14\0\1\73"+
    "\21\0\46\73\1\0\1\73\5\0\1\73\2\0\53\73"+
    "\1\0\115\73\1\0\4\73\2\0\7\73\1\0\1\73"+
    "\1\0\4\73\2\0\51\73\1\0\4\73\2\0\41\73"+
    "\1\0\4\73\2\0\7\73\1\0\1\73\1\0\4\73"+
    "\2\0\17\73\1\0\71\73\1\0\4\73\2\0\103\73"+
    "\45\0\20\73\20\0\126\73\2\0\6\73\3\0\u016c\73"+
    "\2\0\21\73\1\1\32\73\5\0\113\73\6\0\10\73"+
    "\7\0\15\73\1\0\4\73\16\0\22\73\16\0\22\73"+
    "\16\0\15\73\1\0\3\73\17\0\64\73\43\0\1\73"+
    "\4\0\1\73\103\0\131\73\7\0\5\73\2\0\42\73"+
    "\1\0\1\73\5\0\106\73\12\0\37\73\61\0\36\73"+
    "\2\0\5\73\13\0\54\73\4\0\32\73\66\0\27\73"+
    "\11\0\65\73\122\0\1\73\135\0\57\73\21\0\7\73"+
    "\67\0\36\73\15\0\2\73\12\0\54\73\32\0\44\73"+
    "\51\0\3\73\12\0\44\73\2\0\11\73\7\0\53\73"+
    "\2\0\3\73\51\0\4\73\1\0\6\73\1\0\2\73"+
    "\3\0\1\73\5\0\300\73\100\0\26\73\2\0\6\73"+
    "\2\0\46\73\2\0\6\73\2\0\10\73\1\0\1\73"+
    "\1\0\1\73\1\0\1\73\1\0\37\73\2\0\65\73"+
    "\1\0\7\73\1\0\1\73\3\0\3\73\1\0\7\73"+
    "\3\0\4\73\2\0\6\73\4\0\15\73\5\0\3\73"+
    "\1\0\7\73\3\0\13\1\35\0\2\2\5\0\1\1"+
    "\57\0\1\1\21\0\1\73\15\0\1\73\20\0\15\73"+
    "\145\0\1\73\4\0\1\73\2\0\12\73\1\0\1\73"+
    "\3\0\5\73\6\0\1\73\1\0\1\73\1\0\1\73"+
    "\1\0\4\73\1\0\13\73\2\0\4\73\5\0\5\73"+
    "\4\0\1\73\64\0\2\73\u017b\0\57\73\1\0\57\73"+
    "\1\0\205\73\6\0\4\73\3\0\2\73\14\0\46\73"+
    "\1\0\1\73\5\0\1\73\2\0\70\73\7\0\1\73"+
    "\20\0\27\73\11\0\7\73\1\0\7\73\1\0\7\73"+
    "\1\0\7\73\1\0\7\73\1\0\7\73\1\0\7\73"+
    "\1\0\7\73\120\0\1\73\320\0\1\1\4\0\2\73"+
    "\52\0\5\73\5\0\2\73\4\0\126\73\6\0\3\73"+
    "\1\0\132\73\1\0\4\73\5\0\53\73\1\0\136\73"+
    "\21\0\33\73\65\0\306\73\112\0\360\73\20\0\215\73"+
    "\103\0\56\73\2\0\15\73\3\0\20\73\12\0\2\73"+
    "\24\0\57\73\20\0\37\73\2\0\106\73\61\0\11\73"+
    "\2\0\147\73\2\0\65\73\2\0\5\73\60\0\13\73"+
    "\1\0\3\73\1\0\4\73\1\0\27\73\35\0\64\73"+
    "\16\0\62\73\76\0\6\73\3\0\1\73\1\0\2\73"+
    "\13\0\34\73\12\0\27\73\31\0\35\73\7\0\57\73"+
    "\34\0\1\73\20\0\5\73\1\0\12\73\12\0\5\73"+
    "\1\0\51\73\27\0\3\73\1\0\10\73\24\0\27\73"+
    "\3\0\1\73\3\0\62\73\1\0\1\73\3\0\2\73"+
    "\2\0\5\73\2\0\1\73\1\0\1\73\30\0\3\73"+
    "\2\0\13\73\7\0\3\73\14\0\6\73\2\0\6\73"+
    "\2\0\6\73\11\0\7\73\1\0\7\73\1\0\53\73"+
    "\1\0\14\73\10\0\163\73\35\0\244\73\14\0\27\73"+
    "\4\0\61\73\4\0\u0100\74\156\73\2\0\152\73\46\0"+
    "\7\73\14\0\5\73\5\0\1\73\1\0\12\73\1\0"+
    "\15\73\1\0\5\73\1\0\1\73\1\0\2\73\1\0"+
    "\2\73\1\0\154\73\41\0\153\73\22\0\100\73\2\0"+
    "\66\73\50\0\14\73\164\0\5\73\1\0\207\73\44\0"+
    "\32\73\6\0\32\73\13\0\131\73\3\0\6\73\2\0"+
    "\6\73\2\0\6\73\2\0\3\73\43\0\14\73\1\0"+
    "\32\73\1\0\23\73\1\0\2\73\1\0\17\73\2\0"+
    "\16\73\42\0\173\73\205\0\35\73\3\0\61\73\57\0"+
    "\40\73\15\0\24\73\1\0\10\73\6\0\46\73\12\0"+
    "\36\73\2\0\44\73\4\0\10\73\60\0\236\73\22\0"+
    "\44\73\4\0\44\73\4\0\50\73\10\0\64\73\234\0"+
    "\67\73\11\0\26\73\12\0\10\73\230\0\6\73\2\0"+
    "\1\73\1\0\54\73\1\0\2\73\3\0\1\73\2\0"+
    "\27\73\12\0\27\73\11\0\37\73\101\0\23\73\1\0"+
    "\2\73\12\0\26\73\12\0\32\73\106\0\70\73\6\0"+
    "\2\73\100\0\1\73\17\0\4\73\1\0\3\73\1\0"+
    "\35\73\52\0\35\73\3\0\35\73\43\0\10\73\1\0"+
    "\34\73\33\0\66\73\12\0\26\73\12\0\23\73\15\0"+
    "\22\73\156\0\111\73\67\0\63\73\15\0\63\73\15\0"+
    "\44\73\334\0\35\73\12\0\1\73\10\0\26\73\232\0"+
    "\27\73\14\0\65\73\113\0\55\73\40\0\31\73\32\0"+
    "\44\73\35\0\1\73\13\0\43\73\3\0\1\73\14\0"+
    "\60\73\16\0\4\73\25\0\1\73\1\0\1\73\43\0"+
    "\22\73\1\0\31\73\124\0\7\73\1\0\1\73\1\0"+
    "\4\73\1\0\17\73\1\0\12\73\7\0\57\73\46\0"+
    "\10\73\2\0\2\73\2\0\26\73\1\0\7\73\1\0"+
    "\2\73\1\0\5\73\3\0\1\73\22\0\1\73\14\0"+
    "\5\73\236\0\65\73\22\0\4\73\24\0\1\73\40\0"+
    "\60\73\24\0\2\73\1\0\1\73\270\0\57\73\51\0"+
    "\4\73\44\0\60\73\24\0\1\73\73\0\53\73\15\0"+
    "\1\73\107\0\33\73\345\0\54\73\164\0\100\73\37\0"+
    "\1\73\240\0\10\73\2\0\47\73\20\0\1\73\1\0"+
    "\1\73\34\0\1\73\12\0\50\73\7\0\1\73\25\0"+
    "\1\73\13\0\56\73\23\0\1\73\42\0\71\73\7\0"+
    "\11\73\1\0\45\73\21\0\1\73\61\0\36\73\160\0"+
    "\7\73\1\0\2\73\1\0\46\73\25\0\1\73\31\0"+
    "\6\73\1\0\2\73\1\0\40\73\16\0\1\73\u0147\0"+
    "\23\73\15\0\232\73\346\0\304\73\274\0\57\73\321\0"+
    "\107\73\271\0\71\73\7\0\37\73\161\0\36\73\22\0"+
    "\60\73\20\0\4\73\37\0\25\73\5\0\23\73\260\0"+
    "\100\73\200\0\113\73\5\0\1\73\102\0\15\73\100\0"+
    "\2\73\1\0\1\73\34\0\370\73\10\0\363\73\15\0"+
    "\37\73\61\0\3\73\21\0\4\73\10\0\u018c\73\4\0"+
    "\153\73\5\0\15\73\3\0\11\73\7\0\12\73\146\0"+
    "\125\73\1\0\107\73\1\0\2\73\2\0\1\73\2\0"+
    "\2\73\2\0\4\73\1\0\14\73\1\0\1\73\1\0"+
    "\7\73\1\0\101\73\1\0\4\73\2\0\10\73\1\0"+
    "\7\73\1\0\34\73\1\0\4\73\1\0\5\73\1\0"+
    "\1\73\3\0\7\73\1\0\u0154\73\2\0\31\73\1\0"+
    "\31\73\1\0\37\73\1\0\31\73\1\0\37\73\1\0"+
    "\31\73\1\0\37\73\1\0\31\73\1\0\37\73\1\0"+
    "\31\73\1\0\10\73\64\0\55\73\12\0\7\73\20\0"+
    "\1\73\u0171\0\54\73\24\0\305\73\73\0\104\73\7\0"+
    "\1\73\264\0\4\73\1\0\33\73\1\0\2\73\1\0"+
    "\1\73\2\0\1\73\1\0\12\73\1\0\4\73\1\0"+
    "\1\73\1\0\1\73\6\0\1\73\4\0\1\73\1\0"+
    "\1\73\1\0\1\73\1\0\3\73\1\0\2\73\1\0"+
    "\1\73\2\0\1\73\1\0\1\73\1\0\1\73\1\0"+
    "\1\73\1\0\1\73\1\0\2\73\1\0\1\73\2\0"+
    "\4\73\1\0\7\73\1\0\4\73\1\0\4\73\1\0"+
    "\1\73\1\0\12\73\1\0\21\73\5\0\3\73\1\0"+
    "\5\73\1\0\21\73\104\0\327\73\51\0\65\73\13\0"+
    "\336\73\2\0\u0182\73\16\0\u0131\73\37\0\36\73\342\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[27904];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\1\1\4\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\1\1\13\1\14\1\15"+
    "\1\16\1\1\1\17\1\20\6\21\1\22\1\23\23\21"+
    "\1\24\1\25\1\26\1\0\1\14\1\27\1\0\1\14"+
    "\1\30\1\0\1\31\1\32\1\33\1\34\1\35\1\36"+
    "\56\21\2\0\1\14\1\0\3\21\1\37\1\21\1\40"+
    "\24\21\1\41\4\21\1\42\2\21\1\43\3\21\1\44"+
    "\1\21\1\45\10\21\1\46\4\0\7\21\1\47\24\21"+
    "\1\50\1\21\1\51\12\21\1\52\1\0\1\53\1\0"+
    "\22\21\1\54\12\21\1\55\7\21\1\56\2\0\3\21"+
    "\1\57\1\60\1\61\1\62\14\21\1\63\1\21\1\64"+
    "\1\65\4\21\1\66\2\21\1\67\2\21\1\70\2\21"+
    "\1\71\1\72\2\21\1\73\3\21\1\74\10\21\1\75"+
    "\1\76\1\77\1\100\4\21\1\101\1\102\2\21\1\103"+
    "\1\104\12\21\1\105\3\21\1\106\1\21\1\107\1\110"+
    "\5\21\1\111\1\21\1\112\2\21\1\113\13\21\1\114"+
    "\1\115\1\21\1\116\4\21\1\117\4\21\1\120\2\21"+
    "\1\121\4\21\1\122\1\21\1\123\3\21\1\124";

  private static int [] zzUnpackAction() {
    int [] result = new int[387];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\75\0\172\0\267\0\364\0\75\0\75\0\75"+
    "\0\75\0\75\0\75\0\75\0\u0131\0\u016e\0\u01ab\0\u01e8"+
    "\0\u0225\0\u0262\0\u029f\0\75\0\u02dc\0\u0319\0\u0356\0\u0393"+
    "\0\u03d0\0\u040d\0\75\0\75\0\u044a\0\u0487\0\u04c4\0\u0501"+
    "\0\u053e\0\u057b\0\u05b8\0\u05f5\0\u0632\0\u066f\0\u06ac\0\u06e9"+
    "\0\u0726\0\u0763\0\u07a0\0\u07dd\0\u081a\0\u0857\0\u0894\0\75"+
    "\0\75\0\75\0\u08d1\0\u090e\0\u094b\0\u0988\0\75\0\75"+
    "\0\u09c5\0\75\0\75\0\75\0\75\0\75\0\75\0\u0a02"+
    "\0\u0a3f\0\u0a7c\0\u0ab9\0\u0af6\0\u0b33\0\u0b70\0\u0bad\0\u0bea"+
    "\0\u0c27\0\u0c64\0\u0ca1\0\u0cde\0\u0d1b\0\u0d58\0\u0d95\0\u0dd2"+
    "\0\u0e0f\0\u0e4c\0\u0e89\0\u0ec6\0\u0f03\0\u0f40\0\u0f7d\0\u0fba"+
    "\0\u0ff7\0\u1034\0\u1071\0\u10ae\0\u10eb\0\u1128\0\u1165\0\u11a2"+
    "\0\u11df\0\u121c\0\u1259\0\u1296\0\u12d3\0\u1310\0\u134d\0\u138a"+
    "\0\u13c7\0\u1404\0\u1441\0\u147e\0\u14bb\0\u14f8\0\u1535\0\u1572"+
    "\0\u15af\0\u15ec\0\u1629\0\u1666\0\u02dc\0\u16a3\0\u02dc\0\u16e0"+
    "\0\u171d\0\u175a\0\u1797\0\u17d4\0\u1811\0\u184e\0\u188b\0\u18c8"+
    "\0\u1905\0\u1942\0\u197f\0\u19bc\0\u19f9\0\u1a36\0\u1a73\0\u1ab0"+
    "\0\u1aed\0\u1b2a\0\u1b67\0\u02dc\0\u1ba4\0\u1be1\0\u1c1e\0\u1c5b"+
    "\0\u02dc\0\u1c98\0\u1cd5\0\u02dc\0\u1d12\0\u1d4f\0\u1d8c\0\u02dc"+
    "\0\u1dc9\0\u02dc\0\u1e06\0\u1e43\0\u1e80\0\u1ebd\0\u1efa\0\u1f37"+
    "\0\u1f74\0\u1fb1\0\u02dc\0\u1fee\0\u202b\0\u2068\0\u20a5\0\u20e2"+
    "\0\u211f\0\u215c\0\u2199\0\u21d6\0\u2213\0\u2250\0\u02dc\0\u228d"+
    "\0\u22ca\0\u2307\0\u2344\0\u2381\0\u23be\0\u23fb\0\u2438\0\u2475"+
    "\0\u24b2\0\u24ef\0\u252c\0\u2569\0\u25a6\0\u25e3\0\u2620\0\u265d"+
    "\0\u269a\0\u26d7\0\u2714\0\u02dc\0\u2751\0\u02dc\0\u278e\0\u27cb"+
    "\0\u2808\0\u2845\0\u2882\0\u28bf\0\u28fc\0\u2939\0\u2976\0\u29b3"+
    "\0\u02dc\0\u29f0\0\75\0\u2a2d\0\u2a6a\0\u2aa7\0\u2ae4\0\u2b21"+
    "\0\u2b5e\0\u2b9b\0\u2bd8\0\u2c15\0\u2c52\0\u2c8f\0\u2ccc\0\u2d09"+
    "\0\u2d46\0\u2d83\0\u2dc0\0\u2dfd\0\u2e3a\0\u2e77\0\u02dc\0\u2eb4"+
    "\0\u2ef1\0\u2f2e\0\u2f6b\0\u2fa8\0\u2fe5\0\u3022\0\u305f\0\u309c"+
    "\0\u30d9\0\u02dc\0\u3116\0\u3153\0\u3190\0\u31cd\0\u320a\0\u3247"+
    "\0\u3284\0\u02dc\0\u32c1\0\u32fe\0\u333b\0\u3378\0\u33b5\0\u02dc"+
    "\0\u02dc\0\u02dc\0\u02dc\0\u33f2\0\u342f\0\u346c\0\u34a9\0\u34e6"+
    "\0\u3523\0\u3560\0\u359d\0\u35da\0\u3617\0\u3654\0\u3691\0\u02dc"+
    "\0\u36ce\0\u02dc\0\u02dc\0\u370b\0\u3748\0\u3785\0\u37c2\0\u02dc"+
    "\0\u37ff\0\u383c\0\u02dc\0\u3879\0\u38b6\0\u02dc\0\u38f3\0\u3930"+
    "\0\75\0\75\0\u396d\0\u39aa\0\u02dc\0\u39e7\0\u3a24\0\u3a61"+
    "\0\u02dc\0\u3a9e\0\u3adb\0\u3b18\0\u3b55\0\u3b92\0\u3bcf\0\u3c0c"+
    "\0\u3c49\0\u02dc\0\u02dc\0\u02dc\0\u02dc\0\u3c86\0\u3cc3\0\u3d00"+
    "\0\u3d3d\0\u02dc\0\u02dc\0\u3d7a\0\u3db7\0\u02dc\0\u02dc\0\u3df4"+
    "\0\u3e31\0\u3e6e\0\u3eab\0\u3ee8\0\u3f25\0\u3f62\0\u3f9f\0\u3fdc"+
    "\0\u4019\0\u02dc\0\u4056\0\u4093\0\u40d0\0\u02dc\0\u410d\0\u02dc"+
    "\0\u02dc\0\u414a\0\u4187\0\u41c4\0\u4201\0\u423e\0\u02dc\0\u427b"+
    "\0\u02dc\0\u42b8\0\u42f5\0\u02dc\0\u4332\0\u436f\0\u43ac\0\u43e9"+
    "\0\u4426\0\u4463\0\u44a0\0\u44dd\0\u451a\0\u4557\0\u4594\0\u02dc"+
    "\0\u02dc\0\u45d1\0\u02dc\0\u460e\0\u464b\0\u4688\0\u46c5\0\u02dc"+
    "\0\u4702\0\u473f\0\u477c\0\u47b9\0\u02dc\0\u47f6\0\u4833\0\u02dc"+
    "\0\u4870\0\u48ad\0\u48ea\0\u4927\0\u02dc\0\u4964\0\u02dc\0\u49a1"+
    "\0\u49de\0\u4a1b\0\u02dc";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[387];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\2\25\1\30"+
    "\1\31\2\25\1\32\1\25\1\33\1\34\1\35\1\36"+
    "\1\37\1\40\1\41\1\42\1\25\1\43\1\44\1\25"+
    "\1\45\1\46\1\47\1\25\1\50\1\51\1\52\1\53"+
    "\1\54\1\25\1\55\1\56\1\57\1\25\1\60\1\61"+
    "\1\25\1\2\76\0\2\3\113\0\1\62\71\0\1\63"+
    "\5\0\13\63\1\0\31\63\22\0\1\64\73\0\1\65"+
    "\73\0\1\64\1\0\1\17\6\0\1\66\17\0\1\66"+
    "\1\67\50\0\1\70\70\0\1\71\1\72\1\73\1\74"+
    "\2\0\13\71\1\0\31\71\25\0\1\75\74\0\1\76"+
    "\1\77\70\0\1\25\5\0\13\25\1\0\31\25\22\0"+
    "\1\25\5\0\13\25\1\0\27\25\1\100\1\25\22\0"+
    "\1\25\5\0\13\25\1\0\21\25\1\101\7\25\22\0"+
    "\1\25\5\0\13\25\1\0\5\25\1\102\23\25\22\0"+
    "\1\25\5\0\1\25\1\103\11\25\1\0\31\25\22\0"+
    "\1\25\5\0\12\25\1\104\1\0\31\25\22\0\1\25"+
    "\5\0\13\25\1\0\15\25\1\105\5\25\1\106\1\107"+
    "\4\25\22\0\1\25\5\0\13\25\1\0\24\25\1\110"+
    "\4\25\22\0\1\25\5\0\13\25\1\0\1\25\1\111"+
    "\6\25\1\112\5\25\1\113\12\25\22\0\1\25\5\0"+
    "\13\25\1\0\5\25\1\114\3\25\1\115\4\25\1\116"+
    "\12\25\22\0\1\25\5\0\13\25\1\0\15\25\1\117"+
    "\13\25\22\0\1\25\5\0\13\25\1\0\6\25\1\120"+
    "\2\25\1\121\1\25\1\122\15\25\22\0\1\25\5\0"+
    "\13\25\1\0\2\25\1\123\4\25\1\124\12\25\1\125"+
    "\6\25\22\0\1\25\5\0\13\25\1\0\14\25\1\126"+
    "\1\127\13\25\22\0\1\25\5\0\13\25\1\0\5\25"+
    "\1\130\3\25\1\131\17\25\22\0\1\25\5\0\13\25"+
    "\1\0\4\25\1\132\1\133\23\25\22\0\1\25\5\0"+
    "\13\25\1\0\1\25\1\134\3\25\1\135\23\25\22\0"+
    "\1\25\5\0\13\25\1\0\1\25\1\136\17\25\1\137"+
    "\7\25\22\0\1\25\5\0\13\25\1\0\24\25\1\140"+
    "\4\25\22\0\1\25\5\0\13\25\1\0\16\25\1\141"+
    "\12\25\22\0\1\25\5\0\13\25\1\0\5\25\1\142"+
    "\3\25\1\143\12\25\1\144\4\25\22\0\1\25\5\0"+
    "\13\25\1\0\7\25\1\145\21\25\22\0\1\25\5\0"+
    "\13\25\1\0\2\25\1\146\2\25\1\147\1\25\1\150"+
    "\12\25\1\151\6\25\22\0\1\25\5\0\13\25\1\0"+
    "\1\25\1\152\6\25\1\153\1\154\17\25\22\0\1\25"+
    "\5\0\13\25\1\0\16\25\1\155\12\25\20\0\1\156"+
    "\1\0\1\63\5\0\13\63\1\0\31\63\22\0\1\64"+
    "\6\0\1\66\17\0\1\66\1\67\26\0\2\65\1\0"+
    "\71\65\12\0\1\157\1\0\1\157\2\0\1\160\72\0"+
    "\1\161\1\0\1\71\5\0\13\71\1\0\31\71\22\0"+
    "\1\25\5\0\13\25\1\0\17\25\1\162\11\25\22\0"+
    "\1\25\5\0\13\25\1\0\5\25\1\163\23\25\22\0"+
    "\1\25\5\0\13\25\1\0\30\25\1\164\22\0\1\25"+
    "\5\0\6\25\1\165\4\25\1\0\31\25\22\0\1\25"+
    "\5\0\10\25\1\166\2\25\1\0\31\25\22\0\1\25"+
    "\5\0\13\25\1\0\30\25\1\167\22\0\1\25\5\0"+
    "\13\25\1\0\23\25\1\170\5\25\22\0\1\25\5\0"+
    "\13\25\1\0\23\25\1\171\5\25\22\0\1\25\5\0"+
    "\13\25\1\0\23\25\1\172\5\25\22\0\1\25\5\0"+
    "\13\25\1\0\22\25\1\173\6\25\22\0\1\25\5\0"+
    "\13\25\1\0\5\25\1\174\23\25\22\0\1\25\5\0"+
    "\13\25\1\0\14\25\1\175\2\25\1\176\11\25\22\0"+
    "\1\25\5\0\13\25\1\0\3\25\1\177\13\25\1\200"+
    "\2\25\1\201\6\25\22\0\1\25\5\0\13\25\1\0"+
    "\22\25\1\202\6\25\22\0\1\25\5\0\13\25\1\0"+
    "\24\25\1\203\4\25\22\0\1\25\5\0\13\25\1\0"+
    "\25\25\1\204\3\25\22\0\1\25\5\0\13\25\1\0"+
    "\24\25\1\205\4\25\22\0\1\25\5\0\13\25\1\0"+
    "\27\25\1\206\1\25\22\0\1\25\5\0\13\25\1\0"+
    "\16\25\1\207\12\25\22\0\1\25\5\0\13\25\1\0"+
    "\1\25\1\210\27\25\22\0\1\25\5\0\13\25\1\0"+
    "\21\25\1\211\7\25\22\0\1\25\5\0\13\25\1\0"+
    "\13\25\1\212\15\25\22\0\1\25\5\0\13\25\1\0"+
    "\17\25\1\213\11\25\22\0\1\25\5\0\13\25\1\0"+
    "\23\25\1\214\5\25\22\0\1\25\5\0\13\25\1\0"+
    "\23\25\1\215\5\25\22\0\1\25\5\0\13\25\1\0"+
    "\2\25\1\216\1\217\25\25\22\0\1\25\5\0\13\25"+
    "\1\0\16\25\1\220\12\25\22\0\1\25\5\0\13\25"+
    "\1\0\14\25\1\221\14\25\22\0\1\25\5\0\13\25"+
    "\1\0\14\25\1\222\14\25\22\0\1\25\5\0\13\25"+
    "\1\0\15\25\1\223\13\25\22\0\1\25\5\0\13\25"+
    "\1\0\21\25\1\224\7\25\22\0\1\25\5\0\13\25"+
    "\1\0\16\25\1\225\12\25\22\0\1\25\5\0\13\25"+
    "\1\0\1\25\1\226\27\25\22\0\1\25\5\0\13\25"+
    "\1\0\24\25\1\227\4\25\22\0\1\25\5\0\13\25"+
    "\1\0\20\25\1\230\10\25\22\0\1\25\5\0\13\25"+
    "\1\0\15\25\1\231\13\25\22\0\1\25\5\0\13\25"+
    "\1\0\14\25\1\232\14\25\22\0\1\25\5\0\13\25"+
    "\1\0\21\25\1\233\7\25\22\0\1\25\5\0\13\25"+
    "\1\0\1\25\1\234\27\25\22\0\1\25\5\0\13\25"+
    "\1\0\21\25\1\235\7\25\22\0\1\25\5\0\13\25"+
    "\1\0\21\25\1\236\7\25\22\0\1\25\5\0\13\25"+
    "\1\0\13\25\1\237\15\25\22\0\1\25\5\0\13\25"+
    "\1\0\25\25\1\240\3\25\22\0\1\25\5\0\13\25"+
    "\1\0\5\25\1\241\23\25\22\0\1\25\5\0\13\25"+
    "\1\0\23\25\1\242\5\25\22\0\1\25\5\0\13\25"+
    "\1\0\21\25\1\243\7\25\50\0\1\244\3\0\1\245"+
    "\2\0\1\246\37\0\1\160\74\0\1\160\27\0\1\67"+
    "\76\0\1\247\42\0\1\25\5\0\13\25\1\0\13\25"+
    "\1\250\15\25\22\0\1\25\5\0\13\25\1\0\5\25"+
    "\1\251\23\25\22\0\1\25\5\0\13\25\1\0\26\25"+
    "\1\252\2\25\22\0\1\25\5\0\4\25\1\253\6\25"+
    "\1\0\31\25\22\0\1\25\5\0\13\25\1\0\1\25"+
    "\1\254\27\25\22\0\1\25\5\0\13\25\1\0\10\25"+
    "\1\255\20\25\22\0\1\25\5\0\13\25\1\0\23\25"+
    "\1\256\5\25\22\0\1\25\5\0\13\25\1\0\5\25"+
    "\1\257\23\25\22\0\1\25\5\0\13\25\1\0\3\25"+
    "\1\260\25\25\22\0\1\25\5\0\13\25\1\0\17\25"+
    "\1\261\11\25\22\0\1\25\5\0\13\25\1\0\30\25"+
    "\1\262\22\0\1\25\5\0\13\25\1\0\13\25\1\263"+
    "\15\25\22\0\1\25\5\0\13\25\1\0\5\25\1\264"+
    "\23\25\22\0\1\25\5\0\13\25\1\0\3\25\1\265"+
    "\25\25\22\0\1\25\5\0\13\25\1\0\23\25\1\266"+
    "\5\25\22\0\1\25\5\0\13\25\1\0\2\25\1\267"+
    "\26\25\22\0\1\25\5\0\13\25\1\0\11\25\1\270"+
    "\17\25\22\0\1\25\5\0\13\25\1\0\15\25\1\271"+
    "\13\25\22\0\1\25\5\0\13\25\1\0\5\25\1\272"+
    "\23\25\22\0\1\25\5\0\13\25\1\0\1\25\1\273"+
    "\27\25\22\0\1\25\5\0\13\25\1\0\21\25\1\274"+
    "\7\25\22\0\1\25\5\0\13\25\1\0\16\25\1\275"+
    "\12\25\22\0\1\25\5\0\13\25\1\0\11\25\1\276"+
    "\17\25\22\0\1\25\5\0\13\25\1\0\16\25\1\277"+
    "\12\25\22\0\1\25\5\0\13\25\1\0\21\25\1\300"+
    "\7\25\22\0\1\25\5\0\13\25\1\0\21\25\1\301"+
    "\7\25\22\0\1\25\5\0\13\25\1\0\5\25\1\302"+
    "\23\25\22\0\1\25\5\0\13\25\1\0\3\25\1\303"+
    "\25\25\22\0\1\25\5\0\13\25\1\0\5\25\1\304"+
    "\23\25\22\0\1\25\5\0\13\25\1\0\23\25\1\305"+
    "\5\25\22\0\1\25\5\0\13\25\1\0\4\25\1\306"+
    "\24\25\22\0\1\25\5\0\13\25\1\0\4\25\1\307"+
    "\24\25\22\0\1\25\5\0\13\25\1\0\23\25\1\310"+
    "\5\25\22\0\1\25\5\0\13\25\1\0\7\25\1\311"+
    "\21\25\22\0\1\25\5\0\13\25\1\0\16\25\1\312"+
    "\12\25\22\0\1\25\5\0\13\25\1\0\21\25\1\313"+
    "\7\25\22\0\1\25\5\0\13\25\1\0\22\25\1\314"+
    "\6\25\22\0\1\25\5\0\13\25\1\0\16\25\1\315"+
    "\12\25\22\0\1\25\5\0\13\25\1\0\11\25\1\316"+
    "\17\25\22\0\1\25\5\0\13\25\1\0\5\25\1\317"+
    "\23\25\22\0\1\25\5\0\13\25\1\0\21\25\1\320"+
    "\7\25\22\0\1\25\5\0\13\25\1\0\10\25\1\321"+
    "\20\25\66\0\1\322\16\0\1\323\141\0\1\324\45\0"+
    "\1\323\70\0\1\25\5\0\13\25\1\0\11\25\1\325"+
    "\17\25\22\0\1\25\5\0\12\25\1\326\1\0\31\25"+
    "\22\0\1\25\5\0\13\25\1\0\16\25\1\327\12\25"+
    "\22\0\1\25\5\0\7\25\1\330\3\25\1\0\31\25"+
    "\22\0\1\25\5\0\13\25\1\0\3\25\1\331\25\25"+
    "\22\0\1\25\5\0\13\25\1\0\16\25\1\332\12\25"+
    "\22\0\1\25\5\0\13\25\1\0\16\25\1\333\12\25"+
    "\22\0\1\25\5\0\13\25\1\0\12\25\1\334\16\25"+
    "\22\0\1\25\5\0\13\25\1\0\16\25\1\335\12\25"+
    "\22\0\1\25\5\0\13\25\1\0\21\25\1\336\7\25"+
    "\22\0\1\25\5\0\13\25\1\0\1\25\1\337\27\25"+
    "\22\0\1\25\5\0\13\25\1\0\15\25\1\340\13\25"+
    "\22\0\1\25\5\0\13\25\1\0\21\25\1\341\7\25"+
    "\22\0\1\25\5\0\13\25\1\0\21\25\1\342\7\25"+
    "\22\0\1\25\5\0\13\25\1\0\13\25\1\343\15\25"+
    "\22\0\1\25\5\0\13\25\1\0\21\25\1\344\7\25"+
    "\22\0\1\25\5\0\13\25\1\0\3\25\1\345\25\25"+
    "\22\0\1\25\5\0\13\25\1\0\4\25\1\346\24\25"+
    "\22\0\1\25\5\0\13\25\1\0\23\25\1\347\5\25"+
    "\22\0\1\25\5\0\13\25\1\0\7\25\1\350\21\25"+
    "\22\0\1\25\5\0\13\25\1\0\24\25\1\351\4\25"+
    "\22\0\1\25\5\0\13\25\1\0\4\25\1\352\24\25"+
    "\22\0\1\25\5\0\13\25\1\0\21\25\1\353\7\25"+
    "\22\0\1\25\5\0\13\25\1\0\5\25\1\354\23\25"+
    "\22\0\1\25\5\0\13\25\1\0\1\25\1\355\27\25"+
    "\22\0\1\25\5\0\13\25\1\0\15\25\1\356\13\25"+
    "\22\0\1\25\5\0\13\25\1\0\23\25\1\357\5\25"+
    "\22\0\1\25\5\0\13\25\1\0\21\25\1\360\7\25"+
    "\22\0\1\25\5\0\13\25\1\0\17\25\1\361\11\25"+
    "\22\0\1\25\5\0\13\25\1\0\5\25\1\362\23\25"+
    "\22\0\1\25\5\0\13\25\1\0\13\25\1\363\15\25"+
    "\22\0\1\25\5\0\13\25\1\0\24\25\1\364\4\25"+
    "\22\0\1\25\5\0\13\25\1\0\7\25\1\365\21\25"+
    "\22\0\1\25\5\0\13\25\1\0\11\25\1\366\17\25"+
    "\22\0\1\25\5\0\13\25\1\0\24\25\1\367\4\25"+
    "\22\0\1\25\5\0\13\25\1\0\4\25\1\370\24\25"+
    "\22\0\1\25\5\0\13\25\1\0\6\25\1\371\22\25"+
    "\22\0\1\25\5\0\13\25\1\0\5\25\1\372\23\25"+
    "\63\0\1\373\57\0\1\374\50\0\1\25\5\0\13\25"+
    "\1\0\3\25\1\375\25\25\22\0\1\25\5\0\13\25"+
    "\1\0\5\25\1\376\23\25\22\0\1\25\5\0\13\25"+
    "\1\0\21\25\1\377\7\25\22\0\1\25\5\0\3\25"+
    "\1\u0100\7\25\1\0\31\25\22\0\1\25\5\0\13\25"+
    "\1\0\10\25\1\u0101\20\25\22\0\1\25\5\0\13\25"+
    "\1\0\21\25\1\u0102\7\25\22\0\1\25\5\0\13\25"+
    "\1\0\15\25\1\u0103\13\25\22\0\1\25\5\0\13\25"+
    "\1\0\2\25\1\u0104\26\25\22\0\1\25\5\0\13\25"+
    "\1\0\15\25\1\u0105\13\25\22\0\1\25\5\0\13\25"+
    "\1\0\11\25\1\u0106\17\25\22\0\1\25\5\0\13\25"+
    "\1\0\21\25\1\u0107\7\25\22\0\1\25\5\0\13\25"+
    "\1\0\4\25\1\u0108\24\25\22\0\1\25\5\0\13\25"+
    "\1\0\11\25\1\u0109\17\25\22\0\1\25\5\0\13\25"+
    "\1\0\11\25\1\u010a\17\25\22\0\1\25\5\0\13\25"+
    "\1\0\5\25\1\u010b\23\25\22\0\1\25\5\0\13\25"+
    "\1\0\16\25\1\u010c\12\25\22\0\1\25\5\0\13\25"+
    "\1\0\23\25\1\u010d\5\25\22\0\1\25\5\0\13\25"+
    "\1\0\17\25\1\u010e\11\25\22\0\1\25\5\0\13\25"+
    "\1\0\21\25\1\u010f\7\25\22\0\1\25\5\0\13\25"+
    "\1\0\17\25\1\u0110\11\25\22\0\1\25\5\0\13\25"+
    "\1\0\5\25\1\u0111\23\25\22\0\1\25\5\0\13\25"+
    "\1\0\23\25\1\u0112\5\25\22\0\1\25\5\0\13\25"+
    "\1\0\3\25\1\u0113\25\25\22\0\1\25\5\0\13\25"+
    "\1\0\21\25\1\u0114\7\25\22\0\1\25\5\0\13\25"+
    "\1\0\3\25\1\u0115\16\25\1\u0116\6\25\22\0\1\25"+
    "\5\0\13\25\1\0\1\25\1\u0117\27\25\22\0\1\25"+
    "\5\0\13\25\1\0\30\25\1\u0118\22\0\1\25\5\0"+
    "\13\25\1\0\21\25\1\u0119\7\25\22\0\1\25\5\0"+
    "\13\25\1\0\5\25\1\u011a\23\25\22\0\1\25\5\0"+
    "\13\25\1\0\17\25\1\u011b\11\25\22\0\1\25\5\0"+
    "\13\25\1\0\21\25\1\u011c\7\25\22\0\1\25\5\0"+
    "\13\25\1\0\16\25\1\u011d\12\25\22\0\1\25\5\0"+
    "\13\25\1\0\17\25\1\u011e\11\25\22\0\1\25\5\0"+
    "\13\25\1\0\5\25\1\u011f\23\25\22\0\1\25\5\0"+
    "\13\25\1\0\16\25\1\u0120\12\25\10\0\1\u0121\74\0"+
    "\1\u0122\106\0\1\25\5\0\13\25\1\0\11\25\1\u0123"+
    "\17\25\22\0\1\25\5\0\13\25\1\0\27\25\1\u0124"+
    "\1\25\22\0\1\25\5\0\13\25\1\0\4\25\1\u0125"+
    "\24\25\22\0\1\25\5\0\13\25\1\0\16\25\1\u0126"+
    "\12\25\22\0\1\25\5\0\13\25\1\0\5\25\1\u0127"+
    "\23\25\22\0\1\25\5\0\13\25\1\0\7\25\1\u0128"+
    "\21\25\22\0\1\25\5\0\13\25\1\0\5\25\1\u0129"+
    "\23\25\22\0\1\25\5\0\13\25\1\0\5\25\1\u012a"+
    "\23\25\22\0\1\25\5\0\13\25\1\0\17\25\1\u012b"+
    "\11\25\22\0\1\25\5\0\13\25\1\0\2\25\1\u012c"+
    "\26\25\22\0\1\25\5\0\13\25\1\0\17\25\1\u012d"+
    "\11\25\22\0\1\25\5\0\13\25\1\0\15\25\1\u012e"+
    "\13\25\22\0\1\25\5\0\13\25\1\0\11\25\1\u012f"+
    "\17\25\22\0\1\25\5\0\13\25\1\0\16\25\1\u0130"+
    "\12\25\22\0\1\25\5\0\13\25\1\0\1\25\1\u0131"+
    "\27\25\22\0\1\25\5\0\13\25\1\0\21\25\1\u0132"+
    "\7\25\22\0\1\25\5\0\13\25\1\0\30\25\1\u0133"+
    "\22\0\1\25\5\0\13\25\1\0\5\25\1\u0134\23\25"+
    "\22\0\1\25\5\0\13\25\1\0\5\25\1\u0135\23\25"+
    "\22\0\1\25\5\0\13\25\1\0\7\25\1\u0136\21\25"+
    "\22\0\1\25\5\0\13\25\1\0\5\25\1\u0137\23\25"+
    "\22\0\1\25\5\0\13\25\1\0\17\25\1\u0138\11\25"+
    "\22\0\1\25\5\0\13\25\1\0\1\25\1\u0139\27\25"+
    "\22\0\1\25\5\0\13\25\1\0\15\25\1\u013a\13\25"+
    "\22\0\1\25\5\0\13\25\1\0\21\25\1\u013b\7\25"+
    "\22\0\1\25\5\0\13\25\1\0\21\25\1\u013c\7\25"+
    "\22\0\1\25\5\0\13\25\1\0\23\25\1\u013d\5\25"+
    "\22\0\1\25\5\0\13\25\1\0\23\25\1\u013e\5\25"+
    "\22\0\1\25\5\0\13\25\1\0\27\25\1\u013f\1\25"+
    "\22\0\1\25\5\0\13\25\1\0\15\25\1\u0140\13\25"+
    "\22\0\1\25\5\0\13\25\1\0\10\25\1\u0141\20\25"+
    "\22\0\1\25\5\0\13\25\1\0\15\25\1\u0142\13\25"+
    "\22\0\1\25\5\0\13\25\1\0\23\25\1\u0143\5\25"+
    "\22\0\1\25\5\0\13\25\1\0\24\25\1\u0144\4\25"+
    "\22\0\1\25\5\0\13\25\1\0\21\25\1\u0145\7\25"+
    "\22\0\1\25\5\0\13\25\1\0\14\25\1\u0146\14\25"+
    "\22\0\1\25\5\0\13\25\1\0\16\25\1\u0147\12\25"+
    "\22\0\1\25\5\0\13\25\1\0\11\25\1\u0148\17\25"+
    "\22\0\1\25\5\0\13\25\1\0\17\25\1\u0149\11\25"+
    "\22\0\1\25\5\0\13\25\1\0\22\25\1\u014a\6\25"+
    "\22\0\1\25\5\0\13\25\1\0\3\25\1\u014b\25\25"+
    "\22\0\1\25\5\0\13\25\1\0\21\25\1\u014c\7\25"+
    "\22\0\1\25\5\0\13\25\1\0\17\25\1\u014d\11\25"+
    "\22\0\1\25\5\0\13\25\1\0\14\25\1\u014e\14\25"+
    "\22\0\1\25\5\0\11\25\1\u014f\1\25\1\0\31\25"+
    "\22\0\1\25\5\0\13\25\1\0\23\25\1\u0150\5\25"+
    "\22\0\1\25\5\0\13\25\1\0\23\25\1\u0151\5\25"+
    "\22\0\1\25\5\0\13\25\1\0\3\25\1\u0152\25\25"+
    "\22\0\1\25\5\0\13\25\1\0\11\25\1\u0153\17\25"+
    "\22\0\1\25\5\0\13\25\1\0\23\25\1\u0154\5\25"+
    "\22\0\1\25\5\0\13\25\1\0\5\25\1\u0155\23\25"+
    "\22\0\1\25\5\0\13\25\1\0\5\25\1\u0156\23\25"+
    "\22\0\1\25\5\0\13\25\1\0\15\25\1\u0157\13\25"+
    "\22\0\1\25\5\0\13\25\1\0\15\25\1\u0158\13\25"+
    "\22\0\1\25\5\0\13\25\1\0\10\25\1\u0159\20\25"+
    "\22\0\1\25\5\0\13\25\1\0\11\25\1\u015a\17\25"+
    "\22\0\1\25\5\0\13\25\1\0\5\25\1\u015b\23\25"+
    "\22\0\1\25\5\0\13\25\1\0\10\25\1\u015c\20\25"+
    "\22\0\1\25\5\0\13\25\1\0\24\25\1\u015d\4\25"+
    "\22\0\1\25\5\0\13\25\1\0\11\25\1\u015e\17\25"+
    "\22\0\1\25\5\0\13\25\1\0\16\25\1\u015f\12\25"+
    "\22\0\1\25\5\0\13\25\1\0\5\25\1\u0160\23\25"+
    "\22\0\1\25\5\0\13\25\1\0\3\25\1\u0161\25\25"+
    "\22\0\1\25\5\0\13\25\1\0\15\25\1\u0162\13\25"+
    "\22\0\1\25\5\0\13\25\1\0\23\25\1\u0163\5\25"+
    "\22\0\1\25\5\0\13\25\1\0\22\25\1\u0164\6\25"+
    "\22\0\1\25\5\0\13\25\1\0\3\25\1\u0165\25\25"+
    "\22\0\1\25\5\0\13\25\1\0\2\25\1\u0166\26\25"+
    "\22\0\1\25\5\0\13\25\1\0\5\25\1\u0167\23\25"+
    "\22\0\1\25\5\0\13\25\1\0\15\25\1\u0168\13\25"+
    "\22\0\1\25\5\0\13\25\1\0\4\25\1\u0169\24\25"+
    "\22\0\1\25\5\0\13\25\1\0\11\25\1\u016a\17\25"+
    "\22\0\1\25\5\0\13\25\1\0\23\25\1\u016b\5\25"+
    "\22\0\1\25\5\0\13\25\1\0\17\25\1\u016c\11\25"+
    "\22\0\1\25\5\0\13\25\1\0\11\25\1\u016d\17\25"+
    "\22\0\1\25\5\0\13\25\1\0\11\25\1\u016e\17\25"+
    "\22\0\1\25\5\0\13\25\1\0\22\25\1\u016f\6\25"+
    "\22\0\1\25\5\0\13\25\1\0\22\25\1\u0170\6\25"+
    "\22\0\1\25\5\0\13\25\1\0\22\25\1\u0171\6\25"+
    "\22\0\1\25\5\0\13\25\1\0\21\25\1\u0172\7\25"+
    "\22\0\1\25\5\0\13\25\1\0\16\25\1\u0173\12\25"+
    "\22\0\1\25\5\0\13\25\1\0\22\25\1\u0174\6\25"+
    "\22\0\1\25\5\0\13\25\1\0\23\25\1\u0175\5\25"+
    "\22\0\1\25\5\0\13\25\1\0\11\25\1\u0176\17\25"+
    "\22\0\1\25\5\0\13\25\1\0\5\25\1\u0177\23\25"+
    "\22\0\1\25\5\0\13\25\1\0\15\25\1\u0178\13\25"+
    "\22\0\1\25\5\0\13\25\1\0\11\25\1\u0179\17\25"+
    "\22\0\1\25\5\0\13\25\1\0\16\25\1\u017a\12\25"+
    "\22\0\1\25\5\0\13\25\1\0\3\25\1\u017b\25\25"+
    "\22\0\1\25\5\0\13\25\1\0\16\25\1\u017c\12\25"+
    "\22\0\1\25\5\0\13\25\1\0\15\25\1\u017d\13\25"+
    "\22\0\1\25\5\0\13\25\1\0\11\25\1\u017e\17\25"+
    "\22\0\1\25\5\0\13\25\1\0\15\25\1\u017f\13\25"+
    "\22\0\1\25\5\0\13\25\1\0\22\25\1\u0180\6\25"+
    "\22\0\1\25\5\0\13\25\1\0\11\25\1\u0181\17\25"+
    "\22\0\1\25\5\0\13\25\1\0\16\25\1\u0182\12\25"+
    "\22\0\1\25\5\0\13\25\1\0\15\25\1\u0183\13\25"+
    "\4\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[19032];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\3\1\7\11\7\1\1\11\6\1\2\11"+
    "\23\1\3\11\1\0\2\1\1\0\2\11\1\0\6\11"+
    "\56\1\2\0\1\1\1\0\62\1\4\0\52\1\1\0"+
    "\1\11\1\0\46\1\2\0\44\1\2\11\141\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[387];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
  public _FaustLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _FaustLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return BAD_CHARACTER;
            }
          // fall through
          case 85: break;
          case 2:
            { return WHITE_SPACE;
            }
          // fall through
          case 86: break;
          case 3:
            { return SIG_CUT;
            }
          // fall through
          case 87: break;
          case 4:
            { return MATH_REM;
            }
          // fall through
          case 88: break;
          case 5:
            { return BIT_AND;
            }
          // fall through
          case 89: break;
          case 6:
            { return TIME_DELAY1;
            }
          // fall through
          case 90: break;
          case 7:
            { return MATH_MUL;
            }
          // fall through
          case 91: break;
          case 8:
            { return MATH_ADD;
            }
          // fall through
          case 92: break;
          case 9:
            { return COMPOSE_PAR;
            }
          // fall through
          case 93: break;
          case 10:
            { return MATH_SUB;
            }
          // fall through
          case 94: break;
          case 11:
            { return MATH_DIV;
            }
          // fall through
          case 95: break;
          case 12:
            { return NUMBER;
            }
          // fall through
          case 96: break;
          case 13:
            { return COMPOSE_SEQ;
            }
          // fall through
          case 97: break;
          case 14:
            { return COMPARE_LESS;
            }
          // fall through
          case 98: break;
          case 15:
            { return COMPARE_MORE;
            }
          // fall through
          case 99: break;
          case 16:
            { return TIME_DELAY;
            }
          // fall through
          case 100: break;
          case 17:
            { return IDENTIFIER;
            }
          // fall through
          case 101: break;
          case 18:
            { return MATH_POW;
            }
          // fall through
          case 102: break;
          case 19:
            { return SIG_IDENTITY;
            }
          // fall through
          case 103: break;
          case 20:
            { return BIT_OR;
            }
          // fall through
          case 104: break;
          case 21:
            { return COMPOSE_REC;
            }
          // fall through
          case 105: break;
          case 22:
            { return COMPARE_NEQ;
            }
          // fall through
          case 106: break;
          case 23:
            { return LINE_COMMENT;
            }
          // fall through
          case 107: break;
          case 24:
            { return COMPOSE_MERGE;
            }
          // fall through
          case 108: break;
          case 25:
            { return COMPOSE_SPLIT;
            }
          // fall through
          case 109: break;
          case 26:
            { return BIT_LSHIFT;
            }
          // fall through
          case 110: break;
          case 27:
            { return COMPARE_LEQ;
            }
          // fall through
          case 111: break;
          case 28:
            { return COMPARE_EQ;
            }
          // fall through
          case 112: break;
          case 29:
            { return COMPARE_GEQ;
            }
          // fall through
          case 113: break;
          case 30:
            { return BIT_RSHIFT;
            }
          // fall through
          case 114: break;
          case 31:
            { return MEM;
            }
          // fall through
          case 115: break;
          case 32:
            { return ANY;
            }
          // fall through
          case 116: break;
          case 33:
            { return INT;
            }
          // fall through
          case 117: break;
          case 34:
            { return TIME_MEM;
            }
          // fall through
          case 118: break;
          case 35:
            { return PAR;
            }
          // fall through
          case 119: break;
          case 36:
            { return SEQ;
            }
          // fall through
          case 120: break;
          case 37:
            { return SUM;
            }
          // fall through
          case 121: break;
          case 38:
            { return BIT_XOR;
            }
          // fall through
          case 122: break;
          case 39:
            { return CASE;
            }
          // fall through
          case 123: break;
          case 40:
            { return NAME;
            }
          // fall through
          case 124: break;
          case 41:
            { return PROD;
            }
          // fall through
          case 125: break;
          case 42:
            { return WITH;
            }
          // fall through
          case 126: break;
          case 43:
            { return CINCLUDE;
            }
          // fall through
          case 127: break;
          case 44:
            { return FLOAT;
            }
          // fall through
          case 128: break;
          case 45:
            { return ROUTE;
            }
          // fall through
          case 129: break;
          case 46:
            { return WHERE;
            }
          // fall through
          case 130: break;
          case 47:
            { return STRING;
            }
          // fall through
          case 131: break;
          case 48:
            { return ATTACH;
            }
          // fall through
          case 132: break;
          case 49:
            { return AUTHOR;
            }
          // fall through
          case 133: break;
          case 50:
            { return BUTTON;
            }
          // fall through
          case 134: break;
          case 51:
            { return HGROUP;
            }
          // fall through
          case 135: break;
          case 52:
            { return IMPORT;
            }
          // fall through
          case 136: break;
          case 53:
            { return LETREC;
            }
          // fall through
          case 137: break;
          case 54:
            { return NENTRY;
            }
          // fall through
          case 138: break;
          case 55:
            { return TGROUP;
            }
          // fall through
          case 139: break;
          case 56:
            { return VGROUP;
            }
          // fall through
          case 140: break;
          case 57:
            { return DSPFILE;
            }
          // fall through
          case 141: break;
          case 58:
            { return LIBFILE;
            }
          // fall through
          case 142: break;
          case 59:
            { return KEYWORD;
            }
          // fall through
          case 143: break;
          case 60:
            { return DECLARE;
            }
          // fall through
          case 144: break;
          case 61:
            { return HSLIDER;
            }
          // fall through
          case 145: break;
          case 62:
            { return LIBRARY;
            }
          // fall through
          case 146: break;
          case 63:
            { return LICENCE;
            }
          // fall through
          case 147: break;
          case 64:
            { return LICENSE;
            }
          // fall through
          case 148: break;
          case 65:
            { return VERSION;
            }
          // fall through
          case 149: break;
          case 66:
            { return VSLIDER;
            }
          // fall through
          case 150: break;
          case 67:
            { return FREETEXT;
            }
          // fall through
          case 151: break;
          case 68:
            { return CHECKBOX;
            }
          // fall through
          case 152: break;
          case 69:
            { return MDOCTAGS;
            }
          // fall through
          case 153: break;
          case 70:
            { return WAVEFORM;
            }
          // fall through
          case 154: break;
          case 71:
            { return COMPONENT;
            }
          // fall through
          case 155: break;
          case 72:
            { return COPYRIGHT;
            }
          // fall through
          case 156: break;
          case 73:
            { return FFUNCTION;
            }
          // fall through
          case 157: break;
          case 74:
            { return HBARGRAPH;
            }
          // fall through
          case 158: break;
          case 75:
            { return VBARGRAPH;
            }
          // fall through
          case 159: break;
          case 76:
            { return DESCRIPTION;
            }
          // fall through
          case 160: break;
          case 77:
            { return DISTRIBUTED;
            }
          // fall through
          case 161: break;
          case 78:
            { return ENVIRONMENT;
            }
          // fall through
          case 162: break;
          case 79:
            { return DEPENDENCIES;
            }
          // fall through
          case 163: break;
          case 80:
            { return EXPLICITSUBST;
            }
          // fall through
          case 164: break;
          case 81:
            { return QUADPRECISION;
            }
          // fall through
          case 165: break;
          case 82:
            { return DOUBLEPRECISION;
            }
          // fall through
          case 166: break;
          case 83:
            { return SINGLEPRECISION;
            }
          // fall through
          case 167: break;
          case 84:
            { return FIXEDPOINTPRECISION;
            }
          // fall through
          case 168: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
