// Generated by JFlex 1.9.2 http://jflex.de/  (tweaked for IntelliJ platform)
// source: src/main/grammar/_FaustLexer.flex

package com.github.hatchjaw.faust;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static com.github.hatchjaw.faust.psi.FaustTypes.*;


public class _FaustLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\u10ff\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\2\0\1\2\22\0\1\1\1\3"+
    "\1\4\2\0\1\5\1\6\1\7\1\10\1\11\1\12"+
    "\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22"+
    "\1\23\6\24\1\25\1\26\1\27\1\30\1\31\1\0"+
    "\1\32\4\33\1\34\1\35\2\33\1\36\6\33\1\37"+
    "\1\33\1\40\5\33\1\41\2\33\1\42\1\43\1\44"+
    "\1\45\1\46\1\0\1\47\1\50\1\51\1\52\1\53"+
    "\1\54\1\55\1\56\1\57\1\33\1\60\1\61\1\62"+
    "\1\63\1\64\1\65\1\66\1\67\1\70\1\71\1\72"+
    "\1\73\1\74\1\75\1\76\1\33\1\77\1\100\1\101"+
    "\1\102\u0181\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[512];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\1\1\4\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\2\26"+
    "\1\27\1\30\1\31\1\32\1\33\24\26\1\34\1\35"+
    "\1\36\1\37\1\40\1\0\1\41\1\42\1\17\1\43"+
    "\1\44\1\0\1\17\1\0\1\45\1\46\1\47\1\50"+
    "\1\51\1\52\1\53\1\54\1\0\72\26\2\0\1\17"+
    "\1\26\1\55\1\26\1\56\12\26\1\57\4\26\1\60"+
    "\14\26\1\61\2\26\1\62\1\26\1\63\1\64\1\65"+
    "\2\26\1\66\1\67\11\26\1\70\1\71\2\26\1\72"+
    "\1\73\7\26\1\74\1\43\1\26\1\75\1\76\1\26"+
    "\1\77\2\26\1\100\1\101\14\26\1\102\17\26\1\103"+
    "\3\26\1\104\6\26\1\105\6\26\1\106\2\26\1\107"+
    "\14\26\1\110\1\111\11\26\1\112\10\26\1\113\1\114"+
    "\11\26\1\115\1\116\1\26\1\117\1\120\5\26\1\121"+
    "\6\26\1\122\2\26\1\123\1\124\1\125\1\26\1\126"+
    "\1\127\1\130\1\26\1\131\7\26\1\132\1\26\1\133"+
    "\5\26\1\134\1\135\7\26\1\136\1\137\1\140\1\141"+
    "\1\26\1\142\1\26\1\143\1\144\1\145\3\26\1\146"+
    "\2\26\1\147\15\26\1\150\1\26\1\151\2\26\1\152"+
    "\1\153\1\26\1\154\1\155\1\26\1\156\1\26\1\157"+
    "\1\160\10\26\1\161\3\26\1\162\6\26\1\163\4\26"+
    "\1\164\1\26\1\165\3\26\1\166";

  private static int [] zzUnpackAction() {
    int [] result = new int[433];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\103\0\206\0\311\0\u010c\0\103\0\103\0\103"+
    "\0\103\0\103\0\103\0\103\0\103\0\u014f\0\u0192\0\u01d5"+
    "\0\u0218\0\u025b\0\103\0\u029e\0\u02e1\0\u0324\0\103\0\u0367"+
    "\0\u03aa\0\103\0\103\0\103\0\103\0\u03ed\0\u0430\0\u0473"+
    "\0\u04b6\0\u04f9\0\u053c\0\u057f\0\u05c2\0\u0605\0\u0648\0\u068b"+
    "\0\u06ce\0\u0711\0\u0754\0\u0797\0\u07da\0\u081d\0\u0860\0\u08a3"+
    "\0\u08e6\0\u0929\0\103\0\103\0\103\0\103\0\103\0\u010c"+
    "\0\103\0\103\0\u096c\0\u09af\0\u09f2\0\u0a35\0\103\0\u03ed"+
    "\0\103\0\103\0\103\0\103\0\103\0\103\0\103\0\103"+
    "\0\u0a78\0\u0abb\0\u0afe\0\u0b41\0\u0b84\0\u0bc7\0\u0c0a\0\u0c4d"+
    "\0\u0c90\0\u0cd3\0\u0d16\0\u0d59\0\u0d9c\0\u0ddf\0\u0e22\0\u0e65"+
    "\0\u0ea8\0\u0eeb\0\u0f2e\0\u0f71\0\u0fb4\0\u0ff7\0\u103a\0\u107d"+
    "\0\u10c0\0\u1103\0\u1146\0\u1189\0\u11cc\0\u120f\0\u1252\0\u1295"+
    "\0\u12d8\0\u131b\0\u135e\0\u13a1\0\u13e4\0\u1427\0\u146a\0\u14ad"+
    "\0\u14f0\0\u1533\0\u1576\0\u15b9\0\u15fc\0\u163f\0\u1682\0\u16c5"+
    "\0\u1708\0\u174b\0\u178e\0\u17d1\0\u1814\0\u1857\0\u189a\0\u18dd"+
    "\0\u1920\0\u1963\0\u19a6\0\u19e9\0\u1a2c\0\u1a6f\0\u1ab2\0\u0367"+
    "\0\u1af5\0\u0367\0\u1b38\0\u1b7b\0\u1bbe\0\u1c01\0\u1c44\0\u1c87"+
    "\0\u1cca\0\u1d0d\0\u1d50\0\u1d93\0\u0367\0\u1dd6\0\u1e19\0\u1e5c"+
    "\0\u1e9f\0\u0367\0\u1ee2\0\u1f25\0\u1f68\0\u1fab\0\u1fee\0\u2031"+
    "\0\u2074\0\u20b7\0\u20fa\0\u213d\0\u2180\0\u21c3\0\u0367\0\u2206"+
    "\0\u2249\0\u228c\0\u22cf\0\u0367\0\u0367\0\u2312\0\u2355\0\u2398"+
    "\0\u0367\0\u0367\0\u23db\0\u241e\0\u2461\0\u24a4\0\u24e7\0\u252a"+
    "\0\u256d\0\u25b0\0\u25f3\0\u0367\0\u2636\0\u2679\0\u26bc\0\u0367"+
    "\0\u0367\0\u26ff\0\u2742\0\u2785\0\u27c8\0\u280b\0\u284e\0\u2891"+
    "\0\u0367\0\103\0\u28d4\0\u0367\0\u0367\0\u2917\0\u295a\0\u299d"+
    "\0\u29e0\0\u0367\0\u0367\0\u2a23\0\u2a66\0\u2aa9\0\u2aec\0\u2b2f"+
    "\0\u2b72\0\u2bb5\0\u2bf8\0\u2c3b\0\u2c7e\0\u2cc1\0\u2d04\0\u0367"+
    "\0\u2d47\0\u2d8a\0\u2dcd\0\u2e10\0\u2e53\0\u2e96\0\u2ed9\0\u2f1c"+
    "\0\u2f5f\0\u2fa2\0\u2fe5\0\u3028\0\u306b\0\u30ae\0\u30f1\0\u0367"+
    "\0\u3134\0\u3177\0\u31ba\0\u0367\0\u31fd\0\u3240\0\u3283\0\u32c6"+
    "\0\u3309\0\u334c\0\u0367\0\u338f\0\u33d2\0\u3415\0\u3458\0\u349b"+
    "\0\u34de\0\u0367\0\u3521\0\u3564\0\u0367\0\u35a7\0\u35ea\0\u362d"+
    "\0\u3670\0\u36b3\0\u36f6\0\u3739\0\u377c\0\u37bf\0\u3802\0\u3845"+
    "\0\u3888\0\u0367\0\u0367\0\u38cb\0\u390e\0\u3951\0\u3994\0\u39d7"+
    "\0\u3a1a\0\u3a5d\0\u3aa0\0\u3ae3\0\u0367\0\u3b26\0\u3b69\0\u3bac"+
    "\0\u3bef\0\u3c32\0\u3c75\0\u3cb8\0\u3cfb\0\u0367\0\u0367\0\u3d3e"+
    "\0\u3d81\0\u3dc4\0\u3e07\0\u3e4a\0\u3e8d\0\u3ed0\0\u3f13\0\u3f56"+
    "\0\u0367\0\u0367\0\u3f99\0\u0367\0\u0367\0\u3fdc\0\u401f\0\u4062"+
    "\0\u40a5\0\u40e8\0\u0367\0\u412b\0\u416e\0\u41b1\0\u41f4\0\u4237"+
    "\0\u427a\0\u0367\0\u42bd\0\u4300\0\u0367\0\u0367\0\u0367\0\u4343"+
    "\0\u0367\0\u0367\0\u0367\0\u4386\0\u0367\0\u43c9\0\u440c\0\u444f"+
    "\0\u4492\0\u44d5\0\u4518\0\u455b\0\u0367\0\u459e\0\u0367\0\u45e1"+
    "\0\u4624\0\u4667\0\u46aa\0\u46ed\0\u0367\0\u0367\0\u4730\0\u4773"+
    "\0\u47b6\0\u47f9\0\u483c\0\u487f\0\u48c2\0\u0367\0\u0367\0\u0367"+
    "\0\u0367\0\u4905\0\u0367\0\u4948\0\u0367\0\u0367\0\u0367\0\u498b"+
    "\0\u49ce\0\u4a11\0\u0367\0\u4a54\0\u4a97\0\u0367\0\u4ada\0\u4b1d"+
    "\0\u4b60\0\u4ba3\0\u4be6\0\u4c29\0\u4c6c\0\u4caf\0\u4cf2\0\u4d35"+
    "\0\u4d78\0\u4dbb\0\u4dfe\0\u0367\0\u4e41\0\u0367\0\u4e84\0\u4ec7"+
    "\0\u0367\0\u0367\0\u4f0a\0\u0367\0\u0367\0\u4f4d\0\u0367\0\u4f90"+
    "\0\u0367\0\u0367\0\u4fd3\0\u5016\0\u5059\0\u509c\0\u50df\0\u5122"+
    "\0\u5165\0\u51a8\0\u0367\0\u51eb\0\u522e\0\u5271\0\u0367\0\u52b4"+
    "\0\u52f7\0\u533a\0\u537d\0\u53c0\0\u5403\0\u0367\0\u5446\0\u5489"+
    "\0\u54cc\0\u550f\0\u0367\0\u5552\0\u0367\0\u5595\0\u55d8\0\u561b"+
    "\0\u0367";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[433];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\5\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\4\30\1\31"+
    "\2\30\1\32\1\33\1\34\1\35\1\36\1\37\1\40"+
    "\1\41\1\42\1\43\1\44\1\30\1\45\1\46\1\30"+
    "\1\47\1\50\1\51\1\52\1\53\1\54\1\55\1\56"+
    "\1\57\1\30\1\60\1\61\1\62\1\30\1\63\1\64"+
    "\1\65\1\66\104\0\2\3\130\0\1\67\52\0\4\70"+
    "\1\71\76\70\31\0\1\72\71\0\5\73\70\0\1\74"+
    "\4\0\1\75\101\0\1\73\1\0\5\21\7\0\1\76"+
    "\16\0\1\76\1\77\53\0\1\100\3\0\1\101\76\0"+
    "\1\102\1\0\1\103\1\104\102\0\1\105\1\106\101\0"+
    "\1\107\1\110\71\0\5\30\1\111\5\0\7\30\4\0"+
    "\31\30\24\0\5\30\1\111\5\0\5\30\1\112\1\30"+
    "\4\0\31\30\37\0\7\30\4\0\1\100\30\30\24\0"+
    "\5\30\1\111\5\0\7\30\4\0\2\30\1\113\1\114"+
    "\11\30\1\115\4\30\1\116\1\117\5\30\24\0\5\30"+
    "\1\111\5\0\7\30\4\0\24\30\1\120\4\30\24\0"+
    "\5\30\1\111\5\0\7\30\4\0\1\30\1\121\3\30"+
    "\1\122\2\30\1\123\5\30\1\124\12\30\24\0\5\30"+
    "\1\111\5\0\7\30\4\0\5\30\1\125\10\30\1\126"+
    "\12\30\24\0\5\30\1\111\5\0\7\30\4\0\15\30"+
    "\1\127\11\30\1\130\1\30\24\0\5\30\1\111\5\0"+
    "\7\30\4\0\3\30\1\131\2\30\1\132\2\30\1\133"+
    "\1\30\1\134\1\135\10\30\1\136\3\30\24\0\5\30"+
    "\1\111\5\0\7\30\4\0\2\30\1\137\4\30\1\140"+
    "\1\30\1\141\10\30\1\142\6\30\24\0\5\30\1\111"+
    "\5\0\7\30\4\0\14\30\1\143\1\144\13\30\24\0"+
    "\5\30\1\111\5\0\7\30\4\0\5\30\1\145\3\30"+
    "\1\146\4\30\1\147\12\30\24\0\5\30\1\111\5\0"+
    "\7\30\4\0\1\30\1\150\3\30\1\151\3\30\1\152"+
    "\17\30\24\0\5\30\1\111\5\0\7\30\4\0\5\30"+
    "\1\153\23\30\24\0\5\30\1\111\5\0\7\30\4\0"+
    "\24\30\1\154\4\30\24\0\5\30\1\111\5\0\7\30"+
    "\4\0\1\30\1\155\14\30\1\156\2\30\1\157\7\30"+
    "\24\0\5\30\1\111\5\0\7\30\4\0\24\30\1\160"+
    "\4\30\24\0\5\30\1\111\5\0\7\30\4\0\4\30"+
    "\1\161\1\162\3\30\1\163\4\30\1\164\7\30\1\165"+
    "\2\30\24\0\5\30\1\111\5\0\7\30\4\0\5\30"+
    "\1\166\3\30\1\167\4\30\1\170\1\30\1\171\3\30"+
    "\1\172\4\30\24\0\5\30\1\111\5\0\7\30\4\0"+
    "\1\30\1\173\5\30\1\174\21\30\24\0\5\30\1\111"+
    "\5\0\7\30\4\0\2\30\1\175\4\30\1\176\12\30"+
    "\1\177\6\30\24\0\5\30\1\111\5\0\7\30\4\0"+
    "\1\30\1\200\6\30\1\201\1\202\17\30\24\0\5\30"+
    "\1\111\5\0\7\30\4\0\16\30\1\203\12\30\24\0"+
    "\5\73\7\0\1\76\16\0\1\76\1\77\26\0\12\74"+
    "\1\204\70\74\2\75\1\0\100\75\13\0\1\205\1\0"+
    "\1\205\2\0\5\206\103\0\1\100\75\0\5\30\1\111"+
    "\5\0\1\30\1\207\5\30\4\0\31\30\24\0\5\30"+
    "\1\111\5\0\7\30\4\0\22\30\1\210\6\30\24\0"+
    "\5\30\1\111\5\0\7\30\4\0\16\30\1\211\12\30"+
    "\24\0\5\30\1\111\5\0\7\30\4\0\30\30\1\212"+
    "\24\0\5\30\1\111\5\0\7\30\4\0\11\30\1\213"+
    "\10\30\1\214\6\30\24\0\5\30\1\111\5\0\7\30"+
    "\4\0\1\30\1\215\21\30\1\216\5\30\24\0\5\30"+
    "\1\111\5\0\7\30\4\0\23\30\1\217\5\30\24\0"+
    "\5\30\1\111\5\0\7\30\4\0\22\30\1\220\6\30"+
    "\24\0\5\30\1\111\5\0\7\30\4\0\11\30\1\221"+
    "\17\30\24\0\5\30\1\111\5\0\7\30\4\0\5\30"+
    "\1\222\23\30\24\0\5\30\1\111\5\0\7\30\4\0"+
    "\14\30\1\223\1\224\4\30\1\225\6\30\24\0\5\30"+
    "\1\111\5\0\7\30\4\0\3\30\1\226\25\30\24\0"+
    "\5\30\1\111\5\0\7\30\4\0\24\30\1\227\4\30"+
    "\24\0\5\30\1\111\5\0\7\30\4\0\1\30\1\230"+
    "\23\30\1\231\3\30\24\0\5\30\1\111\5\0\7\30"+
    "\4\0\17\30\1\232\11\30\24\0\5\30\1\111\5\0"+
    "\7\30\4\0\16\30\1\233\12\30\24\0\5\30\1\111"+
    "\5\0\7\30\4\0\24\30\1\234\4\30\24\0\5\30"+
    "\1\111\5\0\7\30\4\0\27\30\1\235\1\30\24\0"+
    "\5\30\1\111\5\0\7\30\4\0\16\30\1\236\12\30"+
    "\24\0\5\30\1\111\5\0\7\30\4\0\16\30\1\237"+
    "\12\30\24\0\5\30\1\111\5\0\7\30\4\0\1\30"+
    "\1\240\27\30\24\0\5\30\1\111\5\0\7\30\4\0"+
    "\1\30\1\241\27\30\24\0\5\30\1\111\5\0\7\30"+
    "\4\0\21\30\1\242\7\30\24\0\5\30\1\111\5\0"+
    "\7\30\4\0\7\30\1\243\21\30\24\0\5\30\1\111"+
    "\5\0\7\30\4\0\13\30\1\244\15\30\24\0\5\30"+
    "\1\111\5\0\7\30\4\0\17\30\1\245\11\30\24\0"+
    "\5\30\1\111\5\0\7\30\4\0\17\30\1\246\3\30"+
    "\1\247\5\30\24\0\5\30\1\111\5\0\7\30\4\0"+
    "\23\30\1\250\5\30\24\0\5\30\1\111\5\0\7\30"+
    "\4\0\2\30\1\251\26\30\24\0\5\30\1\111\5\0"+
    "\7\30\4\0\7\30\1\252\16\30\1\253\2\30\24\0"+
    "\5\30\1\111\5\0\7\30\4\0\27\30\1\254\1\30"+
    "\24\0\5\30\1\111\5\0\7\30\4\0\14\30\1\255"+
    "\14\30\24\0\5\30\1\111\5\0\7\30\4\0\15\30"+
    "\1\256\13\30\24\0\5\30\1\111\5\0\7\30\4\0"+
    "\15\30\1\257\13\30\24\0\5\30\1\111\5\0\7\30"+
    "\4\0\23\30\1\260\5\30\24\0\5\30\1\111\5\0"+
    "\7\30\4\0\21\30\1\261\7\30\24\0\5\30\1\111"+
    "\5\0\7\30\4\0\26\30\1\262\2\30\24\0\5\30"+
    "\1\111\5\0\7\30\4\0\5\30\1\263\10\30\1\264"+
    "\12\30\24\0\5\30\1\111\5\0\7\30\4\0\1\30"+
    "\1\265\27\30\24\0\5\30\1\111\5\0\7\30\4\0"+
    "\23\30\1\266\5\30\24\0\5\30\1\111\5\0\7\30"+
    "\4\0\14\30\1\267\14\30\24\0\5\30\1\111\5\0"+
    "\7\30\4\0\15\30\1\270\13\30\24\0\5\30\1\111"+
    "\5\0\7\30\4\0\24\30\1\271\4\30\24\0\5\30"+
    "\1\111\5\0\7\30\4\0\23\30\1\272\5\30\24\0"+
    "\5\30\1\111\5\0\7\30\4\0\13\30\1\273\4\30"+
    "\1\274\10\30\24\0\5\30\1\111\5\0\7\30\4\0"+
    "\15\30\1\275\13\30\24\0\5\30\1\111\5\0\7\30"+
    "\4\0\24\30\1\276\4\30\24\0\5\30\1\111\5\0"+
    "\7\30\4\0\21\30\1\277\7\30\24\0\5\30\1\111"+
    "\5\0\7\30\4\0\14\30\1\300\14\30\24\0\5\30"+
    "\1\111\5\0\7\30\4\0\15\30\1\301\13\30\24\0"+
    "\5\30\1\111\5\0\7\30\4\0\21\30\1\302\7\30"+
    "\24\0\5\30\1\111\5\0\7\30\4\0\1\30\1\303"+
    "\27\30\24\0\5\30\1\111\5\0\7\30\4\0\21\30"+
    "\1\304\7\30\24\0\5\30\1\111\5\0\7\30\4\0"+
    "\13\30\1\305\15\30\24\0\5\30\1\111\5\0\7\30"+
    "\4\0\25\30\1\306\3\30\24\0\5\30\1\111\5\0"+
    "\7\30\4\0\5\30\1\307\23\30\24\0\5\30\1\111"+
    "\5\0\7\30\4\0\23\30\1\310\5\30\24\0\5\30"+
    "\1\111\5\0\7\30\4\0\21\30\1\311\7\30\4\0"+
    "\12\74\1\204\4\74\1\312\63\74\20\0\5\206\76\0"+
    "\5\206\27\0\1\77\46\0\5\30\1\111\5\0\2\30"+
    "\1\313\4\30\4\0\31\30\24\0\5\30\1\111\5\0"+
    "\7\30\4\0\22\30\1\314\6\30\24\0\5\30\1\111"+
    "\5\0\7\30\4\0\15\30\1\315\13\30\24\0\5\30"+
    "\1\111\5\0\7\30\4\0\5\30\1\316\23\30\24\0"+
    "\5\30\1\111\5\0\7\30\4\0\15\30\1\317\13\30"+
    "\24\0\5\30\1\111\5\0\7\30\4\0\1\30\1\320"+
    "\27\30\24\0\5\30\1\111\5\0\7\30\4\0\23\30"+
    "\1\321\5\30\24\0\5\30\1\111\5\0\7\30\4\0"+
    "\5\30\1\322\23\30\24\0\5\30\1\111\5\0\7\30"+
    "\4\0\13\30\1\323\15\30\24\0\5\30\1\111\5\0"+
    "\7\30\4\0\3\30\1\324\25\30\24\0\5\30\1\111"+
    "\5\0\7\30\4\0\17\30\1\325\11\30\24\0\5\30"+
    "\1\111\5\0\7\30\4\0\23\30\1\326\5\30\24\0"+
    "\5\30\1\111\5\0\7\30\4\0\13\30\1\327\15\30"+
    "\24\0\5\30\1\111\5\0\7\30\4\0\2\30\1\330"+
    "\26\30\24\0\5\30\1\111\5\0\7\30\4\0\2\30"+
    "\1\331\26\30\24\0\5\30\1\111\5\0\7\30\4\0"+
    "\11\30\1\332\17\30\24\0\5\30\1\111\5\0\7\30"+
    "\4\0\15\30\1\333\13\30\24\0\5\30\1\111\5\0"+
    "\7\30\4\0\15\30\1\334\13\30\24\0\5\30\1\111"+
    "\5\0\7\30\4\0\5\30\1\335\23\30\24\0\5\30"+
    "\1\111\5\0\7\30\4\0\1\30\1\336\14\30\1\337"+
    "\12\30\24\0\5\30\1\111\5\0\7\30\4\0\4\30"+
    "\1\340\24\30\24\0\5\30\1\111\5\0\7\30\4\0"+
    "\21\30\1\341\7\30\24\0\5\30\1\111\5\0\7\30"+
    "\4\0\21\30\1\342\7\30\24\0\5\30\1\111\5\0"+
    "\7\30\4\0\16\30\1\343\12\30\24\0\5\30\1\111"+
    "\5\0\7\30\4\0\10\30\1\344\20\30\24\0\5\30"+
    "\1\111\5\0\7\30\4\0\11\30\1\345\17\30\24\0"+
    "\5\30\1\111\5\0\7\30\4\0\16\30\1\346\12\30"+
    "\24\0\5\30\1\111\5\0\7\30\4\0\24\30\1\347"+
    "\4\30\24\0\5\30\1\111\5\0\7\30\4\0\21\30"+
    "\1\350\7\30\24\0\5\30\1\111\5\0\7\30\4\0"+
    "\21\30\1\351\7\30\24\0\1\30\1\352\3\30\1\111"+
    "\5\0\7\30\4\0\31\30\24\0\5\30\1\111\5\0"+
    "\7\30\4\0\5\30\1\353\23\30\24\0\5\30\1\111"+
    "\5\0\7\30\4\0\17\30\1\354\11\30\24\0\5\30"+
    "\1\111\5\0\7\30\4\0\23\30\1\355\5\30\24\0"+
    "\5\30\1\111\5\0\7\30\4\0\17\30\1\356\11\30"+
    "\24\0\5\30\1\111\5\0\7\30\4\0\6\30\1\357"+
    "\22\30\24\0\5\30\1\111\5\0\7\30\4\0\4\30"+
    "\1\360\24\30\24\0\5\30\1\111\5\0\7\30\4\0"+
    "\4\30\1\361\24\30\24\0\5\30\1\111\5\0\7\30"+
    "\4\0\1\30\1\362\27\30\24\0\5\30\1\111\5\0"+
    "\7\30\4\0\1\30\1\363\27\30\24\0\5\30\1\111"+
    "\5\0\7\30\4\0\23\30\1\364\5\30\24\0\5\30"+
    "\1\111\5\0\7\30\4\0\15\30\1\365\5\30\1\366"+
    "\5\30\24\0\5\30\1\111\5\0\7\30\4\0\1\30"+
    "\1\367\27\30\24\0\5\30\1\111\5\0\7\30\4\0"+
    "\5\30\1\370\23\30\24\0\5\30\1\111\5\0\7\30"+
    "\4\0\7\30\1\371\21\30\24\0\5\30\1\111\5\0"+
    "\7\30\4\0\15\30\1\372\13\30\24\0\5\30\1\111"+
    "\5\0\7\30\4\0\23\30\1\373\5\30\24\0\5\30"+
    "\1\111\5\0\7\30\4\0\16\30\1\374\12\30\24\0"+
    "\5\30\1\111\5\0\7\30\4\0\21\30\1\375\7\30"+
    "\24\0\5\30\1\111\5\0\7\30\4\0\16\30\1\376"+
    "\12\30\24\0\5\30\1\111\5\0\7\30\4\0\11\30"+
    "\1\377\17\30\24\0\5\30\1\111\5\0\7\30\4\0"+
    "\5\30\1\u0100\23\30\24\0\5\30\1\111\5\0\7\30"+
    "\4\0\21\30\1\u0101\7\30\24\0\5\30\1\111\5\0"+
    "\7\30\4\0\10\30\1\u0102\20\30\24\0\5\30\1\111"+
    "\5\0\3\30\1\u0103\3\30\4\0\31\30\24\0\5\30"+
    "\1\111\5\0\7\30\4\0\21\30\1\u0104\7\30\24\0"+
    "\2\30\1\u0105\2\30\1\111\5\0\7\30\4\0\31\30"+
    "\24\0\5\30\1\111\5\0\7\30\4\0\3\30\1\u0106"+
    "\25\30\24\0\5\30\1\111\5\0\7\30\4\0\16\30"+
    "\1\u0107\12\30\24\0\5\30\1\111\5\0\7\30\4\0"+
    "\12\30\1\u0108\16\30\24\0\5\30\1\111\5\0\7\30"+
    "\4\0\16\30\1\u0109\12\30\24\0\5\30\1\111\5\0"+
    "\7\30\4\0\21\30\1\u010a\7\30\24\0\5\30\1\111"+
    "\5\0\7\30\4\0\1\30\1\u010b\27\30\24\0\5\30"+
    "\1\111\5\0\7\30\4\0\13\30\1\u010c\15\30\24\0"+
    "\5\30\1\111\5\0\7\30\4\0\13\30\1\u010d\15\30"+
    "\24\0\5\30\1\111\5\0\7\30\4\0\21\30\1\u010e"+
    "\7\30\24\0\5\30\1\111\5\0\7\30\4\0\22\30"+
    "\1\u010f\6\30\24\0\5\30\1\111\5\0\7\30\4\0"+
    "\3\30\1\u0110\25\30\24\0\5\30\1\111\5\0\7\30"+
    "\4\0\4\30\1\u0111\24\30\24\0\5\30\1\111\5\0"+
    "\7\30\4\0\23\30\1\u0112\5\30\24\0\5\30\1\111"+
    "\5\0\7\30\4\0\21\30\1\u0113\7\30\24\0\5\30"+
    "\1\111\5\0\7\30\4\0\11\30\1\u0114\17\30\24\0"+
    "\5\30\1\111\5\0\7\30\4\0\7\30\1\u0115\21\30"+
    "\24\0\5\30\1\111\5\0\7\30\4\0\24\30\1\u0116"+
    "\4\30\24\0\5\30\1\111\5\0\7\30\4\0\5\30"+
    "\1\u0117\23\30\24\0\5\30\1\111\5\0\7\30\4\0"+
    "\4\30\1\u0118\24\30\24\0\5\30\1\111\5\0\7\30"+
    "\4\0\21\30\1\u0119\7\30\24\0\5\30\1\111\5\0"+
    "\7\30\4\0\23\30\1\u011a\5\30\24\0\5\30\1\111"+
    "\5\0\7\30\4\0\5\30\1\u011b\23\30\24\0\5\30"+
    "\1\111\5\0\7\30\4\0\1\30\1\u011c\27\30\24\0"+
    "\1\u011d\4\30\1\111\5\0\7\30\4\0\31\30\24\0"+
    "\5\30\1\111\5\0\7\30\4\0\22\30\1\u011e\6\30"+
    "\24\0\5\30\1\111\5\0\7\30\4\0\24\30\1\u011f"+
    "\4\30\24\0\5\30\1\111\5\0\7\30\4\0\21\30"+
    "\1\u0120\7\30\24\0\5\30\1\111\5\0\7\30\4\0"+
    "\24\30\1\u0121\4\30\24\0\5\30\1\111\5\0\7\30"+
    "\4\0\11\30\1\u0122\17\30\24\0\5\30\1\111\5\0"+
    "\7\30\4\0\17\30\1\u0123\11\30\24\0\5\30\1\111"+
    "\5\0\7\30\4\0\2\30\1\u0124\26\30\24\0\5\30"+
    "\1\111\5\0\7\30\4\0\11\30\1\u0125\17\30\24\0"+
    "\5\30\1\111\5\0\7\30\4\0\4\30\1\u0126\24\30"+
    "\24\0\5\30\1\111\5\0\7\30\4\0\5\30\1\u0127"+
    "\23\30\24\0\5\30\1\111\5\0\7\30\4\0\2\30"+
    "\1\u0128\26\30\24\0\5\30\1\111\5\0\7\30\4\0"+
    "\3\30\1\u0129\25\30\24\0\5\30\1\111\5\0\7\30"+
    "\4\0\13\30\1\u012a\15\30\24\0\5\30\1\111\5\0"+
    "\7\30\4\0\4\30\1\u012b\24\30\24\0\5\30\1\111"+
    "\5\0\7\30\4\0\24\30\1\u012c\4\30\24\0\5\30"+
    "\1\111\5\0\7\30\4\0\7\30\1\u012d\21\30\24\0"+
    "\5\30\1\111\5\0\7\30\4\0\24\30\1\u012e\4\30"+
    "\24\0\5\30\1\111\5\0\7\30\4\0\4\30\1\u012f"+
    "\24\30\24\0\5\30\1\111\5\0\7\30\4\0\6\30"+
    "\1\u0130\22\30\24\0\5\30\1\111\5\0\7\30\4\0"+
    "\5\30\1\u0131\23\30\24\0\5\30\1\111\5\0\6\30"+
    "\1\u0132\4\0\31\30\24\0\5\30\1\111\5\0\7\30"+
    "\4\0\23\30\1\u0133\5\30\24\0\5\30\1\111\5\0"+
    "\7\30\4\0\10\30\1\u0134\20\30\24\0\5\30\1\111"+
    "\5\0\7\30\4\0\15\30\1\u0135\13\30\24\0\5\30"+
    "\1\111\5\0\7\30\4\0\2\30\1\u0136\26\30\24\0"+
    "\5\30\1\111\5\0\7\30\4\0\15\30\1\u0137\13\30"+
    "\24\0\5\30\1\111\5\0\7\30\4\0\16\30\1\u0138"+
    "\12\30\24\0\5\30\1\111\5\0\7\30\4\0\21\30"+
    "\1\u0139\7\30\24\0\5\30\1\111\5\0\7\30\4\0"+
    "\5\30\1\u013a\23\30\24\0\5\30\1\111\5\0\7\30"+
    "\4\0\5\30\1\u013b\23\30\24\0\5\30\1\111\5\0"+
    "\7\30\4\0\16\30\1\u013c\12\30\24\0\5\30\1\111"+
    "\5\0\7\30\4\0\23\30\1\u013d\5\30\24\0\5\30"+
    "\1\111\5\0\7\30\4\0\23\30\1\u013e\5\30\24\0"+
    "\5\30\1\111\5\0\7\30\4\0\17\30\1\u013f\11\30"+
    "\24\0\5\30\1\111\5\0\7\30\4\0\1\30\1\u0140"+
    "\27\30\24\0\5\30\1\111\5\0\7\30\4\0\21\30"+
    "\1\u0141\7\30\24\0\5\30\1\111\5\0\7\30\4\0"+
    "\17\30\1\u0142\11\30\24\0\5\30\1\111\5\0\7\30"+
    "\4\0\22\30\1\u0143\6\30\24\0\5\30\1\111\5\0"+
    "\7\30\4\0\5\30\1\u0144\23\30\24\0\5\30\1\111"+
    "\5\0\7\30\4\0\23\30\1\u0145\5\30\24\0\5\30"+
    "\1\111\5\0\7\30\4\0\22\30\1\u0146\6\30\24\0"+
    "\5\30\1\111\5\0\7\30\4\0\3\30\1\u0147\25\30"+
    "\24\0\5\30\1\111\5\0\7\30\4\0\21\30\1\u0148"+
    "\7\30\24\0\5\30\1\111\5\0\7\30\4\0\23\30"+
    "\1\u0149\5\30\24\0\5\30\1\111\5\0\7\30\4\0"+
    "\23\30\1\u014a\5\30\24\0\5\30\1\111\5\0\7\30"+
    "\4\0\30\30\1\u014b\24\0\5\30\1\111\5\0\7\30"+
    "\4\0\23\30\1\u014c\5\30\24\0\5\30\1\111\5\0"+
    "\7\30\4\0\27\30\1\u014d\1\30\24\0\5\30\1\111"+
    "\5\0\7\30\4\0\21\30\1\u014e\7\30\24\0\5\30"+
    "\1\111\5\0\7\30\4\0\13\30\1\u014f\15\30\24\0"+
    "\5\30\1\111\5\0\7\30\4\0\15\30\1\u0150\13\30"+
    "\24\0\5\30\1\111\5\0\7\30\4\0\13\30\1\u0151"+
    "\15\30\24\0\5\30\1\111\5\0\7\30\4\0\23\30"+
    "\1\u0152\5\30\24\0\5\30\1\111\5\0\7\30\4\0"+
    "\5\30\1\u0153\23\30\24\0\5\30\1\111\5\0\7\30"+
    "\4\0\6\30\1\u0154\22\30\24\0\5\30\1\111\5\0"+
    "\7\30\4\0\17\30\1\u0155\11\30\24\0\5\30\1\111"+
    "\5\0\7\30\4\0\21\30\1\u0156\7\30\24\0\5\30"+
    "\1\111\5\0\7\30\4\0\17\30\1\u0157\11\30\24\0"+
    "\5\30\1\111\5\0\7\30\4\0\5\30\1\u0158\23\30"+
    "\24\0\5\30\1\111\5\0\7\30\4\0\16\30\1\u0159"+
    "\12\30\24\0\5\30\1\111\5\0\7\30\4\0\2\30"+
    "\1\u015a\26\30\24\0\5\30\1\111\5\0\7\30\4\0"+
    "\16\30\1\u015b\12\30\24\0\5\30\1\111\5\0\7\30"+
    "\4\0\5\30\1\u015c\23\30\24\0\5\30\1\111\5\0"+
    "\7\30\4\0\13\30\1\u015d\15\30\24\0\5\30\1\111"+
    "\5\0\7\30\4\0\5\30\1\u015e\23\30\24\0\5\30"+
    "\1\111\5\0\7\30\4\0\17\30\1\u015f\11\30\24\0"+
    "\5\30\1\111\5\0\7\30\4\0\15\30\1\u0160\13\30"+
    "\24\0\5\30\1\111\5\0\7\30\4\0\1\30\1\u0161"+
    "\27\30\24\0\5\30\1\111\5\0\7\30\4\0\11\30"+
    "\1\u0162\17\30\24\0\5\30\1\111\5\0\7\30\4\0"+
    "\16\30\1\u0163\12\30\24\0\5\30\1\111\5\0\7\30"+
    "\4\0\2\30\1\u0164\26\30\24\0\5\30\1\111\5\0"+
    "\7\30\4\0\1\30\1\u0165\27\30\24\0\5\30\1\111"+
    "\5\0\7\30\4\0\23\30\1\u0166\5\30\24\0\5\30"+
    "\1\111\5\0\7\30\4\0\21\30\1\u0167\7\30\24\0"+
    "\5\30\1\111\5\0\7\30\4\0\30\30\1\u0168\24\0"+
    "\5\30\1\111\5\0\7\30\4\0\22\30\1\u0169\6\30"+
    "\24\0\5\30\1\111\5\0\7\30\4\0\5\30\1\u016a"+
    "\23\30\24\0\5\30\1\111\5\0\7\30\4\0\5\30"+
    "\1\u016b\23\30\24\0\5\30\1\111\5\0\7\30\4\0"+
    "\4\30\1\u016c\24\30\24\0\5\30\1\111\5\0\7\30"+
    "\4\0\5\30\1\u016d\23\30\24\0\2\30\1\u016e\1\u016f"+
    "\1\30\1\111\5\0\7\30\4\0\31\30\24\0\5\30"+
    "\1\111\5\0\7\30\4\0\17\30\1\u0170\11\30\24\0"+
    "\5\30\1\111\5\0\7\30\4\0\11\30\1\u0171\17\30"+
    "\24\0\5\30\1\111\5\0\7\30\4\0\1\30\1\u0172"+
    "\27\30\24\0\5\30\1\111\5\0\7\30\4\0\21\30"+
    "\1\u0173\7\30\24\0\5\30\1\111\5\0\7\30\4\0"+
    "\21\30\1\u0174\7\30\24\0\5\30\1\111\5\0\7\30"+
    "\4\0\16\30\1\u0175\12\30\24\0\5\30\1\111\5\0"+
    "\7\30\4\0\27\30\1\u0176\1\30\24\0\5\30\1\111"+
    "\5\0\7\30\4\0\15\30\1\u0177\13\30\24\0\5\30"+
    "\1\111\5\0\7\30\4\0\21\30\1\u0178\7\30\24\0"+
    "\5\30\1\111\5\0\7\30\4\0\14\30\1\u0179\14\30"+
    "\24\0\5\30\1\111\5\0\7\30\4\0\15\30\1\u017a"+
    "\13\30\24\0\5\30\1\111\5\0\7\30\4\0\16\30"+
    "\1\u017b\12\30\24\0\5\30\1\111\5\0\7\30\4\0"+
    "\11\30\1\u017c\17\30\24\0\5\30\1\111\5\0\7\30"+
    "\4\0\13\30\1\u017d\15\30\24\0\5\30\1\111\5\0"+
    "\7\30\4\0\17\30\1\u017e\11\30\24\0\5\30\1\111"+
    "\5\0\7\30\4\0\3\30\1\u017f\25\30\24\0\5\30"+
    "\1\111\5\0\7\30\4\0\5\30\1\u0180\23\30\24\0"+
    "\5\30\1\111\5\0\7\30\4\0\21\30\1\u0181\7\30"+
    "\24\0\5\30\1\111\5\0\7\30\4\0\13\30\1\u0182"+
    "\15\30\24\0\5\30\1\111\5\0\7\30\4\0\17\30"+
    "\1\u0183\11\30\24\0\5\30\1\111\5\0\7\30\4\0"+
    "\14\30\1\u0184\14\30\24\0\5\30\1\111\5\0\7\30"+
    "\4\0\24\30\1\u0185\4\30\24\0\5\30\1\111\5\0"+
    "\7\30\4\0\23\30\1\u0186\5\30\24\0\5\30\1\111"+
    "\5\0\7\30\4\0\5\30\1\u0187\23\30\24\0\5\30"+
    "\1\111\5\0\7\30\4\0\5\30\1\u0188\23\30\24\0"+
    "\5\30\1\111\5\0\7\30\4\0\23\30\1\u0189\5\30"+
    "\24\0\5\30\1\111\5\0\7\30\4\0\15\30\1\u018a"+
    "\13\30\24\0\5\30\1\111\5\0\7\30\4\0\15\30"+
    "\1\u018b\13\30\24\0\5\30\1\111\5\0\7\30\4\0"+
    "\5\30\1\u018c\23\30\24\0\5\30\1\111\5\0\7\30"+
    "\4\0\10\30\1\u018d\20\30\24\0\5\30\1\111\5\0"+
    "\7\30\4\0\11\30\1\u018e\17\30\24\0\5\30\1\111"+
    "\5\0\7\30\4\0\21\30\1\u018f\7\30\24\0\5\30"+
    "\1\111\5\0\7\30\4\0\5\30\1\u0190\23\30\24\0"+
    "\5\30\1\111\5\0\7\30\4\0\5\30\1\u0191\23\30"+
    "\24\0\5\30\1\111\5\0\7\30\4\0\10\30\1\u0192"+
    "\20\30\24\0\5\30\1\111\5\0\7\30\4\0\15\30"+
    "\1\u0193\13\30\24\0\5\30\1\111\5\0\7\30\4\0"+
    "\3\30\1\u0194\25\30\24\0\5\30\1\111\5\0\7\30"+
    "\4\0\15\30\1\u0195\13\30\24\0\5\30\1\111\5\0"+
    "\7\30\4\0\23\30\1\u0196\5\30\24\0\5\30\1\111"+
    "\5\0\7\30\4\0\22\30\1\u0197\6\30\24\0\5\30"+
    "\1\111\5\0\7\30\4\0\3\30\1\u0198\25\30\24\0"+
    "\5\30\1\111\5\0\7\30\4\0\4\30\1\u0199\24\30"+
    "\24\0\5\30\1\111\5\0\7\30\4\0\11\30\1\u019a"+
    "\17\30\24\0\5\30\1\111\5\0\7\30\4\0\23\30"+
    "\1\u019b\5\30\24\0\5\30\1\111\5\0\7\30\4\0"+
    "\17\30\1\u019c\11\30\24\0\5\30\1\111\5\0\7\30"+
    "\4\0\11\30\1\u019d\17\30\24\0\5\30\1\111\5\0"+
    "\7\30\4\0\11\30\1\u019e\17\30\24\0\5\30\1\111"+
    "\5\0\7\30\4\0\22\30\1\u019f\6\30\24\0\5\30"+
    "\1\111\5\0\7\30\4\0\22\30\1\u01a0\6\30\24\0"+
    "\5\30\1\111\5\0\7\30\4\0\21\30\1\u01a1\7\30"+
    "\24\0\5\30\1\111\5\0\7\30\4\0\16\30\1\u01a2"+
    "\12\30\24\0\5\30\1\111\5\0\7\30\4\0\22\30"+
    "\1\u01a3\6\30\24\0\5\30\1\111\5\0\7\30\4\0"+
    "\11\30\1\u01a4\17\30\24\0\5\30\1\111\5\0\7\30"+
    "\4\0\5\30\1\u01a5\23\30\24\0\5\30\1\111\5\0"+
    "\7\30\4\0\15\30\1\u01a6\13\30\24\0\5\30\1\111"+
    "\5\0\7\30\4\0\11\30\1\u01a7\17\30\24\0\5\30"+
    "\1\111\5\0\7\30\4\0\16\30\1\u01a8\12\30\24\0"+
    "\5\30\1\111\5\0\7\30\4\0\3\30\1\u01a9\25\30"+
    "\24\0\5\30\1\111\5\0\7\30\4\0\16\30\1\u01aa"+
    "\12\30\24\0\5\30\1\111\5\0\7\30\4\0\15\30"+
    "\1\u01ab\13\30\24\0\5\30\1\111\5\0\7\30\4\0"+
    "\11\30\1\u01ac\17\30\24\0\5\30\1\111\5\0\7\30"+
    "\4\0\15\30\1\u01ad\13\30\24\0\5\30\1\111\5\0"+
    "\7\30\4\0\22\30\1\u01ae\6\30\24\0\5\30\1\111"+
    "\5\0\7\30\4\0\11\30\1\u01af\17\30\24\0\5\30"+
    "\1\111\5\0\7\30\4\0\16\30\1\u01b0\12\30\24\0"+
    "\5\30\1\111\5\0\7\30\4\0\15\30\1\u01b1\13\30"+
    "\4\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[22110];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\3\1\10\11\5\1\1\11\3\1\1\11"+
    "\2\1\4\11\25\1\5\11\1\0\2\11\3\1\1\0"+
    "\1\11\1\0\10\11\1\0\72\1\2\0\104\1\1\11"+
    "\347\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[433];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
  public _FaustLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _FaustLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return BAD_CHARACTER;
            }
          // fall through
          case 119: break;
          case 2:
            { return WHITE_SPACE;
            }
          // fall through
          case 120: break;
          case 3:
            { return CUT;
            }
          // fall through
          case 121: break;
          case 4:
            { return MOD;
            }
          // fall through
          case 122: break;
          case 5:
            { return AND;
            }
          // fall through
          case 123: break;
          case 6:
            { return DELAY1;
            }
          // fall through
          case 124: break;
          case 7:
            { return LPAREN;
            }
          // fall through
          case 125: break;
          case 8:
            { return RPAREN;
            }
          // fall through
          case 126: break;
          case 9:
            { return MUL;
            }
          // fall through
          case 127: break;
          case 10:
            { return ADD;
            }
          // fall through
          case 128: break;
          case 11:
            { return PAR;
            }
          // fall through
          case 129: break;
          case 12:
            { return SUB;
            }
          // fall through
          case 130: break;
          case 13:
            { return DOT;
            }
          // fall through
          case 131: break;
          case 14:
            { return DIV;
            }
          // fall through
          case 132: break;
          case 15:
            { return NUMBER;
            }
          // fall through
          case 133: break;
          case 16:
            { return SEQ;
            }
          // fall through
          case 134: break;
          case 17:
            { return ENDDEF;
            }
          // fall through
          case 135: break;
          case 18:
            { return LT;
            }
          // fall through
          case 136: break;
          case 19:
            { return DEF;
            }
          // fall through
          case 137: break;
          case 20:
            { return GT;
            }
          // fall through
          case 138: break;
          case 21:
            { return DELAY;
            }
          // fall through
          case 139: break;
          case 22:
            { return IDENTIFIER;
            }
          // fall through
          case 140: break;
          case 23:
            { return LBRACK;
            }
          // fall through
          case 141: break;
          case 24:
            { return LAMBDA;
            }
          // fall through
          case 142: break;
          case 25:
            { return RBRACK;
            }
          // fall through
          case 143: break;
          case 26:
            { return POWOP;
            }
          // fall through
          case 144: break;
          case 27:
            { return WIRE;
            }
          // fall through
          case 145: break;
          case 28:
            { return LBRACE;
            }
          // fall through
          case 146: break;
          case 29:
            { return OR;
            }
          // fall through
          case 147: break;
          case 30:
            { return RBRACE;
            }
          // fall through
          case 148: break;
          case 31:
            { return REC;
            }
          // fall through
          case 149: break;
          case 32:
            { return NE;
            }
          // fall through
          case 150: break;
          case 33:
            { return STRING_LITERAL;
            }
          // fall through
          case 151: break;
          case 34:
            { return LAPPLY;
            }
          // fall through
          case 152: break;
          case 35:
            { return BLOCK_COMMENT;
            }
          // fall through
          case 153: break;
          case 36:
            { return LINE_COMMENT;
            }
          // fall through
          case 154: break;
          case 37:
            { return MERGE;
            }
          // fall through
          case 155: break;
          case 38:
            { return SPLIT;
            }
          // fall through
          case 156: break;
          case 39:
            { return LSH;
            }
          // fall through
          case 157: break;
          case 40:
            { return LE;
            }
          // fall through
          case 158: break;
          case 41:
            { return EQ;
            }
          // fall through
          case 159: break;
          case 42:
            { return ARROW;
            }
          // fall through
          case 160: break;
          case 43:
            { return GE;
            }
          // fall through
          case 161: break;
          case 44:
            { return RSH;
            }
          // fall through
          case 162: break;
          case 45:
            { return ABS;
            }
          // fall through
          case 163: break;
          case 46:
            { return NOTYPECAST;
            }
          // fall through
          case 164: break;
          case 47:
            { return COS;
            }
          // fall through
          case 165: break;
          case 48:
            { return EXP;
            }
          // fall through
          case 166: break;
          case 49:
            { return INTCAST;
            }
          // fall through
          case 167: break;
          case 50:
            { return LOG;
            }
          // fall through
          case 168: break;
          case 51:
            { return MAX;
            }
          // fall through
          case 169: break;
          case 52:
            { return MEM;
            }
          // fall through
          case 170: break;
          case 53:
            { return MIN;
            }
          // fall through
          case 171: break;
          case 54:
            { return IPAR;
            }
          // fall through
          case 172: break;
          case 55:
            { return POWFUN;
            }
          // fall through
          case 173: break;
          case 56:
            { return ISEQ;
            }
          // fall through
          case 174: break;
          case 57:
            { return SIN;
            }
          // fall through
          case 175: break;
          case 58:
            { return ISUM;
            }
          // fall through
          case 176: break;
          case 59:
            { return TAN;
            }
          // fall through
          case 177: break;
          case 60:
            { return XOR;
            }
          // fall through
          case 178: break;
          case 61:
            { return ACOS;
            }
          // fall through
          case 179: break;
          case 62:
            { return ASIN;
            }
          // fall through
          case 180: break;
          case 63:
            { return ATAN;
            }
          // fall through
          case 181: break;
          case 64:
            { return CASE;
            }
          // fall through
          case 182: break;
          case 65:
            { return CEIL;
            }
          // fall through
          case 183: break;
          case 66:
            { return FMOD;
            }
          // fall through
          case 184: break;
          case 67:
            { return IPROD;
            }
          // fall through
          case 185: break;
          case 68:
            { return RINT;
            }
          // fall through
          case 186: break;
          case 69:
            { return SQRT;
            }
          // fall through
          case 187: break;
          case 70:
            { return WITH;
            }
          // fall through
          case 188: break;
          case 71:
            { return ATAN2;
            }
          // fall through
          case 189: break;
          case 72:
            { return FLOATCAST;
            }
          // fall through
          case 190: break;
          case 73:
            { return FLOOR;
            }
          // fall through
          case 191: break;
          case 74:
            { return LOG10;
            }
          // fall through
          case 192: break;
          case 75:
            { return ROUND;
            }
          // fall through
          case 193: break;
          case 76:
            { return ROUTE;
            }
          // fall through
          case 194: break;
          case 77:
            { return WHERE;
            }
          // fall through
          case 195: break;
          case 78:
            { return PREFIX;
            }
          // fall through
          case 196: break;
          case 79:
            { return ATTACH;
            }
          // fall through
          case 197: break;
          case 80:
            { return BUTTON;
            }
          // fall through
          case 198: break;
          case 81:
            { return ENABLE;
            }
          // fall through
          case 199: break;
          case 82:
            { return HGROUP;
            }
          // fall through
          case 200: break;
          case 83:
            { return IMPORT;
            }
          // fall through
          case 201: break;
          case 84:
            { return INS;
            }
          // fall through
          case 202: break;
          case 85:
            { return LETREC;
            }
          // fall through
          case 203: break;
          case 86:
            { return LOWEST;
            }
          // fall through
          case 204: break;
          case 87:
            { return MODULATE;
            }
          // fall through
          case 205: break;
          case 88:
            { return NENTRY;
            }
          // fall through
          case 206: break;
          case 89:
            { return PRFIX;
            }
          // fall through
          case 207: break;
          case 90:
            { return TGROUP;
            }
          // fall through
          case 208: break;
          case 91:
            { return VGROUP;
            }
          // fall through
          case 209: break;
          case 92:
            { return CONTROL;
            }
          // fall through
          case 210: break;
          case 93:
            { return DECLARE;
            }
          // fall through
          case 211: break;
          case 94:
            { return HIGHEST;
            }
          // fall through
          case 212: break;
          case 95:
            { return HSLIDER;
            }
          // fall through
          case 213: break;
          case 96:
            { return LIBRARY;
            }
          // fall through
          case 214: break;
          case 97:
            { return OUTS;
            }
          // fall through
          case 215: break;
          case 98:
            { return RDTBL;
            }
          // fall through
          case 216: break;
          case 99:
            { return RWTBL;
            }
          // fall through
          case 217: break;
          case 100:
            { return SELECT2;
            }
          // fall through
          case 218: break;
          case 101:
            { return SELECT3;
            }
          // fall through
          case 219: break;
          case 102:
            { return VSLIDER;
            }
          // fall through
          case 220: break;
          case 103:
            { return CHECKBOX;
            }
          // fall through
          case 221: break;
          case 104:
            { return WAVEFORM;
            }
          // fall through
          case 222: break;
          case 105:
            { return COMPONENT;
            }
          // fall through
          case 223: break;
          case 106:
            { return FCONSTANT;
            }
          // fall through
          case 224: break;
          case 107:
            { return FFUNCTION;
            }
          // fall through
          case 225: break;
          case 108:
            { return FVARIABLE;
            }
          // fall through
          case 226: break;
          case 109:
            { return HBARGRAPH;
            }
          // fall through
          case 227: break;
          case 110:
            { return REMAINDER;
            }
          // fall through
          case 228: break;
          case 111:
            { return SOUNDFILE;
            }
          // fall through
          case 229: break;
          case 112:
            { return VBARGRAPH;
            }
          // fall through
          case 230: break;
          case 113:
            { return ENVIRONMENT;
            }
          // fall through
          case 231: break;
          case 114:
            { return ASSERTBOUNDS;
            }
          // fall through
          case 232: break;
          case 115:
            { return QUADMODE;
            }
          // fall through
          case 233: break;
          case 116:
            { return DOUBLEMODE;
            }
          // fall through
          case 234: break;
          case 117:
            { return FLOATMODE;
            }
          // fall through
          case 235: break;
          case 118:
            { return FIXEDPOINTMODE;
            }
          // fall through
          case 236: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
