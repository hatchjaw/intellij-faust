// Generated by JFlex 1.9.2 http://jflex.de/  (tweaked for IntelliJ platform)
// source: src/main/grammar/_FaustLexer.flex

package com.github.hatchjaw.faust;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static com.github.hatchjaw.faust.psi.FaustTypes.*;


public class _FaustLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\37\u0100\1\u0200\267\u0100\10\u0300\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\2\3\1\4\22\0\1\1\1\5"+
    "\1\6\2\0\1\7\1\10\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\6\26\1\27\1\30\1\31\1\32\1\33\1\0"+
    "\1\34\4\35\1\36\1\37\2\35\1\40\6\35\1\41"+
    "\1\35\1\42\5\35\1\43\2\35\1\44\1\45\1\46"+
    "\1\47\1\50\1\51\1\52\1\53\1\54\1\55\1\56"+
    "\1\57\1\60\1\61\1\62\1\35\1\63\1\64\1\65"+
    "\1\66\1\67\1\70\1\71\1\72\1\73\1\74\1\75"+
    "\1\76\1\77\1\100\1\101\1\35\1\102\1\103\1\104"+
    "\1\105\6\0\1\3\u01a2\0\2\3\326\0\u0100\106";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1024];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\1\1\4\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\2\26"+
    "\1\27\1\30\1\31\1\32\1\33\24\26\1\34\1\35"+
    "\1\36\1\37\1\40\1\0\1\41\1\42\1\17\1\43"+
    "\1\44\1\0\1\17\1\0\1\45\1\46\1\47\1\50"+
    "\1\51\1\52\1\53\1\54\1\0\72\26\1\0\2\44"+
    "\1\0\1\17\1\26\1\55\1\26\1\56\12\26\1\57"+
    "\4\26\1\60\14\26\1\61\2\26\1\62\1\26\1\63"+
    "\1\64\1\65\2\26\1\66\1\67\11\26\1\70\1\71"+
    "\2\26\1\72\1\73\7\26\1\74\1\43\1\44\1\26"+
    "\1\75\1\76\1\26\1\77\2\26\1\100\1\101\14\26"+
    "\1\102\17\26\1\103\3\26\1\104\6\26\1\105\6\26"+
    "\1\106\1\44\1\0\2\26\1\107\14\26\1\110\1\111"+
    "\11\26\1\112\10\26\1\113\1\114\11\26\1\115\1\44"+
    "\1\0\1\116\1\26\1\117\1\120\5\26\1\121\6\26"+
    "\1\122\2\26\1\123\1\124\1\125\1\26\1\126\1\127"+
    "\1\130\1\26\1\131\7\26\1\132\1\26\1\133\2\26"+
    "\1\44\1\0\3\26\1\134\1\135\7\26\1\136\1\137"+
    "\1\140\1\141\1\26\1\142\1\26\1\143\1\144\1\145"+
    "\3\26\1\146\1\26\1\0\1\26\1\147\15\26\1\150"+
    "\1\0\1\26\1\151\2\26\1\152\1\153\1\26\1\154"+
    "\1\155\1\26\1\156\1\26\1\157\1\160\1\0\6\26"+
    "\2\0\2\26\1\161\3\26\3\162\1\163\6\26\1\164"+
    "\4\26\1\165\1\26\1\166\3\26\1\167";

  private static int [] zzUnpackAction() {
    int [] result = new int[450];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\107\0\216\0\325\0\u011c\0\107\0\107\0\107"+
    "\0\107\0\107\0\107\0\107\0\107\0\u0163\0\u01aa\0\u01f1"+
    "\0\u0238\0\u027f\0\107\0\u02c6\0\u030d\0\u0354\0\107\0\u039b"+
    "\0\u03e2\0\107\0\107\0\107\0\107\0\u0429\0\u0470\0\u04b7"+
    "\0\u04fe\0\u0545\0\u058c\0\u05d3\0\u061a\0\u0661\0\u06a8\0\u06ef"+
    "\0\u0736\0\u077d\0\u07c4\0\u080b\0\u0852\0\u0899\0\u08e0\0\u0927"+
    "\0\u096e\0\u09b5\0\107\0\107\0\107\0\107\0\107\0\u011c"+
    "\0\107\0\107\0\u09fc\0\u0a43\0\u0a8a\0\u0ad1\0\107\0\u0429"+
    "\0\107\0\107\0\107\0\107\0\107\0\107\0\107\0\107"+
    "\0\u0b18\0\u0b5f\0\u0ba6\0\u0bed\0\u0c34\0\u0c7b\0\u0cc2\0\u0d09"+
    "\0\u0d50\0\u0d97\0\u0dde\0\u0e25\0\u0e6c\0\u0eb3\0\u0efa\0\u0f41"+
    "\0\u0f88\0\u0fcf\0\u1016\0\u105d\0\u10a4\0\u10eb\0\u1132\0\u1179"+
    "\0\u11c0\0\u1207\0\u124e\0\u1295\0\u12dc\0\u1323\0\u136a\0\u13b1"+
    "\0\u13f8\0\u143f\0\u1486\0\u14cd\0\u1514\0\u155b\0\u15a2\0\u15e9"+
    "\0\u1630\0\u1677\0\u16be\0\u1705\0\u174c\0\u1793\0\u17da\0\u1821"+
    "\0\u1868\0\u18af\0\u18f6\0\u193d\0\u1984\0\u19cb\0\u1a12\0\u1a59"+
    "\0\u1aa0\0\u1ae7\0\u1b2e\0\u1b75\0\u1bbc\0\u1c03\0\u1c4a\0\u1c91"+
    "\0\u1cd8\0\u039b\0\u1d1f\0\u039b\0\u1d66\0\u1dad\0\u1df4\0\u1e3b"+
    "\0\u1e82\0\u1ec9\0\u1f10\0\u1f57\0\u1f9e\0\u1fe5\0\u039b\0\u202c"+
    "\0\u2073\0\u20ba\0\u2101\0\u039b\0\u2148\0\u218f\0\u21d6\0\u221d"+
    "\0\u2264\0\u22ab\0\u22f2\0\u2339\0\u2380\0\u23c7\0\u240e\0\u2455"+
    "\0\u039b\0\u249c\0\u24e3\0\u252a\0\u2571\0\u039b\0\u039b\0\u25b8"+
    "\0\u25ff\0\u2646\0\u039b\0\u039b\0\u268d\0\u26d4\0\u271b\0\u2762"+
    "\0\u27a9\0\u27f0\0\u2837\0\u287e\0\u28c5\0\u039b\0\u290c\0\u2953"+
    "\0\u299a\0\u039b\0\u039b\0\u29e1\0\u2a28\0\u2a6f\0\u2ab6\0\u2afd"+
    "\0\u2b44\0\u2b8b\0\u039b\0\107\0\u2bd2\0\u2c19\0\u039b\0\u039b"+
    "\0\u2c60\0\u2ca7\0\u2cee\0\u2d35\0\u039b\0\u039b\0\u2d7c\0\u2dc3"+
    "\0\u2e0a\0\u2e51\0\u2e98\0\u2edf\0\u2f26\0\u2f6d\0\u2fb4\0\u2ffb"+
    "\0\u3042\0\u3089\0\u039b\0\u30d0\0\u3117\0\u315e\0\u31a5\0\u31ec"+
    "\0\u3233\0\u327a\0\u32c1\0\u3308\0\u334f\0\u3396\0\u33dd\0\u3424"+
    "\0\u346b\0\u34b2\0\u039b\0\u34f9\0\u3540\0\u3587\0\u039b\0\u35ce"+
    "\0\u3615\0\u365c\0\u36a3\0\u36ea\0\u3731\0\u039b\0\u3778\0\u37bf"+
    "\0\u3806\0\u384d\0\u3894\0\u38db\0\u039b\0\u3922\0\u3969\0\u39b0"+
    "\0\u39f7\0\u039b\0\u3a3e\0\u3a85\0\u3acc\0\u3b13\0\u3b5a\0\u3ba1"+
    "\0\u3be8\0\u3c2f\0\u3c76\0\u3cbd\0\u3d04\0\u3d4b\0\u039b\0\u039b"+
    "\0\u3d92\0\u3dd9\0\u3e20\0\u3e67\0\u3eae\0\u3ef5\0\u3f3c\0\u3f83"+
    "\0\u3fca\0\u039b\0\u4011\0\u4058\0\u409f\0\u40e6\0\u412d\0\u4174"+
    "\0\u41bb\0\u4202\0\u039b\0\u039b\0\u4249\0\u4290\0\u42d7\0\u431e"+
    "\0\u4365\0\u43ac\0\u43f3\0\u443a\0\u4481\0\u039b\0\u44c8\0\u450f"+
    "\0\u039b\0\u4556\0\u039b\0\u039b\0\u459d\0\u45e4\0\u462b\0\u4672"+
    "\0\u46b9\0\u039b\0\u4700\0\u4747\0\u478e\0\u47d5\0\u481c\0\u4863"+
    "\0\u039b\0\u48aa\0\u48f1\0\u039b\0\u039b\0\u039b\0\u4938\0\u039b"+
    "\0\u039b\0\u039b\0\u497f\0\u039b\0\u49c6\0\u4a0d\0\u4a54\0\u4a9b"+
    "\0\u4ae2\0\u4b29\0\u4b70\0\u039b\0\u4bb7\0\u039b\0\u4bfe\0\u4c45"+
    "\0\u4c8c\0\u4cd3\0\u4d1a\0\u4d61\0\u4da8\0\u039b\0\u039b\0\u4def"+
    "\0\u4e36\0\u4e7d\0\u4ec4\0\u4f0b\0\u4f52\0\u4f99\0\u039b\0\u039b"+
    "\0\u039b\0\u039b\0\u4fe0\0\u039b\0\u5027\0\u039b\0\u039b\0\u039b"+
    "\0\u506e\0\u50b5\0\u50fc\0\u039b\0\u5143\0\u518a\0\u51d1\0\u039b"+
    "\0\u5218\0\u525f\0\u52a6\0\u52ed\0\u5334\0\u537b\0\u53c2\0\u5409"+
    "\0\u5450\0\u5497\0\u54de\0\u5525\0\u556c\0\u039b\0\u55b3\0\u55fa"+
    "\0\u039b\0\u5641\0\u5688\0\u039b\0\u039b\0\u56cf\0\u039b\0\u039b"+
    "\0\u5716\0\u039b\0\u575d\0\u039b\0\u039b\0\u57a4\0\u57eb\0\u5832"+
    "\0\u5879\0\u58c0\0\u5907\0\u594e\0\u5995\0\u59dc\0\u5a23\0\u5a6a"+
    "\0\u039b\0\u5ab1\0\u5af8\0\u5b3f\0\u518a\0\107\0\u5b86\0\u039b"+
    "\0\u5bcd\0\u5c14\0\u5c5b\0\u5ca2\0\u5ce9\0\u5d30\0\u039b\0\u5d77"+
    "\0\u5dbe\0\u5e05\0\u5e4c\0\u039b\0\u5e93\0\u039b\0\u5eda\0\u5f21"+
    "\0\u5f68\0\u039b";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[450];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\5\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\4\30\1\31\2\30\1\32\1\33\1\34\1\35\1\36"+
    "\1\2\1\37\1\40\1\41\1\42\1\43\1\44\1\30"+
    "\1\45\1\46\1\30\1\47\1\50\1\51\1\52\1\53"+
    "\1\54\1\55\1\56\1\57\1\30\1\60\1\61\1\62"+
    "\1\30\1\63\1\64\1\65\1\66\1\2\110\0\2\3"+
    "\1\0\1\3\134\0\1\67\54\0\6\70\1\71\100\70"+
    "\33\0\1\72\75\0\5\73\74\0\1\74\4\0\1\75"+
    "\105\0\1\73\1\0\5\21\7\0\1\76\17\0\1\76"+
    "\1\77\56\0\1\100\3\0\1\101\102\0\1\102\1\0"+
    "\1\103\1\104\106\0\1\105\1\106\105\0\1\107\1\110"+
    "\75\0\5\30\1\111\5\0\7\30\4\0\1\30\1\0"+
    "\30\30\27\0\5\30\1\111\5\0\5\30\1\112\1\30"+
    "\4\0\1\30\1\0\30\30\42\0\7\30\4\0\1\100"+
    "\1\0\30\30\27\0\5\30\1\111\5\0\7\30\4\0"+
    "\1\30\1\0\1\30\1\113\1\114\11\30\1\115\4\30"+
    "\1\116\1\117\5\30\27\0\5\30\1\111\5\0\7\30"+
    "\4\0\1\30\1\0\23\30\1\120\4\30\27\0\5\30"+
    "\1\111\5\0\7\30\4\0\1\30\1\0\1\121\3\30"+
    "\1\122\2\30\1\123\5\30\1\124\12\30\27\0\5\30"+
    "\1\111\5\0\7\30\4\0\1\30\1\0\4\30\1\125"+
    "\10\30\1\126\12\30\27\0\5\30\1\111\5\0\7\30"+
    "\4\0\1\30\1\0\14\30\1\127\11\30\1\130\1\30"+
    "\27\0\5\30\1\111\5\0\7\30\4\0\1\30\1\0"+
    "\2\30\1\131\2\30\1\132\2\30\1\133\1\30\1\134"+
    "\1\135\10\30\1\136\3\30\27\0\5\30\1\111\5\0"+
    "\7\30\4\0\1\30\1\0\1\30\1\137\4\30\1\140"+
    "\1\30\1\141\10\30\1\142\6\30\27\0\5\30\1\111"+
    "\5\0\7\30\4\0\1\30\1\0\13\30\1\143\1\144"+
    "\13\30\27\0\5\30\1\111\5\0\7\30\4\0\1\30"+
    "\1\0\4\30\1\145\3\30\1\146\4\30\1\147\12\30"+
    "\27\0\5\30\1\111\5\0\7\30\4\0\1\30\1\0"+
    "\1\150\3\30\1\151\3\30\1\152\17\30\27\0\5\30"+
    "\1\111\5\0\7\30\4\0\1\30\1\0\4\30\1\153"+
    "\23\30\27\0\5\30\1\111\5\0\7\30\4\0\1\30"+
    "\1\0\23\30\1\154\4\30\27\0\5\30\1\111\5\0"+
    "\7\30\4\0\1\30\1\0\1\155\14\30\1\156\2\30"+
    "\1\157\7\30\27\0\5\30\1\111\5\0\7\30\4\0"+
    "\1\30\1\0\23\30\1\160\4\30\27\0\5\30\1\111"+
    "\5\0\7\30\4\0\1\30\1\0\3\30\1\161\1\162"+
    "\3\30\1\163\4\30\1\164\7\30\1\165\2\30\27\0"+
    "\5\30\1\111\5\0\7\30\4\0\1\30\1\0\4\30"+
    "\1\166\3\30\1\167\4\30\1\170\1\30\1\171\3\30"+
    "\1\172\4\30\27\0\5\30\1\111\5\0\7\30\4\0"+
    "\1\30\1\0\1\173\5\30\1\174\21\30\27\0\5\30"+
    "\1\111\5\0\7\30\4\0\1\30\1\0\1\30\1\175"+
    "\4\30\1\176\12\30\1\177\6\30\27\0\5\30\1\111"+
    "\5\0\7\30\4\0\1\30\1\0\1\200\6\30\1\201"+
    "\1\202\17\30\27\0\5\30\1\111\5\0\7\30\4\0"+
    "\1\30\1\0\15\30\1\203\12\30\27\0\5\73\7\0"+
    "\1\76\17\0\1\76\1\77\27\0\14\74\1\204\72\74"+
    "\2\205\1\0\1\205\1\0\12\205\1\206\67\205\15\0"+
    "\1\207\1\0\1\207\2\0\5\210\107\0\1\100\101\0"+
    "\5\30\1\111\5\0\1\30\1\211\5\30\4\0\1\30"+
    "\1\0\30\30\27\0\5\30\1\111\5\0\7\30\4\0"+
    "\1\30\1\0\21\30\1\212\6\30\27\0\5\30\1\111"+
    "\5\0\7\30\4\0\1\30\1\0\15\30\1\213\12\30"+
    "\27\0\5\30\1\111\5\0\7\30\4\0\1\30\1\0"+
    "\27\30\1\214\27\0\5\30\1\111\5\0\7\30\4\0"+
    "\1\30\1\0\10\30\1\215\10\30\1\216\6\30\27\0"+
    "\5\30\1\111\5\0\7\30\4\0\1\30\1\0\1\217"+
    "\21\30\1\220\5\30\27\0\5\30\1\111\5\0\7\30"+
    "\4\0\1\30\1\0\22\30\1\221\5\30\27\0\5\30"+
    "\1\111\5\0\7\30\4\0\1\30\1\0\21\30\1\222"+
    "\6\30\27\0\5\30\1\111\5\0\7\30\4\0\1\30"+
    "\1\0\10\30\1\223\17\30\27\0\5\30\1\111\5\0"+
    "\7\30\4\0\1\30\1\0\4\30\1\224\23\30\27\0"+
    "\5\30\1\111\5\0\7\30\4\0\1\30\1\0\13\30"+
    "\1\225\1\226\4\30\1\227\6\30\27\0\5\30\1\111"+
    "\5\0\7\30\4\0\1\30\1\0\2\30\1\230\25\30"+
    "\27\0\5\30\1\111\5\0\7\30\4\0\1\30\1\0"+
    "\23\30\1\231\4\30\27\0\5\30\1\111\5\0\7\30"+
    "\4\0\1\30\1\0\1\232\23\30\1\233\3\30\27\0"+
    "\5\30\1\111\5\0\7\30\4\0\1\30\1\0\16\30"+
    "\1\234\11\30\27\0\5\30\1\111\5\0\7\30\4\0"+
    "\1\30\1\0\15\30\1\235\12\30\27\0\5\30\1\111"+
    "\5\0\7\30\4\0\1\30\1\0\23\30\1\236\4\30"+
    "\27\0\5\30\1\111\5\0\7\30\4\0\1\30\1\0"+
    "\26\30\1\237\1\30\27\0\5\30\1\111\5\0\7\30"+
    "\4\0\1\30\1\0\15\30\1\240\12\30\27\0\5\30"+
    "\1\111\5\0\7\30\4\0\1\30\1\0\15\30\1\241"+
    "\12\30\27\0\5\30\1\111\5\0\7\30\4\0\1\30"+
    "\1\0\1\242\27\30\27\0\5\30\1\111\5\0\7\30"+
    "\4\0\1\30\1\0\1\243\27\30\27\0\5\30\1\111"+
    "\5\0\7\30\4\0\1\30\1\0\20\30\1\244\7\30"+
    "\27\0\5\30\1\111\5\0\7\30\4\0\1\30\1\0"+
    "\6\30\1\245\21\30\27\0\5\30\1\111\5\0\7\30"+
    "\4\0\1\30\1\0\12\30\1\246\15\30\27\0\5\30"+
    "\1\111\5\0\7\30\4\0\1\30\1\0\16\30\1\247"+
    "\11\30\27\0\5\30\1\111\5\0\7\30\4\0\1\30"+
    "\1\0\16\30\1\250\3\30\1\251\5\30\27\0\5\30"+
    "\1\111\5\0\7\30\4\0\1\30\1\0\22\30\1\252"+
    "\5\30\27\0\5\30\1\111\5\0\7\30\4\0\1\30"+
    "\1\0\1\30\1\253\26\30\27\0\5\30\1\111\5\0"+
    "\7\30\4\0\1\30\1\0\6\30\1\254\16\30\1\255"+
    "\2\30\27\0\5\30\1\111\5\0\7\30\4\0\1\30"+
    "\1\0\26\30\1\256\1\30\27\0\5\30\1\111\5\0"+
    "\7\30\4\0\1\30\1\0\13\30\1\257\14\30\27\0"+
    "\5\30\1\111\5\0\7\30\4\0\1\30\1\0\14\30"+
    "\1\260\13\30\27\0\5\30\1\111\5\0\7\30\4\0"+
    "\1\30\1\0\14\30\1\261\13\30\27\0\5\30\1\111"+
    "\5\0\7\30\4\0\1\30\1\0\22\30\1\262\5\30"+
    "\27\0\5\30\1\111\5\0\7\30\4\0\1\30\1\0"+
    "\20\30\1\263\7\30\27\0\5\30\1\111\5\0\7\30"+
    "\4\0\1\30\1\0\25\30\1\264\2\30\27\0\5\30"+
    "\1\111\5\0\7\30\4\0\1\30\1\0\4\30\1\265"+
    "\10\30\1\266\12\30\27\0\5\30\1\111\5\0\7\30"+
    "\4\0\1\30\1\0\1\267\27\30\27\0\5\30\1\111"+
    "\5\0\7\30\4\0\1\30\1\0\22\30\1\270\5\30"+
    "\27\0\5\30\1\111\5\0\7\30\4\0\1\30\1\0"+
    "\13\30\1\271\14\30\27\0\5\30\1\111\5\0\7\30"+
    "\4\0\1\30\1\0\14\30\1\272\13\30\27\0\5\30"+
    "\1\111\5\0\7\30\4\0\1\30\1\0\23\30\1\273"+
    "\4\30\27\0\5\30\1\111\5\0\7\30\4\0\1\30"+
    "\1\0\22\30\1\274\5\30\27\0\5\30\1\111\5\0"+
    "\7\30\4\0\1\30\1\0\12\30\1\275\4\30\1\276"+
    "\10\30\27\0\5\30\1\111\5\0\7\30\4\0\1\30"+
    "\1\0\14\30\1\277\13\30\27\0\5\30\1\111\5\0"+
    "\7\30\4\0\1\30\1\0\23\30\1\300\4\30\27\0"+
    "\5\30\1\111\5\0\7\30\4\0\1\30\1\0\20\30"+
    "\1\301\7\30\27\0\5\30\1\111\5\0\7\30\4\0"+
    "\1\30\1\0\13\30\1\302\14\30\27\0\5\30\1\111"+
    "\5\0\7\30\4\0\1\30\1\0\14\30\1\303\13\30"+
    "\27\0\5\30\1\111\5\0\7\30\4\0\1\30\1\0"+
    "\20\30\1\304\7\30\27\0\5\30\1\111\5\0\7\30"+
    "\4\0\1\30\1\0\1\305\27\30\27\0\5\30\1\111"+
    "\5\0\7\30\4\0\1\30\1\0\20\30\1\306\7\30"+
    "\27\0\5\30\1\111\5\0\7\30\4\0\1\30\1\0"+
    "\12\30\1\307\15\30\27\0\5\30\1\111\5\0\7\30"+
    "\4\0\1\30\1\0\24\30\1\310\3\30\27\0\5\30"+
    "\1\111\5\0\7\30\4\0\1\30\1\0\4\30\1\311"+
    "\23\30\27\0\5\30\1\111\5\0\7\30\4\0\1\30"+
    "\1\0\22\30\1\312\5\30\27\0\5\30\1\111\5\0"+
    "\7\30\4\0\1\30\1\0\20\30\1\313\7\30\5\0"+
    "\14\74\1\204\4\74\1\314\65\74\2\205\1\0\1\205"+
    "\1\0\104\205\1\0\1\205\1\0\12\205\1\206\31\205"+
    "\1\315\35\205\22\0\5\210\102\0\5\210\30\0\1\77"+
    "\51\0\5\30\1\111\5\0\2\30\1\316\4\30\4\0"+
    "\1\30\1\0\30\30\27\0\5\30\1\111\5\0\7\30"+
    "\4\0\1\30\1\0\21\30\1\317\6\30\27\0\5\30"+
    "\1\111\5\0\7\30\4\0\1\30\1\0\14\30\1\320"+
    "\13\30\27\0\5\30\1\111\5\0\7\30\4\0\1\30"+
    "\1\0\4\30\1\321\23\30\27\0\5\30\1\111\5\0"+
    "\7\30\4\0\1\30\1\0\14\30\1\322\13\30\27\0"+
    "\5\30\1\111\5\0\7\30\4\0\1\30\1\0\1\323"+
    "\27\30\27\0\5\30\1\111\5\0\7\30\4\0\1\30"+
    "\1\0\22\30\1\324\5\30\27\0\5\30\1\111\5\0"+
    "\7\30\4\0\1\30\1\0\4\30\1\325\23\30\27\0"+
    "\5\30\1\111\5\0\7\30\4\0\1\30\1\0\12\30"+
    "\1\326\15\30\27\0\5\30\1\111\5\0\7\30\4\0"+
    "\1\30\1\0\2\30\1\327\25\30\27\0\5\30\1\111"+
    "\5\0\7\30\4\0\1\30\1\0\16\30\1\330\11\30"+
    "\27\0\5\30\1\111\5\0\7\30\4\0\1\30\1\0"+
    "\22\30\1\331\5\30\27\0\5\30\1\111\5\0\7\30"+
    "\4\0\1\30\1\0\12\30\1\332\15\30\27\0\5\30"+
    "\1\111\5\0\7\30\4\0\1\30\1\0\1\30\1\333"+
    "\26\30\27\0\5\30\1\111\5\0\7\30\4\0\1\30"+
    "\1\0\1\30\1\334\26\30\27\0\5\30\1\111\5\0"+
    "\7\30\4\0\1\30\1\0\10\30\1\335\17\30\27\0"+
    "\5\30\1\111\5\0\7\30\4\0\1\30\1\0\14\30"+
    "\1\336\13\30\27\0\5\30\1\111\5\0\7\30\4\0"+
    "\1\30\1\0\14\30\1\337\13\30\27\0\5\30\1\111"+
    "\5\0\7\30\4\0\1\30\1\0\4\30\1\340\23\30"+
    "\27\0\5\30\1\111\5\0\7\30\4\0\1\30\1\0"+
    "\1\341\14\30\1\342\12\30\27\0\5\30\1\111\5\0"+
    "\7\30\4\0\1\30\1\0\3\30\1\343\24\30\27\0"+
    "\5\30\1\111\5\0\7\30\4\0\1\30\1\0\20\30"+
    "\1\344\7\30\27\0\5\30\1\111\5\0\7\30\4\0"+
    "\1\30\1\0\20\30\1\345\7\30\27\0\5\30\1\111"+
    "\5\0\7\30\4\0\1\30\1\0\15\30\1\346\12\30"+
    "\27\0\5\30\1\111\5\0\7\30\4\0\1\30\1\0"+
    "\7\30\1\347\20\30\27\0\5\30\1\111\5\0\7\30"+
    "\4\0\1\30\1\0\10\30\1\350\17\30\27\0\5\30"+
    "\1\111\5\0\7\30\4\0\1\30\1\0\15\30\1\351"+
    "\12\30\27\0\5\30\1\111\5\0\7\30\4\0\1\30"+
    "\1\0\23\30\1\352\4\30\27\0\5\30\1\111\5\0"+
    "\7\30\4\0\1\30\1\0\20\30\1\353\7\30\27\0"+
    "\5\30\1\111\5\0\7\30\4\0\1\30\1\0\20\30"+
    "\1\354\7\30\27\0\1\30\1\355\3\30\1\111\5\0"+
    "\7\30\4\0\1\30\1\0\30\30\27\0\5\30\1\111"+
    "\5\0\7\30\4\0\1\30\1\0\4\30\1\356\23\30"+
    "\27\0\5\30\1\111\5\0\7\30\4\0\1\30\1\0"+
    "\16\30\1\357\11\30\27\0\5\30\1\111\5\0\7\30"+
    "\4\0\1\30\1\0\22\30\1\360\5\30\27\0\5\30"+
    "\1\111\5\0\7\30\4\0\1\30\1\0\16\30\1\361"+
    "\11\30\27\0\5\30\1\111\5\0\7\30\4\0\1\30"+
    "\1\0\5\30\1\362\22\30\27\0\5\30\1\111\5\0"+
    "\7\30\4\0\1\30\1\0\3\30\1\363\24\30\27\0"+
    "\5\30\1\111\5\0\7\30\4\0\1\30\1\0\3\30"+
    "\1\364\24\30\27\0\5\30\1\111\5\0\7\30\4\0"+
    "\1\30\1\0\1\365\27\30\27\0\5\30\1\111\5\0"+
    "\7\30\4\0\1\30\1\0\1\366\27\30\27\0\5\30"+
    "\1\111\5\0\7\30\4\0\1\30\1\0\22\30\1\367"+
    "\5\30\27\0\5\30\1\111\5\0\7\30\4\0\1\30"+
    "\1\0\14\30\1\370\5\30\1\371\5\30\27\0\5\30"+
    "\1\111\5\0\7\30\4\0\1\30\1\0\1\372\27\30"+
    "\27\0\5\30\1\111\5\0\7\30\4\0\1\30\1\0"+
    "\4\30\1\373\23\30\27\0\5\30\1\111\5\0\7\30"+
    "\4\0\1\30\1\0\6\30\1\374\21\30\27\0\5\30"+
    "\1\111\5\0\7\30\4\0\1\30\1\0\14\30\1\375"+
    "\13\30\27\0\5\30\1\111\5\0\7\30\4\0\1\30"+
    "\1\0\22\30\1\376\5\30\27\0\5\30\1\111\5\0"+
    "\7\30\4\0\1\30\1\0\15\30\1\377\12\30\27\0"+
    "\5\30\1\111\5\0\7\30\4\0\1\30\1\0\20\30"+
    "\1\u0100\7\30\27\0\5\30\1\111\5\0\7\30\4\0"+
    "\1\30\1\0\15\30\1\u0101\12\30\27\0\5\30\1\111"+
    "\5\0\7\30\4\0\1\30\1\0\10\30\1\u0102\17\30"+
    "\27\0\5\30\1\111\5\0\7\30\4\0\1\30\1\0"+
    "\4\30\1\u0103\23\30\27\0\5\30\1\111\5\0\7\30"+
    "\4\0\1\30\1\0\20\30\1\u0104\7\30\27\0\5\30"+
    "\1\111\5\0\7\30\4\0\1\30\1\0\7\30\1\u0105"+
    "\20\30\5\0\2\u0106\1\u0107\1\u0106\1\u0107\44\u0106\1\205"+
    "\35\u0106\22\0\5\30\1\111\5\0\3\30\1\u0108\3\30"+
    "\4\0\1\30\1\0\30\30\27\0\5\30\1\111\5\0"+
    "\7\30\4\0\1\30\1\0\20\30\1\u0109\7\30\27\0"+
    "\2\30\1\u010a\2\30\1\111\5\0\7\30\4\0\1\30"+
    "\1\0\30\30\27\0\5\30\1\111\5\0\7\30\4\0"+
    "\1\30\1\0\2\30\1\u010b\25\30\27\0\5\30\1\111"+
    "\5\0\7\30\4\0\1\30\1\0\15\30\1\u010c\12\30"+
    "\27\0\5\30\1\111\5\0\7\30\4\0\1\30\1\0"+
    "\11\30\1\u010d\16\30\27\0\5\30\1\111\5\0\7\30"+
    "\4\0\1\30\1\0\15\30\1\u010e\12\30\27\0\5\30"+
    "\1\111\5\0\7\30\4\0\1\30\1\0\20\30\1\u010f"+
    "\7\30\27\0\5\30\1\111\5\0\7\30\4\0\1\30"+
    "\1\0\1\u0110\27\30\27\0\5\30\1\111\5\0\7\30"+
    "\4\0\1\30\1\0\12\30\1\u0111\15\30\27\0\5\30"+
    "\1\111\5\0\7\30\4\0\1\30\1\0\12\30\1\u0112"+
    "\15\30\27\0\5\30\1\111\5\0\7\30\4\0\1\30"+
    "\1\0\20\30\1\u0113\7\30\27\0\5\30\1\111\5\0"+
    "\7\30\4\0\1\30\1\0\21\30\1\u0114\6\30\27\0"+
    "\5\30\1\111\5\0\7\30\4\0\1\30\1\0\2\30"+
    "\1\u0115\25\30\27\0\5\30\1\111\5\0\7\30\4\0"+
    "\1\30\1\0\3\30\1\u0116\24\30\27\0\5\30\1\111"+
    "\5\0\7\30\4\0\1\30\1\0\22\30\1\u0117\5\30"+
    "\27\0\5\30\1\111\5\0\7\30\4\0\1\30\1\0"+
    "\20\30\1\u0118\7\30\27\0\5\30\1\111\5\0\7\30"+
    "\4\0\1\30\1\0\10\30\1\u0119\17\30\27\0\5\30"+
    "\1\111\5\0\7\30\4\0\1\30\1\0\6\30\1\u011a"+
    "\21\30\27\0\5\30\1\111\5\0\7\30\4\0\1\30"+
    "\1\0\23\30\1\u011b\4\30\27\0\5\30\1\111\5\0"+
    "\7\30\4\0\1\30\1\0\4\30\1\u011c\23\30\27\0"+
    "\5\30\1\111\5\0\7\30\4\0\1\30\1\0\3\30"+
    "\1\u011d\24\30\27\0\5\30\1\111\5\0\7\30\4\0"+
    "\1\30\1\0\20\30\1\u011e\7\30\27\0\5\30\1\111"+
    "\5\0\7\30\4\0\1\30\1\0\22\30\1\u011f\5\30"+
    "\27\0\5\30\1\111\5\0\7\30\4\0\1\30\1\0"+
    "\4\30\1\u0120\23\30\27\0\5\30\1\111\5\0\7\30"+
    "\4\0\1\30\1\0\1\u0121\27\30\27\0\1\u0122\4\30"+
    "\1\111\5\0\7\30\4\0\1\30\1\0\30\30\27\0"+
    "\5\30\1\111\5\0\7\30\4\0\1\30\1\0\21\30"+
    "\1\u0123\6\30\27\0\5\30\1\111\5\0\7\30\4\0"+
    "\1\30\1\0\23\30\1\u0124\4\30\27\0\5\30\1\111"+
    "\5\0\7\30\4\0\1\30\1\0\20\30\1\u0125\7\30"+
    "\27\0\5\30\1\111\5\0\7\30\4\0\1\30\1\0"+
    "\23\30\1\u0126\4\30\27\0\5\30\1\111\5\0\7\30"+
    "\4\0\1\30\1\0\10\30\1\u0127\17\30\27\0\5\30"+
    "\1\111\5\0\7\30\4\0\1\30\1\0\16\30\1\u0128"+
    "\11\30\27\0\5\30\1\111\5\0\7\30\4\0\1\30"+
    "\1\0\1\30\1\u0129\26\30\27\0\5\30\1\111\5\0"+
    "\7\30\4\0\1\30\1\0\10\30\1\u012a\17\30\27\0"+
    "\5\30\1\111\5\0\7\30\4\0\1\30\1\0\3\30"+
    "\1\u012b\24\30\27\0\5\30\1\111\5\0\7\30\4\0"+
    "\1\30\1\0\4\30\1\u012c\23\30\27\0\5\30\1\111"+
    "\5\0\7\30\4\0\1\30\1\0\1\30\1\u012d\26\30"+
    "\27\0\5\30\1\111\5\0\7\30\4\0\1\30\1\0"+
    "\2\30\1\u012e\25\30\27\0\5\30\1\111\5\0\7\30"+
    "\4\0\1\30\1\0\12\30\1\u012f\15\30\27\0\5\30"+
    "\1\111\5\0\7\30\4\0\1\30\1\0\3\30\1\u0130"+
    "\24\30\27\0\5\30\1\111\5\0\7\30\4\0\1\30"+
    "\1\0\23\30\1\u0131\4\30\27\0\5\30\1\111\5\0"+
    "\7\30\4\0\1\30\1\0\6\30\1\u0132\21\30\27\0"+
    "\5\30\1\111\5\0\7\30\4\0\1\30\1\0\23\30"+
    "\1\u0133\4\30\27\0\5\30\1\111\5\0\7\30\4\0"+
    "\1\30\1\0\3\30\1\u0134\24\30\27\0\5\30\1\111"+
    "\5\0\7\30\4\0\1\30\1\0\5\30\1\u0135\22\30"+
    "\27\0\5\30\1\111\5\0\7\30\4\0\1\30\1\0"+
    "\4\30\1\u0136\23\30\5\0\2\u0106\1\u0107\1\u0106\1\u0107"+
    "\44\u0106\1\u0137\35\u0106\51\u0107\1\u0138\35\u0107\22\0\5\30"+
    "\1\111\5\0\6\30\1\u0139\4\0\1\30\1\0\30\30"+
    "\27\0\5\30\1\111\5\0\7\30\4\0\1\30\1\0"+
    "\22\30\1\u013a\5\30\27\0\5\30\1\111\5\0\7\30"+
    "\4\0\1\30\1\0\7\30\1\u013b\20\30\27\0\5\30"+
    "\1\111\5\0\7\30\4\0\1\30\1\0\14\30\1\u013c"+
    "\13\30\27\0\5\30\1\111\5\0\7\30\4\0\1\30"+
    "\1\0\1\30\1\u013d\26\30\27\0\5\30\1\111\5\0"+
    "\7\30\4\0\1\30\1\0\14\30\1\u013e\13\30\27\0"+
    "\5\30\1\111\5\0\7\30\4\0\1\30\1\0\15\30"+
    "\1\u013f\12\30\27\0\5\30\1\111\5\0\7\30\4\0"+
    "\1\30\1\0\20\30\1\u0140\7\30\27\0\5\30\1\111"+
    "\5\0\7\30\4\0\1\30\1\0\4\30\1\u0141\23\30"+
    "\27\0\5\30\1\111\5\0\7\30\4\0\1\30\1\0"+
    "\4\30\1\u0142\23\30\27\0\5\30\1\111\5\0\7\30"+
    "\4\0\1\30\1\0\15\30\1\u0143\12\30\27\0\5\30"+
    "\1\111\5\0\7\30\4\0\1\30\1\0\22\30\1\u0144"+
    "\5\30\27\0\5\30\1\111\5\0\7\30\4\0\1\30"+
    "\1\0\22\30\1\u0145\5\30\27\0\5\30\1\111\5\0"+
    "\7\30\4\0\1\30\1\0\16\30\1\u0146\11\30\27\0"+
    "\5\30\1\111\5\0\7\30\4\0\1\30\1\0\1\u0147"+
    "\27\30\27\0\5\30\1\111\5\0\7\30\4\0\1\30"+
    "\1\0\20\30\1\u0148\7\30\27\0\5\30\1\111\5\0"+
    "\7\30\4\0\1\30\1\0\16\30\1\u0149\11\30\27\0"+
    "\5\30\1\111\5\0\7\30\4\0\1\30\1\0\21\30"+
    "\1\u014a\6\30\27\0\5\30\1\111\5\0\7\30\4\0"+
    "\1\30\1\0\4\30\1\u014b\23\30\27\0\5\30\1\111"+
    "\5\0\7\30\4\0\1\30\1\0\22\30\1\u014c\5\30"+
    "\27\0\5\30\1\111\5\0\7\30\4\0\1\30\1\0"+
    "\21\30\1\u014d\6\30\27\0\5\30\1\111\5\0\7\30"+
    "\4\0\1\30\1\0\2\30\1\u014e\25\30\27\0\5\30"+
    "\1\111\5\0\7\30\4\0\1\30\1\0\20\30\1\u014f"+
    "\7\30\27\0\5\30\1\111\5\0\7\30\4\0\1\30"+
    "\1\0\22\30\1\u0150\5\30\27\0\5\30\1\111\5\0"+
    "\7\30\4\0\1\30\1\0\22\30\1\u0151\5\30\27\0"+
    "\5\30\1\111\5\0\7\30\4\0\1\30\1\0\27\30"+
    "\1\u0152\27\0\5\30\1\111\5\0\7\30\4\0\1\30"+
    "\1\0\22\30\1\u0153\5\30\27\0\5\30\1\111\5\0"+
    "\7\30\4\0\1\30\1\0\26\30\1\u0154\1\30\27\0"+
    "\5\30\1\111\5\0\7\30\4\0\1\30\1\0\20\30"+
    "\1\u0155\7\30\27\0\5\30\1\111\5\0\7\30\4\0"+
    "\1\30\1\0\12\30\1\u0156\15\30\27\0\5\30\1\111"+
    "\5\0\7\30\4\0\1\30\1\0\14\30\1\u0157\13\30"+
    "\27\0\5\30\1\111\5\0\7\30\4\0\1\30\1\0"+
    "\12\30\1\u0158\15\30\27\0\5\30\1\111\5\0\7\30"+
    "\4\0\1\30\1\0\22\30\1\u0159\5\30\27\0\5\30"+
    "\1\111\5\0\7\30\4\0\1\30\1\0\4\30\1\u015a"+
    "\23\30\27\0\5\30\1\111\5\0\7\30\4\0\1\30"+
    "\1\0\5\30\1\u015b\22\30\27\0\5\30\1\111\5\0"+
    "\7\30\4\0\1\30\1\0\16\30\1\u015c\11\30\27\0"+
    "\5\30\1\111\5\0\7\30\4\0\1\30\1\0\20\30"+
    "\1\u015d\7\30\27\0\5\30\1\111\5\0\7\30\4\0"+
    "\1\30\1\0\16\30\1\u015e\11\30\27\0\5\30\1\111"+
    "\5\0\7\30\4\0\1\30\1\0\4\30\1\u015f\23\30"+
    "\27\0\5\30\1\111\5\0\7\30\4\0\1\30\1\0"+
    "\15\30\1\u0160\12\30\5\0\2\205\1\0\1\205\1\0"+
    "\12\205\1\u0161\67\205\17\0\1\u0162\111\0\5\30\1\111"+
    "\5\0\7\30\4\0\1\30\1\0\1\30\1\u0163\26\30"+
    "\27\0\5\30\1\111\5\0\7\30\4\0\1\30\1\0"+
    "\15\30\1\u0164\12\30\27\0\5\30\1\111\5\0\7\30"+
    "\4\0\1\30\1\0\4\30\1\u0165\23\30\27\0\5\30"+
    "\1\111\5\0\7\30\4\0\1\30\1\0\12\30\1\u0166"+
    "\15\30\27\0\5\30\1\111\5\0\7\30\4\0\1\30"+
    "\1\0\4\30\1\u0167\23\30\27\0\5\30\1\111\5\0"+
    "\7\30\4\0\1\30\1\0\16\30\1\u0168\11\30\27\0"+
    "\5\30\1\111\5\0\7\30\4\0\1\30\1\0\14\30"+
    "\1\u0169\13\30\27\0\5\30\1\111\5\0\7\30\4\0"+
    "\1\30\1\0\1\u016a\27\30\27\0\5\30\1\111\5\0"+
    "\7\30\4\0\1\30\1\0\10\30\1\u016b\17\30\27\0"+
    "\5\30\1\111\5\0\7\30\4\0\1\30\1\0\15\30"+
    "\1\u016c\12\30\27\0\5\30\1\111\5\0\7\30\4\0"+
    "\1\30\1\0\1\30\1\u016d\26\30\27\0\5\30\1\111"+
    "\5\0\7\30\4\0\1\30\1\0\1\u016e\27\30\27\0"+
    "\5\30\1\111\5\0\7\30\4\0\1\30\1\0\22\30"+
    "\1\u016f\5\30\27\0\5\30\1\111\5\0\7\30\4\0"+
    "\1\30\1\0\20\30\1\u0170\7\30\27\0\5\30\1\111"+
    "\5\0\7\30\4\0\1\30\1\0\27\30\1\u0171\27\0"+
    "\5\30\1\111\5\0\7\30\4\0\1\30\1\0\21\30"+
    "\1\u0172\6\30\27\0\5\30\1\111\5\0\7\30\4\0"+
    "\1\30\1\0\4\30\1\u0173\23\30\27\0\5\30\1\111"+
    "\5\0\7\30\4\0\1\30\1\0\4\30\1\u0174\23\30"+
    "\27\0\5\30\1\111\5\0\7\30\4\0\1\30\1\0"+
    "\3\30\1\u0175\24\30\27\0\5\30\1\111\5\0\7\30"+
    "\4\0\1\30\1\0\4\30\1\u0176\23\30\27\0\2\30"+
    "\1\u0177\1\u0178\1\30\1\111\5\0\7\30\4\0\1\30"+
    "\1\0\30\30\27\0\5\30\1\111\5\0\7\30\4\0"+
    "\1\30\1\0\16\30\1\u0179\11\30\27\0\5\30\1\111"+
    "\5\0\7\30\4\0\1\30\1\0\10\30\1\u017a\17\30"+
    "\27\0\5\30\1\111\5\0\7\30\4\0\1\30\1\0"+
    "\1\u017b\27\30\27\0\5\30\1\111\5\0\7\30\4\0"+
    "\1\30\1\0\20\30\1\u017c\7\30\27\0\5\30\1\111"+
    "\5\0\7\30\4\0\1\30\1\0\20\30\1\u017d\7\30"+
    "\5\0\2\205\1\u017e\1\205\1\u017e\12\205\1\u0161\67\205"+
    "\2\0\1\u017e\1\0\1\u017e\12\0\1\u0162\111\0\5\30"+
    "\1\111\5\0\7\30\4\0\1\30\1\0\15\30\1\u017f"+
    "\12\30\27\0\5\30\1\111\5\0\7\30\4\0\1\30"+
    "\1\0\26\30\1\u0180\1\30\27\0\5\30\1\111\5\0"+
    "\7\30\4\0\1\30\1\0\14\30\1\u0181\13\30\27\0"+
    "\5\30\1\111\5\0\7\30\4\0\1\30\1\0\20\30"+
    "\1\u0182\7\30\27\0\5\30\1\111\5\0\7\30\4\0"+
    "\1\30\1\0\13\30\1\u0183\14\30\27\0\5\30\1\111"+
    "\5\0\7\30\4\0\1\30\1\0\14\30\1\u0184\13\30"+
    "\27\0\5\30\1\111\5\0\7\30\4\0\1\30\1\0"+
    "\15\30\1\u0185\12\30\27\0\5\30\1\111\5\0\7\30"+
    "\4\0\1\30\1\0\10\30\1\u0186\17\30\27\0\5\30"+
    "\1\111\5\0\7\30\4\0\1\30\1\0\12\30\1\u0187"+
    "\15\30\27\0\5\30\1\111\5\0\7\30\4\0\1\30"+
    "\1\0\16\30\1\u0188\11\30\27\0\5\30\1\111\5\0"+
    "\7\30\4\0\1\30\1\0\2\30\1\u0189\25\30\27\0"+
    "\5\30\1\111\5\0\7\30\4\0\1\30\1\0\4\30"+
    "\1\u018a\23\30\27\0\5\30\1\111\5\0\7\30\4\0"+
    "\1\30\1\0\20\30\1\u018b\7\30\27\0\5\30\1\111"+
    "\5\0\7\30\4\0\1\30\1\0\12\30\1\u018c\15\30"+
    "\27\0\5\30\1\111\5\0\7\30\4\0\1\30\1\0"+
    "\16\30\1\u018d\11\30\27\0\5\30\1\111\5\0\7\30"+
    "\4\0\1\30\1\0\13\30\1\u018e\14\30\26\0\1\u018f"+
    "\107\0\5\30\1\111\5\0\7\30\4\0\1\30\1\0"+
    "\23\30\1\u0190\4\30\27\0\5\30\1\111\5\0\7\30"+
    "\4\0\1\30\1\0\22\30\1\u0191\5\30\27\0\5\30"+
    "\1\111\5\0\7\30\4\0\1\30\1\0\4\30\1\u0192"+
    "\23\30\27\0\5\30\1\111\5\0\7\30\4\0\1\30"+
    "\1\0\4\30\1\u0193\23\30\27\0\5\30\1\111\5\0"+
    "\7\30\4\0\1\30\1\0\22\30\1\u0194\5\30\27\0"+
    "\5\30\1\111\5\0\7\30\4\0\1\30\1\0\14\30"+
    "\1\u0195\13\30\27\0\5\30\1\111\5\0\7\30\4\0"+
    "\1\30\1\0\14\30\1\u0196\13\30\27\0\5\30\1\111"+
    "\5\0\7\30\4\0\1\30\1\0\4\30\1\u0197\23\30"+
    "\27\0\5\30\1\111\5\0\7\30\4\0\1\30\1\0"+
    "\7\30\1\u0198\20\30\27\0\5\30\1\111\5\0\7\30"+
    "\4\0\1\30\1\0\10\30\1\u0199\17\30\27\0\5\30"+
    "\1\111\5\0\7\30\4\0\1\30\1\0\20\30\1\u019a"+
    "\7\30\27\0\5\30\1\111\5\0\7\30\4\0\1\30"+
    "\1\0\4\30\1\u019b\23\30\27\0\5\30\1\111\5\0"+
    "\7\30\4\0\1\30\1\0\4\30\1\u019c\23\30\27\0"+
    "\5\30\1\111\5\0\7\30\4\0\1\30\1\0\7\30"+
    "\1\u019d\20\30\26\0\1\u019e\107\0\5\30\1\111\5\0"+
    "\7\30\4\0\1\30\1\0\14\30\1\u019f\13\30\27\0"+
    "\5\30\1\111\5\0\7\30\4\0\1\30\1\0\2\30"+
    "\1\u01a0\25\30\27\0\5\30\1\111\5\0\7\30\4\0"+
    "\1\30\1\0\14\30\1\u01a1\13\30\27\0\5\30\1\111"+
    "\5\0\7\30\4\0\1\30\1\0\22\30\1\u01a2\5\30"+
    "\27\0\5\30\1\111\5\0\7\30\4\0\1\30\1\0"+
    "\21\30\1\u01a3\6\30\27\0\5\30\1\111\5\0\7\30"+
    "\4\0\1\30\1\0\2\30\1\u01a4\25\30\5\0\2\u01a5"+
    "\1\u017e\1\0\1\u017e\12\u01a5\1\u01a6\66\u01a5\23\0\5\30"+
    "\1\111\5\0\7\30\4\0\1\30\1\0\3\30\1\u01a7"+
    "\24\30\27\0\5\30\1\111\5\0\7\30\4\0\1\30"+
    "\1\0\10\30\1\u01a8\17\30\27\0\5\30\1\111\5\0"+
    "\7\30\4\0\1\30\1\0\22\30\1\u01a9\5\30\27\0"+
    "\5\30\1\111\5\0\7\30\4\0\1\30\1\0\16\30"+
    "\1\u01aa\11\30\27\0\5\30\1\111\5\0\7\30\4\0"+
    "\1\30\1\0\10\30\1\u01ab\17\30\27\0\5\30\1\111"+
    "\5\0\7\30\4\0\1\30\1\0\10\30\1\u01ac\17\30"+
    "\5\0\2\u01a5\1\u017e\1\0\1\u017e\101\u01a5\1\0\2\u01a5"+
    "\1\u01ad\1\u01ae\1\u01af\12\u01a5\1\u01a6\66\u01a5\23\0\5\30"+
    "\1\111\5\0\7\30\4\0\1\30\1\0\21\30\1\u01b0"+
    "\6\30\27\0\5\30\1\111\5\0\7\30\4\0\1\30"+
    "\1\0\21\30\1\u01b1\6\30\27\0\5\30\1\111\5\0"+
    "\7\30\4\0\1\30\1\0\20\30\1\u01b2\7\30\27\0"+
    "\5\30\1\111\5\0\7\30\4\0\1\30\1\0\15\30"+
    "\1\u01b3\12\30\27\0\5\30\1\111\5\0\7\30\4\0"+
    "\1\30\1\0\21\30\1\u01b4\6\30\7\0\1\u01ae\16\0"+
    "\1\u018f\107\0\5\30\1\111\5\0\7\30\4\0\1\30"+
    "\1\0\10\30\1\u01b5\17\30\27\0\5\30\1\111\5\0"+
    "\7\30\4\0\1\30\1\0\4\30\1\u01b6\23\30\27\0"+
    "\5\30\1\111\5\0\7\30\4\0\1\30\1\0\14\30"+
    "\1\u01b7\13\30\27\0\5\30\1\111\5\0\7\30\4\0"+
    "\1\30\1\0\10\30\1\u01b8\17\30\27\0\5\30\1\111"+
    "\5\0\7\30\4\0\1\30\1\0\15\30\1\u01b9\12\30"+
    "\27\0\5\30\1\111\5\0\7\30\4\0\1\30\1\0"+
    "\2\30\1\u01ba\25\30\27\0\5\30\1\111\5\0\7\30"+
    "\4\0\1\30\1\0\15\30\1\u01bb\12\30\27\0\5\30"+
    "\1\111\5\0\7\30\4\0\1\30\1\0\14\30\1\u01bc"+
    "\13\30\27\0\5\30\1\111\5\0\7\30\4\0\1\30"+
    "\1\0\10\30\1\u01bd\17\30\27\0\5\30\1\111\5\0"+
    "\7\30\4\0\1\30\1\0\14\30\1\u01be\13\30\27\0"+
    "\5\30\1\111\5\0\7\30\4\0\1\30\1\0\21\30"+
    "\1\u01bf\6\30\27\0\5\30\1\111\5\0\7\30\4\0"+
    "\1\30\1\0\10\30\1\u01c0\17\30\27\0\5\30\1\111"+
    "\5\0\7\30\4\0\1\30\1\0\15\30\1\u01c1\12\30"+
    "\27\0\5\30\1\111\5\0\7\30\4\0\1\30\1\0"+
    "\14\30\1\u01c2\13\30\5\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[24495];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\3\1\10\11\5\1\1\11\3\1\1\11"+
    "\2\1\4\11\25\1\5\11\1\0\2\11\3\1\1\0"+
    "\1\11\1\0\10\11\1\0\72\1\1\0\2\1\1\0"+
    "\104\1\1\11\72\1\1\0\60\1\1\0\51\1\1\0"+
    "\33\1\1\0\20\1\1\0\16\1\1\0\6\1\2\0"+
    "\7\1\1\11\24\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[450];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
  public _FaustLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _FaustLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return BAD_CHARACTER;
            }
          // fall through
          case 120: break;
          case 2:
            { return WHITE_SPACE;
            }
          // fall through
          case 121: break;
          case 3:
            { return CUT;
            }
          // fall through
          case 122: break;
          case 4:
            { return MOD;
            }
          // fall through
          case 123: break;
          case 5:
            { return AND;
            }
          // fall through
          case 124: break;
          case 6:
            { return DELAY1;
            }
          // fall through
          case 125: break;
          case 7:
            { return LPAREN;
            }
          // fall through
          case 126: break;
          case 8:
            { return RPAREN;
            }
          // fall through
          case 127: break;
          case 9:
            { return MUL;
            }
          // fall through
          case 128: break;
          case 10:
            { return ADD;
            }
          // fall through
          case 129: break;
          case 11:
            { return PAR;
            }
          // fall through
          case 130: break;
          case 12:
            { return SUB;
            }
          // fall through
          case 131: break;
          case 13:
            { return DOT;
            }
          // fall through
          case 132: break;
          case 14:
            { return DIV;
            }
          // fall through
          case 133: break;
          case 15:
            { return NUMBER;
            }
          // fall through
          case 134: break;
          case 16:
            { return SEQ;
            }
          // fall through
          case 135: break;
          case 17:
            { return ENDDEF;
            }
          // fall through
          case 136: break;
          case 18:
            { return LT;
            }
          // fall through
          case 137: break;
          case 19:
            { return DEF;
            }
          // fall through
          case 138: break;
          case 20:
            { return GT;
            }
          // fall through
          case 139: break;
          case 21:
            { return DELAY;
            }
          // fall through
          case 140: break;
          case 22:
            { return IDENTIFIER;
            }
          // fall through
          case 141: break;
          case 23:
            { return LBRACK;
            }
          // fall through
          case 142: break;
          case 24:
            { return LAMBDA;
            }
          // fall through
          case 143: break;
          case 25:
            { return RBRACK;
            }
          // fall through
          case 144: break;
          case 26:
            { return POWOP;
            }
          // fall through
          case 145: break;
          case 27:
            { return WIRE;
            }
          // fall through
          case 146: break;
          case 28:
            { return LBRACE;
            }
          // fall through
          case 147: break;
          case 29:
            { return OR;
            }
          // fall through
          case 148: break;
          case 30:
            { return RBRACE;
            }
          // fall through
          case 149: break;
          case 31:
            { return REC;
            }
          // fall through
          case 150: break;
          case 32:
            { return NE;
            }
          // fall through
          case 151: break;
          case 33:
            { return STRING_LITERAL;
            }
          // fall through
          case 152: break;
          case 34:
            { return LAPPLY;
            }
          // fall through
          case 153: break;
          case 35:
            { return BLOCK_COMMENT;
            }
          // fall through
          case 154: break;
          case 36:
            { return LINE_COMMENT;
            }
          // fall through
          case 155: break;
          case 37:
            { return MERGE;
            }
          // fall through
          case 156: break;
          case 38:
            { return SPLIT;
            }
          // fall through
          case 157: break;
          case 39:
            { return LSH;
            }
          // fall through
          case 158: break;
          case 40:
            { return LE;
            }
          // fall through
          case 159: break;
          case 41:
            { return EQ;
            }
          // fall through
          case 160: break;
          case 42:
            { return ARROW;
            }
          // fall through
          case 161: break;
          case 43:
            { return GE;
            }
          // fall through
          case 162: break;
          case 44:
            { return RSH;
            }
          // fall through
          case 163: break;
          case 45:
            { return ABS;
            }
          // fall through
          case 164: break;
          case 46:
            { return NOTYPECAST;
            }
          // fall through
          case 165: break;
          case 47:
            { return COS;
            }
          // fall through
          case 166: break;
          case 48:
            { return EXP;
            }
          // fall through
          case 167: break;
          case 49:
            { return INTCAST;
            }
          // fall through
          case 168: break;
          case 50:
            { return LOG;
            }
          // fall through
          case 169: break;
          case 51:
            { return MAX;
            }
          // fall through
          case 170: break;
          case 52:
            { return MEM;
            }
          // fall through
          case 171: break;
          case 53:
            { return MIN;
            }
          // fall through
          case 172: break;
          case 54:
            { return IPAR;
            }
          // fall through
          case 173: break;
          case 55:
            { return POWFUN;
            }
          // fall through
          case 174: break;
          case 56:
            { return ISEQ;
            }
          // fall through
          case 175: break;
          case 57:
            { return SIN;
            }
          // fall through
          case 176: break;
          case 58:
            { return ISUM;
            }
          // fall through
          case 177: break;
          case 59:
            { return TAN;
            }
          // fall through
          case 178: break;
          case 60:
            { return XOR;
            }
          // fall through
          case 179: break;
          case 61:
            { return ACOS;
            }
          // fall through
          case 180: break;
          case 62:
            { return ASIN;
            }
          // fall through
          case 181: break;
          case 63:
            { return ATAN;
            }
          // fall through
          case 182: break;
          case 64:
            { return CASE;
            }
          // fall through
          case 183: break;
          case 65:
            { return CEIL;
            }
          // fall through
          case 184: break;
          case 66:
            { return FMOD;
            }
          // fall through
          case 185: break;
          case 67:
            { return IPROD;
            }
          // fall through
          case 186: break;
          case 68:
            { return RINT;
            }
          // fall through
          case 187: break;
          case 69:
            { return SQRT;
            }
          // fall through
          case 188: break;
          case 70:
            { return WITH;
            }
          // fall through
          case 189: break;
          case 71:
            { return ATAN2;
            }
          // fall through
          case 190: break;
          case 72:
            { return FLOATCAST;
            }
          // fall through
          case 191: break;
          case 73:
            { return FLOOR;
            }
          // fall through
          case 192: break;
          case 74:
            { return LOG10;
            }
          // fall through
          case 193: break;
          case 75:
            { return ROUND;
            }
          // fall through
          case 194: break;
          case 76:
            { return ROUTE;
            }
          // fall through
          case 195: break;
          case 77:
            { return WHERE;
            }
          // fall through
          case 196: break;
          case 78:
            { return PREFIX;
            }
          // fall through
          case 197: break;
          case 79:
            { return ATTACH;
            }
          // fall through
          case 198: break;
          case 80:
            { return BUTTON;
            }
          // fall through
          case 199: break;
          case 81:
            { return ENABLE;
            }
          // fall through
          case 200: break;
          case 82:
            { return HGROUP;
            }
          // fall through
          case 201: break;
          case 83:
            { return IMPORT;
            }
          // fall through
          case 202: break;
          case 84:
            { return INS;
            }
          // fall through
          case 203: break;
          case 85:
            { return LETREC;
            }
          // fall through
          case 204: break;
          case 86:
            { return LOWEST;
            }
          // fall through
          case 205: break;
          case 87:
            { return MODULATE;
            }
          // fall through
          case 206: break;
          case 88:
            { return NENTRY;
            }
          // fall through
          case 207: break;
          case 89:
            { return PRFIX;
            }
          // fall through
          case 208: break;
          case 90:
            { return TGROUP;
            }
          // fall through
          case 209: break;
          case 91:
            { return VGROUP;
            }
          // fall through
          case 210: break;
          case 92:
            { return CONTROL;
            }
          // fall through
          case 211: break;
          case 93:
            { return DECLARE;
            }
          // fall through
          case 212: break;
          case 94:
            { return HIGHEST;
            }
          // fall through
          case 213: break;
          case 95:
            { return HSLIDER;
            }
          // fall through
          case 214: break;
          case 96:
            { return LIBRARY;
            }
          // fall through
          case 215: break;
          case 97:
            { return OUTS;
            }
          // fall through
          case 216: break;
          case 98:
            { return RDTBL;
            }
          // fall through
          case 217: break;
          case 99:
            { return RWTBL;
            }
          // fall through
          case 218: break;
          case 100:
            { return SELECT2;
            }
          // fall through
          case 219: break;
          case 101:
            { return SELECT3;
            }
          // fall through
          case 220: break;
          case 102:
            { return VSLIDER;
            }
          // fall through
          case 221: break;
          case 103:
            { return CHECKBOX;
            }
          // fall through
          case 222: break;
          case 104:
            { return WAVEFORM;
            }
          // fall through
          case 223: break;
          case 105:
            { return COMPONENT;
            }
          // fall through
          case 224: break;
          case 106:
            { return FCONSTANT;
            }
          // fall through
          case 225: break;
          case 107:
            { return FFUNCTION;
            }
          // fall through
          case 226: break;
          case 108:
            { return FVARIABLE;
            }
          // fall through
          case 227: break;
          case 109:
            { return HBARGRAPH;
            }
          // fall through
          case 228: break;
          case 110:
            { return REMAINDER;
            }
          // fall through
          case 229: break;
          case 111:
            { return SOUNDFILE;
            }
          // fall through
          case 230: break;
          case 112:
            { return VBARGRAPH;
            }
          // fall through
          case 231: break;
          case 113:
            { return ENVIRONMENT;
            }
          // fall through
          case 232: break;
          case 114:
            { return DOC_COMMENT;
            }
          // fall through
          case 233: break;
          case 115:
            { return ASSERTBOUNDS;
            }
          // fall through
          case 234: break;
          case 116:
            { return QUADMODE;
            }
          // fall through
          case 235: break;
          case 117:
            { return DOUBLEMODE;
            }
          // fall through
          case 236: break;
          case 118:
            { return FLOATMODE;
            }
          // fall through
          case 237: break;
          case 119:
            { return FIXEDPOINTMODE;
            }
          // fall through
          case 238: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
