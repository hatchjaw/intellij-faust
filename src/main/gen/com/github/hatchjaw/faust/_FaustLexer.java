// Generated by JFlex 1.9.2 http://jflex.de/  (tweaked for IntelliJ platform)
// source: src/main/grammar/_FaustLexer.flex

package com.github.hatchjaw.faust;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static com.github.hatchjaw.faust.psi.FaustTypes.*;


public class _FaustLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\37\u0100\1\u0200\267\u0100\10\u0300\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\2\3\1\2\22\0\1\1\1\4"+
    "\1\5\1\6\1\0\1\7\1\10\1\11\1\12\1\13"+
    "\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23"+
    "\1\24\1\25\6\26\1\27\1\30\1\31\1\32\1\33"+
    "\1\0\1\34\4\35\1\36\1\37\2\35\1\40\6\35"+
    "\1\41\1\35\1\42\5\35\1\43\2\35\1\44\1\45"+
    "\1\46\1\47\1\50\1\51\1\52\1\53\1\54\1\55"+
    "\1\56\1\57\1\60\1\61\1\62\1\35\1\63\1\64"+
    "\1\65\1\66\1\67\1\70\1\71\1\72\1\73\1\74"+
    "\1\75\1\76\1\77\1\100\1\101\1\35\1\102\1\103"+
    "\1\104\1\105\6\0\1\3\u01a2\0\2\3\326\0\u0100\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1024];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\1\1\4\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\2\26"+
    "\1\27\1\30\1\31\1\32\1\33\24\26\1\34\1\35"+
    "\1\36\1\37\1\40\1\0\1\41\1\42\1\17\1\43"+
    "\1\44\1\0\1\17\1\0\1\45\1\0\1\46\1\47"+
    "\1\50\1\51\1\52\1\53\1\54\1\0\72\26\1\0"+
    "\3\44\1\0\1\17\1\0\1\55\1\26\1\56\1\26"+
    "\1\57\12\26\1\60\4\26\1\61\14\26\1\62\2\26"+
    "\1\63\1\26\1\64\1\65\1\66\2\26\1\67\1\70"+
    "\11\26\1\71\1\72\2\26\1\73\1\74\7\26\1\75"+
    "\1\43\1\44\1\0\2\44\1\0\1\26\1\76\1\77"+
    "\1\26\1\100\2\26\1\101\1\102\14\26\1\103\17\26"+
    "\1\104\3\26\1\105\6\26\1\106\6\26\1\107\1\44"+
    "\3\0\1\44\2\26\1\110\14\26\1\111\1\112\11\26"+
    "\1\113\10\26\1\114\1\115\11\26\1\116\3\0\1\44"+
    "\1\117\1\26\1\120\1\121\5\26\1\122\6\26\1\123"+
    "\2\26\1\124\1\125\1\126\1\26\1\127\1\130\1\131"+
    "\1\26\1\132\7\26\1\133\1\26\1\134\2\26\4\0"+
    "\3\26\1\135\1\136\7\26\1\137\1\140\1\141\1\142"+
    "\1\26\1\143\1\26\1\144\1\145\1\146\3\26\1\147"+
    "\1\26\1\0\1\150\1\0\1\26\1\151\15\26\1\152"+
    "\1\150\1\0\1\26\1\153\2\26\1\154\1\155\1\26"+
    "\1\156\1\157\1\26\1\160\1\26\1\161\1\162\1\163"+
    "\10\26\1\164\3\26\1\165\6\26\1\166\4\26\1\167"+
    "\1\26\1\170\3\26\1\171";

  private static int [] zzUnpackAction() {
    int [] result = new int[463];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\106\0\214\0\322\0\u0118\0\106\0\106\0\106"+
    "\0\106\0\106\0\106\0\106\0\106\0\u015e\0\u01a4\0\u01ea"+
    "\0\u0230\0\u0276\0\106\0\u02bc\0\u0302\0\u0348\0\106\0\u038e"+
    "\0\u03d4\0\106\0\106\0\106\0\106\0\u041a\0\u0460\0\u04a6"+
    "\0\u04ec\0\u0532\0\u0578\0\u05be\0\u0604\0\u064a\0\u0690\0\u06d6"+
    "\0\u071c\0\u0762\0\u07a8\0\u07ee\0\u0834\0\u087a\0\u08c0\0\u0906"+
    "\0\u094c\0\u0992\0\106\0\106\0\106\0\106\0\106\0\u0118"+
    "\0\106\0\106\0\u09d8\0\u0a1e\0\u0a64\0\u0aaa\0\106\0\u041a"+
    "\0\106\0\u0af0\0\106\0\106\0\106\0\106\0\106\0\106"+
    "\0\106\0\u0b36\0\u0b7c\0\u0bc2\0\u0c08\0\u0c4e\0\u0c94\0\u0cda"+
    "\0\u0d20\0\u0d66\0\u0dac\0\u0df2\0\u0e38\0\u0e7e\0\u0ec4\0\u0f0a"+
    "\0\u0f50\0\u0f96\0\u0fdc\0\u1022\0\u1068\0\u10ae\0\u10f4\0\u113a"+
    "\0\u1180\0\u11c6\0\u120c\0\u1252\0\u1298\0\u12de\0\u1324\0\u136a"+
    "\0\u13b0\0\u13f6\0\u143c\0\u1482\0\u14c8\0\u150e\0\u1554\0\u159a"+
    "\0\u15e0\0\u1626\0\u166c\0\u16b2\0\u16f8\0\u173e\0\u1784\0\u17ca"+
    "\0\u1810\0\u1856\0\u189c\0\u18e2\0\u1928\0\u196e\0\u19b4\0\u19fa"+
    "\0\u1a40\0\u1a86\0\u1acc\0\u1b12\0\u1b58\0\u1b9e\0\u1be4\0\u1c2a"+
    "\0\u1c70\0\u1cb6\0\u1cfc\0\106\0\u1d42\0\u038e\0\u1d88\0\u038e"+
    "\0\u1dce\0\u1e14\0\u1e5a\0\u1ea0\0\u1ee6\0\u1f2c\0\u1f72\0\u1fb8"+
    "\0\u1ffe\0\u2044\0\u038e\0\u208a\0\u20d0\0\u2116\0\u215c\0\u038e"+
    "\0\u21a2\0\u21e8\0\u222e\0\u2274\0\u22ba\0\u2300\0\u2346\0\u238c"+
    "\0\u23d2\0\u2418\0\u245e\0\u24a4\0\u038e\0\u24ea\0\u2530\0\u2576"+
    "\0\u25bc\0\u038e\0\u038e\0\u2602\0\u2648\0\u268e\0\u038e\0\u038e"+
    "\0\u26d4\0\u271a\0\u2760\0\u27a6\0\u27ec\0\u2832\0\u2878\0\u28be"+
    "\0\u2904\0\u038e\0\u294a\0\u2990\0\u29d6\0\u038e\0\u038e\0\u2a1c"+
    "\0\u2a62\0\u2aa8\0\u2aee\0\u2b34\0\u2b7a\0\u2bc0\0\u038e\0\106"+
    "\0\u2c06\0\u2c4c\0\u2c92\0\u2cd8\0\u2d1e\0\u2d64\0\u038e\0\u038e"+
    "\0\u2daa\0\u2df0\0\u2e36\0\u2e7c\0\u038e\0\u038e\0\u2ec2\0\u2f08"+
    "\0\u2f4e\0\u2f94\0\u2fda\0\u3020\0\u3066\0\u30ac\0\u30f2\0\u3138"+
    "\0\u317e\0\u31c4\0\u038e\0\u320a\0\u3250\0\u3296\0\u32dc\0\u3322"+
    "\0\u3368\0\u33ae\0\u33f4\0\u343a\0\u3480\0\u34c6\0\u350c\0\u3552"+
    "\0\u3598\0\u35de\0\u038e\0\u3624\0\u366a\0\u36b0\0\u038e\0\u36f6"+
    "\0\u373c\0\u3782\0\u37c8\0\u380e\0\u3854\0\u038e\0\u389a\0\u38e0"+
    "\0\u3926\0\u396c\0\u39b2\0\u39f8\0\u038e\0\u3a3e\0\u3a84\0\u3aca"+
    "\0\u3b10\0\u3b56\0\u3b9c\0\u3be2\0\u038e\0\u3c28\0\u3c6e\0\u3cb4"+
    "\0\u3cfa\0\u3d40\0\u3d86\0\u3dcc\0\u3e12\0\u3e58\0\u3e9e\0\u3ee4"+
    "\0\u3f2a\0\u038e\0\u038e\0\u3f70\0\u3fb6\0\u3ffc\0\u4042\0\u4088"+
    "\0\u40ce\0\u4114\0\u415a\0\u41a0\0\u038e\0\u41e6\0\u422c\0\u4272"+
    "\0\u42b8\0\u42fe\0\u4344\0\u438a\0\u43d0\0\u038e\0\u038e\0\u4416"+
    "\0\u445c\0\u44a2\0\u44e8\0\u452e\0\u4574\0\u45ba\0\u4600\0\u4646"+
    "\0\u038e\0\u468c\0\u46d2\0\u4718\0\u475e\0\u038e\0\u47a4\0\u038e"+
    "\0\u038e\0\u47ea\0\u4830\0\u4876\0\u48bc\0\u4902\0\u038e\0\u4948"+
    "\0\u498e\0\u49d4\0\u4a1a\0\u4a60\0\u4aa6\0\u038e\0\u4aec\0\u4b32"+
    "\0\u038e\0\u038e\0\u038e\0\u4b78\0\u038e\0\u038e\0\u038e\0\u4bbe"+
    "\0\u038e\0\u4c04\0\u4c4a\0\u4c90\0\u4cd6\0\u4d1c\0\u4d62\0\u4da8"+
    "\0\u038e\0\u4dee\0\u038e\0\u4e34\0\u4e7a\0\u4ec0\0\u4f06\0\u4f4c"+
    "\0\u4f92\0\u4fd8\0\u501e\0\u5064\0\u038e\0\u038e\0\u50aa\0\u50f0"+
    "\0\u5136\0\u517c\0\u51c2\0\u5208\0\u524e\0\u038e\0\u038e\0\u038e"+
    "\0\u038e\0\u5294\0\u038e\0\u52da\0\u038e\0\u038e\0\u038e\0\u5320"+
    "\0\u5366\0\u53ac\0\u038e\0\u53f2\0\u5438\0\u3aca\0\u547e\0\u54c4"+
    "\0\u038e\0\u550a\0\u5550\0\u5596\0\u55dc\0\u5622\0\u5668\0\u56ae"+
    "\0\u56f4\0\u573a\0\u5780\0\u57c6\0\u580c\0\u5852\0\u038e\0\u468c"+
    "\0\u5898\0\u58de\0\u038e\0\u5924\0\u596a\0\u038e\0\u038e\0\u59b0"+
    "\0\u038e\0\u038e\0\u59f6\0\u038e\0\u5a3c\0\u038e\0\u038e\0\u4f92"+
    "\0\u5a82\0\u5ac8\0\u5b0e\0\u5b54\0\u5b9a\0\u5be0\0\u5c26\0\u5c6c"+
    "\0\u038e\0\u5cb2\0\u5cf8\0\u5d3e\0\u038e\0\u5d84\0\u5dca\0\u5e10"+
    "\0\u5e56\0\u5e9c\0\u5ee2\0\u038e\0\u5f28\0\u5f6e\0\u5fb4\0\u5ffa"+
    "\0\u038e\0\u6040\0\u038e\0\u6086\0\u60cc\0\u6112\0\u038e";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[463];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\2\1\4\1\5\1\2\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\5\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\4\30\1\31\2\30\1\32\1\33\1\34\1\35\1\36"+
    "\1\2\1\37\1\40\1\41\1\42\1\43\1\44\1\30"+
    "\1\45\1\46\1\30\1\47\1\50\1\51\1\52\1\53"+
    "\1\54\1\55\1\56\1\57\1\30\1\60\1\61\1\62"+
    "\1\30\1\63\1\64\1\65\1\66\107\0\2\3\135\0"+
    "\1\67\53\0\5\70\1\71\100\70\33\0\1\72\74\0"+
    "\5\73\73\0\1\74\4\0\1\75\104\0\1\73\1\0"+
    "\5\21\7\0\1\76\17\0\1\76\1\77\55\0\1\100"+
    "\3\0\1\101\74\0\5\102\1\103\1\0\1\104\1\105"+
    "\2\0\7\102\4\0\1\102\1\0\30\102\36\0\1\106"+
    "\1\107\104\0\1\110\1\111\74\0\5\30\1\112\5\0"+
    "\7\30\4\0\1\30\1\0\30\30\26\0\5\30\1\112"+
    "\5\0\5\30\1\113\1\30\4\0\1\30\1\0\30\30"+
    "\41\0\7\30\4\0\1\100\1\0\30\30\26\0\5\30"+
    "\1\112\5\0\7\30\4\0\1\30\1\0\1\30\1\114"+
    "\1\115\11\30\1\116\4\30\1\117\1\120\5\30\26\0"+
    "\5\30\1\112\5\0\7\30\4\0\1\30\1\0\23\30"+
    "\1\121\4\30\26\0\5\30\1\112\5\0\7\30\4\0"+
    "\1\30\1\0\1\122\3\30\1\123\2\30\1\124\5\30"+
    "\1\125\12\30\26\0\5\30\1\112\5\0\7\30\4\0"+
    "\1\30\1\0\4\30\1\126\10\30\1\127\12\30\26\0"+
    "\5\30\1\112\5\0\7\30\4\0\1\30\1\0\14\30"+
    "\1\130\11\30\1\131\1\30\26\0\5\30\1\112\5\0"+
    "\7\30\4\0\1\30\1\0\2\30\1\132\2\30\1\133"+
    "\2\30\1\134\1\30\1\135\1\136\10\30\1\137\3\30"+
    "\26\0\5\30\1\112\5\0\7\30\4\0\1\30\1\0"+
    "\1\30\1\140\4\30\1\141\1\30\1\142\10\30\1\143"+
    "\6\30\26\0\5\30\1\112\5\0\7\30\4\0\1\30"+
    "\1\0\13\30\1\144\1\145\13\30\26\0\5\30\1\112"+
    "\5\0\7\30\4\0\1\30\1\0\4\30\1\146\3\30"+
    "\1\147\4\30\1\150\12\30\26\0\5\30\1\112\5\0"+
    "\7\30\4\0\1\30\1\0\1\151\3\30\1\152\3\30"+
    "\1\153\17\30\26\0\5\30\1\112\5\0\7\30\4\0"+
    "\1\30\1\0\4\30\1\154\23\30\26\0\5\30\1\112"+
    "\5\0\7\30\4\0\1\30\1\0\23\30\1\155\4\30"+
    "\26\0\5\30\1\112\5\0\7\30\4\0\1\30\1\0"+
    "\1\156\14\30\1\157\2\30\1\160\7\30\26\0\5\30"+
    "\1\112\5\0\7\30\4\0\1\30\1\0\23\30\1\161"+
    "\4\30\26\0\5\30\1\112\5\0\7\30\4\0\1\30"+
    "\1\0\3\30\1\162\1\163\3\30\1\164\4\30\1\165"+
    "\7\30\1\166\2\30\26\0\5\30\1\112\5\0\7\30"+
    "\4\0\1\30\1\0\4\30\1\167\3\30\1\170\4\30"+
    "\1\171\1\30\1\172\3\30\1\173\4\30\26\0\5\30"+
    "\1\112\5\0\7\30\4\0\1\30\1\0\1\174\5\30"+
    "\1\175\21\30\26\0\5\30\1\112\5\0\7\30\4\0"+
    "\1\30\1\0\1\30\1\176\4\30\1\177\12\30\1\200"+
    "\6\30\26\0\5\30\1\112\5\0\7\30\4\0\1\30"+
    "\1\0\1\201\6\30\1\202\1\203\17\30\26\0\5\30"+
    "\1\112\5\0\7\30\4\0\1\30\1\0\15\30\1\204"+
    "\12\30\26\0\5\73\7\0\1\76\17\0\1\76\1\77"+
    "\26\0\14\74\1\205\71\74\2\206\1\0\3\206\1\207"+
    "\10\206\1\210\66\206\15\0\1\211\1\0\1\211\2\0"+
    "\5\212\77\0\1\213\1\0\5\102\4\0\1\214\1\0"+
    "\7\102\4\0\1\102\1\0\30\102\33\0\1\100\100\0"+
    "\5\30\1\112\5\0\1\30\1\215\5\30\4\0\1\30"+
    "\1\0\30\30\26\0\5\30\1\112\5\0\7\30\4\0"+
    "\1\30\1\0\21\30\1\216\6\30\26\0\5\30\1\112"+
    "\5\0\7\30\4\0\1\30\1\0\15\30\1\217\12\30"+
    "\26\0\5\30\1\112\5\0\7\30\4\0\1\30\1\0"+
    "\27\30\1\220\26\0\5\30\1\112\5\0\7\30\4\0"+
    "\1\30\1\0\10\30\1\221\10\30\1\222\6\30\26\0"+
    "\5\30\1\112\5\0\7\30\4\0\1\30\1\0\1\223"+
    "\21\30\1\224\5\30\26\0\5\30\1\112\5\0\7\30"+
    "\4\0\1\30\1\0\22\30\1\225\5\30\26\0\5\30"+
    "\1\112\5\0\7\30\4\0\1\30\1\0\21\30\1\226"+
    "\6\30\26\0\5\30\1\112\5\0\7\30\4\0\1\30"+
    "\1\0\10\30\1\227\17\30\26\0\5\30\1\112\5\0"+
    "\7\30\4\0\1\30\1\0\4\30\1\230\23\30\26\0"+
    "\5\30\1\112\5\0\7\30\4\0\1\30\1\0\13\30"+
    "\1\231\1\232\4\30\1\233\6\30\26\0\5\30\1\112"+
    "\5\0\7\30\4\0\1\30\1\0\2\30\1\234\25\30"+
    "\26\0\5\30\1\112\5\0\7\30\4\0\1\30\1\0"+
    "\23\30\1\235\4\30\26\0\5\30\1\112\5\0\7\30"+
    "\4\0\1\30\1\0\1\236\23\30\1\237\3\30\26\0"+
    "\5\30\1\112\5\0\7\30\4\0\1\30\1\0\16\30"+
    "\1\240\11\30\26\0\5\30\1\112\5\0\7\30\4\0"+
    "\1\30\1\0\15\30\1\241\12\30\26\0\5\30\1\112"+
    "\5\0\7\30\4\0\1\30\1\0\23\30\1\242\4\30"+
    "\26\0\5\30\1\112\5\0\7\30\4\0\1\30\1\0"+
    "\26\30\1\243\1\30\26\0\5\30\1\112\5\0\7\30"+
    "\4\0\1\30\1\0\15\30\1\244\12\30\26\0\5\30"+
    "\1\112\5\0\7\30\4\0\1\30\1\0\15\30\1\245"+
    "\12\30\26\0\5\30\1\112\5\0\7\30\4\0\1\30"+
    "\1\0\1\246\27\30\26\0\5\30\1\112\5\0\7\30"+
    "\4\0\1\30\1\0\1\247\27\30\26\0\5\30\1\112"+
    "\5\0\7\30\4\0\1\30\1\0\20\30\1\250\7\30"+
    "\26\0\5\30\1\112\5\0\7\30\4\0\1\30\1\0"+
    "\6\30\1\251\21\30\26\0\5\30\1\112\5\0\7\30"+
    "\4\0\1\30\1\0\12\30\1\252\15\30\26\0\5\30"+
    "\1\112\5\0\7\30\4\0\1\30\1\0\16\30\1\253"+
    "\11\30\26\0\5\30\1\112\5\0\7\30\4\0\1\30"+
    "\1\0\16\30\1\254\3\30\1\255\5\30\26\0\5\30"+
    "\1\112\5\0\7\30\4\0\1\30\1\0\22\30\1\256"+
    "\5\30\26\0\5\30\1\112\5\0\7\30\4\0\1\30"+
    "\1\0\1\30\1\257\26\30\26\0\5\30\1\112\5\0"+
    "\7\30\4\0\1\30\1\0\6\30\1\260\16\30\1\261"+
    "\2\30\26\0\5\30\1\112\5\0\7\30\4\0\1\30"+
    "\1\0\26\30\1\262\1\30\26\0\5\30\1\112\5\0"+
    "\7\30\4\0\1\30\1\0\13\30\1\263\14\30\26\0"+
    "\5\30\1\112\5\0\7\30\4\0\1\30\1\0\14\30"+
    "\1\264\13\30\26\0\5\30\1\112\5\0\7\30\4\0"+
    "\1\30\1\0\14\30\1\265\13\30\26\0\5\30\1\112"+
    "\5\0\7\30\4\0\1\30\1\0\22\30\1\266\5\30"+
    "\26\0\5\30\1\112\5\0\7\30\4\0\1\30\1\0"+
    "\20\30\1\267\7\30\26\0\5\30\1\112\5\0\7\30"+
    "\4\0\1\30\1\0\25\30\1\270\2\30\26\0\5\30"+
    "\1\112\5\0\7\30\4\0\1\30\1\0\4\30\1\271"+
    "\10\30\1\272\12\30\26\0\5\30\1\112\5\0\7\30"+
    "\4\0\1\30\1\0\1\273\27\30\26\0\5\30\1\112"+
    "\5\0\7\30\4\0\1\30\1\0\22\30\1\274\5\30"+
    "\26\0\5\30\1\112\5\0\7\30\4\0\1\30\1\0"+
    "\13\30\1\275\14\30\26\0\5\30\1\112\5\0\7\30"+
    "\4\0\1\30\1\0\14\30\1\276\13\30\26\0\5\30"+
    "\1\112\5\0\7\30\4\0\1\30\1\0\23\30\1\277"+
    "\4\30\26\0\5\30\1\112\5\0\7\30\4\0\1\30"+
    "\1\0\22\30\1\300\5\30\26\0\5\30\1\112\5\0"+
    "\7\30\4\0\1\30\1\0\12\30\1\301\4\30\1\302"+
    "\10\30\26\0\5\30\1\112\5\0\7\30\4\0\1\30"+
    "\1\0\14\30\1\303\13\30\26\0\5\30\1\112\5\0"+
    "\7\30\4\0\1\30\1\0\23\30\1\304\4\30\26\0"+
    "\5\30\1\112\5\0\7\30\4\0\1\30\1\0\20\30"+
    "\1\305\7\30\26\0\5\30\1\112\5\0\7\30\4\0"+
    "\1\30\1\0\13\30\1\306\14\30\26\0\5\30\1\112"+
    "\5\0\7\30\4\0\1\30\1\0\14\30\1\307\13\30"+
    "\26\0\5\30\1\112\5\0\7\30\4\0\1\30\1\0"+
    "\20\30\1\310\7\30\26\0\5\30\1\112\5\0\7\30"+
    "\4\0\1\30\1\0\1\311\27\30\26\0\5\30\1\112"+
    "\5\0\7\30\4\0\1\30\1\0\20\30\1\312\7\30"+
    "\26\0\5\30\1\112\5\0\7\30\4\0\1\30\1\0"+
    "\12\30\1\313\15\30\26\0\5\30\1\112\5\0\7\30"+
    "\4\0\1\30\1\0\24\30\1\314\3\30\26\0\5\30"+
    "\1\112\5\0\7\30\4\0\1\30\1\0\4\30\1\315"+
    "\23\30\26\0\5\30\1\112\5\0\7\30\4\0\1\30"+
    "\1\0\22\30\1\316\5\30\26\0\5\30\1\112\5\0"+
    "\7\30\4\0\1\30\1\0\20\30\1\317\7\30\4\0"+
    "\14\74\1\205\4\74\1\320\64\74\2\206\1\0\103\206"+
    "\2\321\1\322\3\321\1\323\77\321\2\206\1\0\14\206"+
    "\1\210\31\206\1\324\34\206\22\0\5\212\101\0\5\212"+
    "\30\0\1\77\63\0\7\325\6\0\30\325\26\0\5\30"+
    "\1\112\5\0\2\30\1\326\4\30\4\0\1\30\1\0"+
    "\30\30\26\0\5\30\1\112\5\0\7\30\4\0\1\30"+
    "\1\0\21\30\1\327\6\30\26\0\5\30\1\112\5\0"+
    "\7\30\4\0\1\30\1\0\14\30\1\330\13\30\26\0"+
    "\5\30\1\112\5\0\7\30\4\0\1\30\1\0\4\30"+
    "\1\331\23\30\26\0\5\30\1\112\5\0\7\30\4\0"+
    "\1\30\1\0\14\30\1\332\13\30\26\0\5\30\1\112"+
    "\5\0\7\30\4\0\1\30\1\0\1\333\27\30\26\0"+
    "\5\30\1\112\5\0\7\30\4\0\1\30\1\0\22\30"+
    "\1\334\5\30\26\0\5\30\1\112\5\0\7\30\4\0"+
    "\1\30\1\0\4\30\1\335\23\30\26\0\5\30\1\112"+
    "\5\0\7\30\4\0\1\30\1\0\12\30\1\336\15\30"+
    "\26\0\5\30\1\112\5\0\7\30\4\0\1\30\1\0"+
    "\2\30\1\337\25\30\26\0\5\30\1\112\5\0\7\30"+
    "\4\0\1\30\1\0\16\30\1\340\11\30\26\0\5\30"+
    "\1\112\5\0\7\30\4\0\1\30\1\0\22\30\1\341"+
    "\5\30\26\0\5\30\1\112\5\0\7\30\4\0\1\30"+
    "\1\0\12\30\1\342\15\30\26\0\5\30\1\112\5\0"+
    "\7\30\4\0\1\30\1\0\1\30\1\343\26\30\26\0"+
    "\5\30\1\112\5\0\7\30\4\0\1\30\1\0\1\30"+
    "\1\344\26\30\26\0\5\30\1\112\5\0\7\30\4\0"+
    "\1\30\1\0\10\30\1\345\17\30\26\0\5\30\1\112"+
    "\5\0\7\30\4\0\1\30\1\0\14\30\1\346\13\30"+
    "\26\0\5\30\1\112\5\0\7\30\4\0\1\30\1\0"+
    "\14\30\1\347\13\30\26\0\5\30\1\112\5\0\7\30"+
    "\4\0\1\30\1\0\4\30\1\350\23\30\26\0\5\30"+
    "\1\112\5\0\7\30\4\0\1\30\1\0\1\351\14\30"+
    "\1\352\12\30\26\0\5\30\1\112\5\0\7\30\4\0"+
    "\1\30\1\0\3\30\1\353\24\30\26\0\5\30\1\112"+
    "\5\0\7\30\4\0\1\30\1\0\20\30\1\354\7\30"+
    "\26\0\5\30\1\112\5\0\7\30\4\0\1\30\1\0"+
    "\20\30\1\355\7\30\26\0\5\30\1\112\5\0\7\30"+
    "\4\0\1\30\1\0\15\30\1\356\12\30\26\0\5\30"+
    "\1\112\5\0\7\30\4\0\1\30\1\0\7\30\1\357"+
    "\20\30\26\0\5\30\1\112\5\0\7\30\4\0\1\30"+
    "\1\0\10\30\1\360\17\30\26\0\5\30\1\112\5\0"+
    "\7\30\4\0\1\30\1\0\15\30\1\361\12\30\26\0"+
    "\5\30\1\112\5\0\7\30\4\0\1\30\1\0\23\30"+
    "\1\362\4\30\26\0\5\30\1\112\5\0\7\30\4\0"+
    "\1\30\1\0\20\30\1\363\7\30\26\0\5\30\1\112"+
    "\5\0\7\30\4\0\1\30\1\0\20\30\1\364\7\30"+
    "\26\0\1\30\1\365\3\30\1\112\5\0\7\30\4\0"+
    "\1\30\1\0\30\30\26\0\5\30\1\112\5\0\7\30"+
    "\4\0\1\30\1\0\4\30\1\366\23\30\26\0\5\30"+
    "\1\112\5\0\7\30\4\0\1\30\1\0\16\30\1\367"+
    "\11\30\26\0\5\30\1\112\5\0\7\30\4\0\1\30"+
    "\1\0\22\30\1\370\5\30\26\0\5\30\1\112\5\0"+
    "\7\30\4\0\1\30\1\0\16\30\1\371\11\30\26\0"+
    "\5\30\1\112\5\0\7\30\4\0\1\30\1\0\5\30"+
    "\1\372\22\30\26\0\5\30\1\112\5\0\7\30\4\0"+
    "\1\30\1\0\3\30\1\373\24\30\26\0\5\30\1\112"+
    "\5\0\7\30\4\0\1\30\1\0\3\30\1\374\24\30"+
    "\26\0\5\30\1\112\5\0\7\30\4\0\1\30\1\0"+
    "\1\375\27\30\26\0\5\30\1\112\5\0\7\30\4\0"+
    "\1\30\1\0\1\376\27\30\26\0\5\30\1\112\5\0"+
    "\7\30\4\0\1\30\1\0\22\30\1\377\5\30\26\0"+
    "\5\30\1\112\5\0\7\30\4\0\1\30\1\0\14\30"+
    "\1\u0100\5\30\1\u0101\5\30\26\0\5\30\1\112\5\0"+
    "\7\30\4\0\1\30\1\0\1\u0102\27\30\26\0\5\30"+
    "\1\112\5\0\7\30\4\0\1\30\1\0\4\30\1\u0103"+
    "\23\30\26\0\5\30\1\112\5\0\7\30\4\0\1\30"+
    "\1\0\6\30\1\u0104\21\30\26\0\5\30\1\112\5\0"+
    "\7\30\4\0\1\30\1\0\14\30\1\u0105\13\30\26\0"+
    "\5\30\1\112\5\0\7\30\4\0\1\30\1\0\22\30"+
    "\1\u0106\5\30\26\0\5\30\1\112\5\0\7\30\4\0"+
    "\1\30\1\0\15\30\1\u0107\12\30\26\0\5\30\1\112"+
    "\5\0\7\30\4\0\1\30\1\0\20\30\1\u0108\7\30"+
    "\26\0\5\30\1\112\5\0\7\30\4\0\1\30\1\0"+
    "\15\30\1\u0109\12\30\26\0\5\30\1\112\5\0\7\30"+
    "\4\0\1\30\1\0\10\30\1\u010a\17\30\26\0\5\30"+
    "\1\112\5\0\7\30\4\0\1\30\1\0\4\30\1\u010b"+
    "\23\30\26\0\5\30\1\112\5\0\7\30\4\0\1\30"+
    "\1\0\20\30\1\u010c\7\30\26\0\5\30\1\112\5\0"+
    "\7\30\4\0\1\30\1\0\7\30\1\u010d\20\30\4\0"+
    "\2\321\1\322\3\321\1\u010e\77\321\6\322\1\u010f\77\322"+
    "\2\321\1\u0110\3\321\1\323\77\321\2\324\1\u0111\14\324"+
    "\1\206\31\324\1\u0112\34\324\33\0\1\214\74\0\5\30"+
    "\1\112\5\0\3\30\1\u0113\3\30\4\0\1\30\1\0"+
    "\30\30\26\0\5\30\1\112\5\0\7\30\4\0\1\30"+
    "\1\0\20\30\1\u0114\7\30\26\0\2\30\1\u0115\2\30"+
    "\1\112\5\0\7\30\4\0\1\30\1\0\30\30\26\0"+
    "\5\30\1\112\5\0\7\30\4\0\1\30\1\0\2\30"+
    "\1\u0116\25\30\26\0\5\30\1\112\5\0\7\30\4\0"+
    "\1\30\1\0\15\30\1\u0117\12\30\26\0\5\30\1\112"+
    "\5\0\7\30\4\0\1\30\1\0\11\30\1\u0118\16\30"+
    "\26\0\5\30\1\112\5\0\7\30\4\0\1\30\1\0"+
    "\15\30\1\u0119\12\30\26\0\5\30\1\112\5\0\7\30"+
    "\4\0\1\30\1\0\20\30\1\u011a\7\30\26\0\5\30"+
    "\1\112\5\0\7\30\4\0\1\30\1\0\1\u011b\27\30"+
    "\26\0\5\30\1\112\5\0\7\30\4\0\1\30\1\0"+
    "\12\30\1\u011c\15\30\26\0\5\30\1\112\5\0\7\30"+
    "\4\0\1\30\1\0\12\30\1\u011d\15\30\26\0\5\30"+
    "\1\112\5\0\7\30\4\0\1\30\1\0\20\30\1\u011e"+
    "\7\30\26\0\5\30\1\112\5\0\7\30\4\0\1\30"+
    "\1\0\21\30\1\u011f\6\30\26\0\5\30\1\112\5\0"+
    "\7\30\4\0\1\30\1\0\2\30\1\u0120\25\30\26\0"+
    "\5\30\1\112\5\0\7\30\4\0\1\30\1\0\3\30"+
    "\1\u0121\24\30\26\0\5\30\1\112\5\0\7\30\4\0"+
    "\1\30\1\0\22\30\1\u0122\5\30\26\0\5\30\1\112"+
    "\5\0\7\30\4\0\1\30\1\0\20\30\1\u0123\7\30"+
    "\26\0\5\30\1\112\5\0\7\30\4\0\1\30\1\0"+
    "\10\30\1\u0124\17\30\26\0\5\30\1\112\5\0\7\30"+
    "\4\0\1\30\1\0\6\30\1\u0125\21\30\26\0\5\30"+
    "\1\112\5\0\7\30\4\0\1\30\1\0\23\30\1\u0126"+
    "\4\30\26\0\5\30\1\112\5\0\7\30\4\0\1\30"+
    "\1\0\4\30\1\u0127\23\30\26\0\5\30\1\112\5\0"+
    "\7\30\4\0\1\30\1\0\3\30\1\u0128\24\30\26\0"+
    "\5\30\1\112\5\0\7\30\4\0\1\30\1\0\20\30"+
    "\1\u0129\7\30\26\0\5\30\1\112\5\0\7\30\4\0"+
    "\1\30\1\0\22\30\1\u012a\5\30\26\0\5\30\1\112"+
    "\5\0\7\30\4\0\1\30\1\0\4\30\1\u012b\23\30"+
    "\26\0\5\30\1\112\5\0\7\30\4\0\1\30\1\0"+
    "\1\u012c\27\30\26\0\1\u012d\4\30\1\112\5\0\7\30"+
    "\4\0\1\30\1\0\30\30\26\0\5\30\1\112\5\0"+
    "\7\30\4\0\1\30\1\0\21\30\1\u012e\6\30\26\0"+
    "\5\30\1\112\5\0\7\30\4\0\1\30\1\0\23\30"+
    "\1\u012f\4\30\26\0\5\30\1\112\5\0\7\30\4\0"+
    "\1\30\1\0\20\30\1\u0130\7\30\26\0\5\30\1\112"+
    "\5\0\7\30\4\0\1\30\1\0\23\30\1\u0131\4\30"+
    "\26\0\5\30\1\112\5\0\7\30\4\0\1\30\1\0"+
    "\10\30\1\u0132\17\30\26\0\5\30\1\112\5\0\7\30"+
    "\4\0\1\30\1\0\16\30\1\u0133\11\30\26\0\5\30"+
    "\1\112\5\0\7\30\4\0\1\30\1\0\1\30\1\u0134"+
    "\26\30\26\0\5\30\1\112\5\0\7\30\4\0\1\30"+
    "\1\0\10\30\1\u0135\17\30\26\0\5\30\1\112\5\0"+
    "\7\30\4\0\1\30\1\0\3\30\1\u0136\24\30\26\0"+
    "\5\30\1\112\5\0\7\30\4\0\1\30\1\0\4\30"+
    "\1\u0137\23\30\26\0\5\30\1\112\5\0\7\30\4\0"+
    "\1\30\1\0\1\30\1\u0138\26\30\26\0\5\30\1\112"+
    "\5\0\7\30\4\0\1\30\1\0\2\30\1\u0139\25\30"+
    "\26\0\5\30\1\112\5\0\7\30\4\0\1\30\1\0"+
    "\12\30\1\u013a\15\30\26\0\5\30\1\112\5\0\7\30"+
    "\4\0\1\30\1\0\3\30\1\u013b\24\30\26\0\5\30"+
    "\1\112\5\0\7\30\4\0\1\30\1\0\23\30\1\u013c"+
    "\4\30\26\0\5\30\1\112\5\0\7\30\4\0\1\30"+
    "\1\0\6\30\1\u013d\21\30\26\0\5\30\1\112\5\0"+
    "\7\30\4\0\1\30\1\0\23\30\1\u013e\4\30\26\0"+
    "\5\30\1\112\5\0\7\30\4\0\1\30\1\0\3\30"+
    "\1\u013f\24\30\26\0\5\30\1\112\5\0\7\30\4\0"+
    "\1\30\1\0\5\30\1\u0140\22\30\26\0\5\30\1\112"+
    "\5\0\7\30\4\0\1\30\1\0\4\30\1\u0141\23\30"+
    "\4\0\2\206\1\u0142\3\206\1\u010e\77\206\2\0\1\u0142"+
    "\3\0\1\u010f\77\0\6\322\1\u010f\12\322\1\u0143\64\322"+
    "\17\u0111\1\0\31\u0111\1\u0144\34\u0111\2\324\1\u0111\14\324"+
    "\1\u0145\31\324\1\u0112\34\324\22\0\5\30\1\112\5\0"+
    "\6\30\1\u0146\4\0\1\30\1\0\30\30\26\0\5\30"+
    "\1\112\5\0\7\30\4\0\1\30\1\0\22\30\1\u0147"+
    "\5\30\26\0\5\30\1\112\5\0\7\30\4\0\1\30"+
    "\1\0\7\30\1\u0148\20\30\26\0\5\30\1\112\5\0"+
    "\7\30\4\0\1\30\1\0\14\30\1\u0149\13\30\26\0"+
    "\5\30\1\112\5\0\7\30\4\0\1\30\1\0\1\30"+
    "\1\u014a\26\30\26\0\5\30\1\112\5\0\7\30\4\0"+
    "\1\30\1\0\14\30\1\u014b\13\30\26\0\5\30\1\112"+
    "\5\0\7\30\4\0\1\30\1\0\15\30\1\u014c\12\30"+
    "\26\0\5\30\1\112\5\0\7\30\4\0\1\30\1\0"+
    "\20\30\1\u014d\7\30\26\0\5\30\1\112\5\0\7\30"+
    "\4\0\1\30\1\0\4\30\1\u014e\23\30\26\0\5\30"+
    "\1\112\5\0\7\30\4\0\1\30\1\0\4\30\1\u014f"+
    "\23\30\26\0\5\30\1\112\5\0\7\30\4\0\1\30"+
    "\1\0\15\30\1\u0150\12\30\26\0\5\30\1\112\5\0"+
    "\7\30\4\0\1\30\1\0\22\30\1\u0151\5\30\26\0"+
    "\5\30\1\112\5\0\7\30\4\0\1\30\1\0\22\30"+
    "\1\u0152\5\30\26\0\5\30\1\112\5\0\7\30\4\0"+
    "\1\30\1\0\16\30\1\u0153\11\30\26\0\5\30\1\112"+
    "\5\0\7\30\4\0\1\30\1\0\1\u0154\27\30\26\0"+
    "\5\30\1\112\5\0\7\30\4\0\1\30\1\0\20\30"+
    "\1\u0155\7\30\26\0\5\30\1\112\5\0\7\30\4\0"+
    "\1\30\1\0\16\30\1\u0156\11\30\26\0\5\30\1\112"+
    "\5\0\7\30\4\0\1\30\1\0\21\30\1\u0157\6\30"+
    "\26\0\5\30\1\112\5\0\7\30\4\0\1\30\1\0"+
    "\4\30\1\u0158\23\30\26\0\5\30\1\112\5\0\7\30"+
    "\4\0\1\30\1\0\22\30\1\u0159\5\30\26\0\5\30"+
    "\1\112\5\0\7\30\4\0\1\30\1\0\21\30\1\u015a"+
    "\6\30\26\0\5\30\1\112\5\0\7\30\4\0\1\30"+
    "\1\0\2\30\1\u015b\25\30\26\0\5\30\1\112\5\0"+
    "\7\30\4\0\1\30\1\0\20\30\1\u015c\7\30\26\0"+
    "\5\30\1\112\5\0\7\30\4\0\1\30\1\0\22\30"+
    "\1\u015d\5\30\26\0\5\30\1\112\5\0\7\30\4\0"+
    "\1\30\1\0\22\30\1\u015e\5\30\26\0\5\30\1\112"+
    "\5\0\7\30\4\0\1\30\1\0\27\30\1\u015f\26\0"+
    "\5\30\1\112\5\0\7\30\4\0\1\30\1\0\22\30"+
    "\1\u0160\5\30\26\0\5\30\1\112\5\0\7\30\4\0"+
    "\1\30\1\0\26\30\1\u0161\1\30\26\0\5\30\1\112"+
    "\5\0\7\30\4\0\1\30\1\0\20\30\1\u0162\7\30"+
    "\26\0\5\30\1\112\5\0\7\30\4\0\1\30\1\0"+
    "\12\30\1\u0163\15\30\26\0\5\30\1\112\5\0\7\30"+
    "\4\0\1\30\1\0\14\30\1\u0164\13\30\26\0\5\30"+
    "\1\112\5\0\7\30\4\0\1\30\1\0\12\30\1\u0165"+
    "\15\30\26\0\5\30\1\112\5\0\7\30\4\0\1\30"+
    "\1\0\22\30\1\u0166\5\30\26\0\5\30\1\112\5\0"+
    "\7\30\4\0\1\30\1\0\4\30\1\u0167\23\30\26\0"+
    "\5\30\1\112\5\0\7\30\4\0\1\30\1\0\5\30"+
    "\1\u0168\22\30\26\0\5\30\1\112\5\0\7\30\4\0"+
    "\1\30\1\0\16\30\1\u0169\11\30\26\0\5\30\1\112"+
    "\5\0\7\30\4\0\1\30\1\0\20\30\1\u016a\7\30"+
    "\26\0\5\30\1\112\5\0\7\30\4\0\1\30\1\0"+
    "\16\30\1\u016b\11\30\26\0\5\30\1\112\5\0\7\30"+
    "\4\0\1\30\1\0\4\30\1\u016c\23\30\26\0\5\30"+
    "\1\112\5\0\7\30\4\0\1\30\1\0\15\30\1\u016d"+
    "\12\30\25\0\1\u016e\64\0\6\322\1\u010f\12\322\1\u016f"+
    "\64\322\17\u0111\1\u0170\31\u0111\1\u0144\34\u0111\2\206\1\u0171"+
    "\14\206\1\u0145\66\206\22\0\5\30\1\112\5\0\7\30"+
    "\4\0\1\30\1\0\1\30\1\u0172\26\30\26\0\5\30"+
    "\1\112\5\0\7\30\4\0\1\30\1\0\15\30\1\u0173"+
    "\12\30\26\0\5\30\1\112\5\0\7\30\4\0\1\30"+
    "\1\0\4\30\1\u0174\23\30\26\0\5\30\1\112\5\0"+
    "\7\30\4\0\1\30\1\0\12\30\1\u0175\15\30\26\0"+
    "\5\30\1\112\5\0\7\30\4\0\1\30\1\0\4\30"+
    "\1\u0176\23\30\26\0\5\30\1\112\5\0\7\30\4\0"+
    "\1\30\1\0\16\30\1\u0177\11\30\26\0\5\30\1\112"+
    "\5\0\7\30\4\0\1\30\1\0\14\30\1\u0178\13\30"+
    "\26\0\5\30\1\112\5\0\7\30\4\0\1\30\1\0"+
    "\1\u0179\27\30\26\0\5\30\1\112\5\0\7\30\4\0"+
    "\1\30\1\0\10\30\1\u017a\17\30\26\0\5\30\1\112"+
    "\5\0\7\30\4\0\1\30\1\0\15\30\1\u017b\12\30"+
    "\26\0\5\30\1\112\5\0\7\30\4\0\1\30\1\0"+
    "\1\30\1\u017c\26\30\26\0\5\30\1\112\5\0\7\30"+
    "\4\0\1\30\1\0\1\u017d\27\30\26\0\5\30\1\112"+
    "\5\0\7\30\4\0\1\30\1\0\22\30\1\u017e\5\30"+
    "\26\0\5\30\1\112\5\0\7\30\4\0\1\30\1\0"+
    "\20\30\1\u017f\7\30\26\0\5\30\1\112\5\0\7\30"+
    "\4\0\1\30\1\0\27\30\1\u0180\26\0\5\30\1\112"+
    "\5\0\7\30\4\0\1\30\1\0\21\30\1\u0181\6\30"+
    "\26\0\5\30\1\112\5\0\7\30\4\0\1\30\1\0"+
    "\4\30\1\u0182\23\30\26\0\5\30\1\112\5\0\7\30"+
    "\4\0\1\30\1\0\4\30\1\u0183\23\30\26\0\5\30"+
    "\1\112\5\0\7\30\4\0\1\30\1\0\3\30\1\u0184"+
    "\24\30\26\0\5\30\1\112\5\0\7\30\4\0\1\30"+
    "\1\0\4\30\1\u0185\23\30\26\0\2\30\1\u0186\1\u0187"+
    "\1\30\1\112\5\0\7\30\4\0\1\30\1\0\30\30"+
    "\26\0\5\30\1\112\5\0\7\30\4\0\1\30\1\0"+
    "\16\30\1\u0188\11\30\26\0\5\30\1\112\5\0\7\30"+
    "\4\0\1\30\1\0\10\30\1\u0189\17\30\26\0\5\30"+
    "\1\112\5\0\7\30\4\0\1\30\1\0\1\u018a\27\30"+
    "\26\0\5\30\1\112\5\0\7\30\4\0\1\30\1\0"+
    "\20\30\1\u018b\7\30\26\0\5\30\1\112\5\0\7\30"+
    "\4\0\1\30\1\0\20\30\1\u018c\7\30\25\0\1\u018d"+
    "\64\0\2\u016f\1\u018e\1\322\2\u016f\1\u018d\77\u016f\2\0"+
    "\1\u0171\14\0\1\u0170\107\0\1\u018f\106\0\5\30\1\112"+
    "\5\0\7\30\4\0\1\30\1\0\15\30\1\u0190\12\30"+
    "\26\0\5\30\1\112\5\0\7\30\4\0\1\30\1\0"+
    "\26\30\1\u0191\1\30\26\0\5\30\1\112\5\0\7\30"+
    "\4\0\1\30\1\0\14\30\1\u0192\13\30\26\0\5\30"+
    "\1\112\5\0\7\30\4\0\1\30\1\0\20\30\1\u0193"+
    "\7\30\26\0\5\30\1\112\5\0\7\30\4\0\1\30"+
    "\1\0\13\30\1\u0194\14\30\26\0\5\30\1\112\5\0"+
    "\7\30\4\0\1\30\1\0\14\30\1\u0195\13\30\26\0"+
    "\5\30\1\112\5\0\7\30\4\0\1\30\1\0\15\30"+
    "\1\u0196\12\30\26\0\5\30\1\112\5\0\7\30\4\0"+
    "\1\30\1\0\10\30\1\u0197\17\30\26\0\5\30\1\112"+
    "\5\0\7\30\4\0\1\30\1\0\12\30\1\u0198\15\30"+
    "\26\0\5\30\1\112\5\0\7\30\4\0\1\30\1\0"+
    "\16\30\1\u0199\11\30\26\0\5\30\1\112\5\0\7\30"+
    "\4\0\1\30\1\0\2\30\1\u019a\25\30\26\0\5\30"+
    "\1\112\5\0\7\30\4\0\1\30\1\0\4\30\1\u019b"+
    "\23\30\26\0\5\30\1\112\5\0\7\30\4\0\1\30"+
    "\1\0\20\30\1\u019c\7\30\26\0\5\30\1\112\5\0"+
    "\7\30\4\0\1\30\1\0\12\30\1\u019d\15\30\26\0"+
    "\5\30\1\112\5\0\7\30\4\0\1\30\1\0\16\30"+
    "\1\u019e\11\30\26\0\5\30\1\112\5\0\7\30\4\0"+
    "\1\30\1\0\13\30\1\u019f\14\30\4\0\2\u018d\1\u01a0"+
    "\1\0\102\u018d\21\0\1\u01a1\106\0\5\30\1\112\5\0"+
    "\7\30\4\0\1\30\1\0\23\30\1\u01a2\4\30\26\0"+
    "\5\30\1\112\5\0\7\30\4\0\1\30\1\0\22\30"+
    "\1\u01a3\5\30\26\0\5\30\1\112\5\0\7\30\4\0"+
    "\1\30\1\0\4\30\1\u01a4\23\30\26\0\5\30\1\112"+
    "\5\0\7\30\4\0\1\30\1\0\4\30\1\u01a5\23\30"+
    "\26\0\5\30\1\112\5\0\7\30\4\0\1\30\1\0"+
    "\22\30\1\u01a6\5\30\26\0\5\30\1\112\5\0\7\30"+
    "\4\0\1\30\1\0\14\30\1\u01a7\13\30\26\0\5\30"+
    "\1\112\5\0\7\30\4\0\1\30\1\0\14\30\1\u01a8"+
    "\13\30\26\0\5\30\1\112\5\0\7\30\4\0\1\30"+
    "\1\0\4\30\1\u01a9\23\30\26\0\5\30\1\112\5\0"+
    "\7\30\4\0\1\30\1\0\7\30\1\u01aa\20\30\26\0"+
    "\5\30\1\112\5\0\7\30\4\0\1\30\1\0\10\30"+
    "\1\u01ab\17\30\26\0\5\30\1\112\5\0\7\30\4\0"+
    "\1\30\1\0\20\30\1\u01ac\7\30\26\0\5\30\1\112"+
    "\5\0\7\30\4\0\1\30\1\0\4\30\1\u01ad\23\30"+
    "\26\0\5\30\1\112\5\0\7\30\4\0\1\30\1\0"+
    "\4\30\1\u01ae\23\30\26\0\5\30\1\112\5\0\7\30"+
    "\4\0\1\30\1\0\7\30\1\u01af\20\30\4\0\2\u01a1"+
    "\1\u01b0\1\0\102\u01a1\22\0\5\30\1\112\5\0\7\30"+
    "\4\0\1\30\1\0\14\30\1\u01b1\13\30\26\0\5\30"+
    "\1\112\5\0\7\30\4\0\1\30\1\0\2\30\1\u01b2"+
    "\25\30\26\0\5\30\1\112\5\0\7\30\4\0\1\30"+
    "\1\0\14\30\1\u01b3\13\30\26\0\5\30\1\112\5\0"+
    "\7\30\4\0\1\30\1\0\22\30\1\u01b4\5\30\26\0"+
    "\5\30\1\112\5\0\7\30\4\0\1\30\1\0\21\30"+
    "\1\u01b5\6\30\26\0\5\30\1\112\5\0\7\30\4\0"+
    "\1\30\1\0\2\30\1\u01b6\25\30\26\0\5\30\1\112"+
    "\5\0\7\30\4\0\1\30\1\0\3\30\1\u01b7\24\30"+
    "\26\0\5\30\1\112\5\0\7\30\4\0\1\30\1\0"+
    "\10\30\1\u01b8\17\30\26\0\5\30\1\112\5\0\7\30"+
    "\4\0\1\30\1\0\22\30\1\u01b9\5\30\26\0\5\30"+
    "\1\112\5\0\7\30\4\0\1\30\1\0\16\30\1\u01ba"+
    "\11\30\26\0\5\30\1\112\5\0\7\30\4\0\1\30"+
    "\1\0\10\30\1\u01bb\17\30\26\0\5\30\1\112\5\0"+
    "\7\30\4\0\1\30\1\0\10\30\1\u01bc\17\30\26\0"+
    "\5\30\1\112\5\0\7\30\4\0\1\30\1\0\21\30"+
    "\1\u01bd\6\30\26\0\5\30\1\112\5\0\7\30\4\0"+
    "\1\30\1\0\21\30\1\u01be\6\30\26\0\5\30\1\112"+
    "\5\0\7\30\4\0\1\30\1\0\20\30\1\u01bf\7\30"+
    "\26\0\5\30\1\112\5\0\7\30\4\0\1\30\1\0"+
    "\15\30\1\u01c0\12\30\26\0\5\30\1\112\5\0\7\30"+
    "\4\0\1\30\1\0\21\30\1\u01c1\6\30\26\0\5\30"+
    "\1\112\5\0\7\30\4\0\1\30\1\0\10\30\1\u01c2"+
    "\17\30\26\0\5\30\1\112\5\0\7\30\4\0\1\30"+
    "\1\0\4\30\1\u01c3\23\30\26\0\5\30\1\112\5\0"+
    "\7\30\4\0\1\30\1\0\14\30\1\u01c4\13\30\26\0"+
    "\5\30\1\112\5\0\7\30\4\0\1\30\1\0\10\30"+
    "\1\u01c5\17\30\26\0\5\30\1\112\5\0\7\30\4\0"+
    "\1\30\1\0\15\30\1\u01c6\12\30\26\0\5\30\1\112"+
    "\5\0\7\30\4\0\1\30\1\0\2\30\1\u01c7\25\30"+
    "\26\0\5\30\1\112\5\0\7\30\4\0\1\30\1\0"+
    "\15\30\1\u01c8\12\30\26\0\5\30\1\112\5\0\7\30"+
    "\4\0\1\30\1\0\14\30\1\u01c9\13\30\26\0\5\30"+
    "\1\112\5\0\7\30\4\0\1\30\1\0\10\30\1\u01ca"+
    "\17\30\26\0\5\30\1\112\5\0\7\30\4\0\1\30"+
    "\1\0\14\30\1\u01cb\13\30\26\0\5\30\1\112\5\0"+
    "\7\30\4\0\1\30\1\0\21\30\1\u01cc\6\30\26\0"+
    "\5\30\1\112\5\0\7\30\4\0\1\30\1\0\10\30"+
    "\1\u01cd\17\30\26\0\5\30\1\112\5\0\7\30\4\0"+
    "\1\30\1\0\15\30\1\u01ce\12\30\26\0\5\30\1\112"+
    "\5\0\7\30\4\0\1\30\1\0\14\30\1\u01cf\13\30"+
    "\4\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[24920];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\3\1\10\11\5\1\1\11\3\1\1\11"+
    "\2\1\4\11\25\1\5\11\1\0\2\11\3\1\1\0"+
    "\1\11\1\0\1\11\1\0\7\11\1\0\72\1\1\0"+
    "\3\1\1\0\1\1\1\0\1\11\103\1\1\11\1\1"+
    "\1\0\2\1\1\0\71\1\3\0\60\1\3\0\51\1"+
    "\4\0\33\1\1\0\1\1\1\0\21\1\1\0\56\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[463];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
  public _FaustLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _FaustLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return BAD_CHARACTER;
            }
          // fall through
          case 122: break;
          case 2:
            { return WHITE_SPACE;
            }
          // fall through
          case 123: break;
          case 3:
            { return CUT;
            }
          // fall through
          case 124: break;
          case 4:
            { return MOD;
            }
          // fall through
          case 125: break;
          case 5:
            { return AND;
            }
          // fall through
          case 126: break;
          case 6:
            { return DELAY1;
            }
          // fall through
          case 127: break;
          case 7:
            { return LPAREN;
            }
          // fall through
          case 128: break;
          case 8:
            { return RPAREN;
            }
          // fall through
          case 129: break;
          case 9:
            { return MUL;
            }
          // fall through
          case 130: break;
          case 10:
            { return ADD;
            }
          // fall through
          case 131: break;
          case 11:
            { return PAR;
            }
          // fall through
          case 132: break;
          case 12:
            { return SUB;
            }
          // fall through
          case 133: break;
          case 13:
            { return DOT;
            }
          // fall through
          case 134: break;
          case 14:
            { return DIV;
            }
          // fall through
          case 135: break;
          case 15:
            { return NUMBER;
            }
          // fall through
          case 136: break;
          case 16:
            { return SEQ;
            }
          // fall through
          case 137: break;
          case 17:
            { return ENDDEF;
            }
          // fall through
          case 138: break;
          case 18:
            { return LT;
            }
          // fall through
          case 139: break;
          case 19:
            { return DEF;
            }
          // fall through
          case 140: break;
          case 20:
            { return GT;
            }
          // fall through
          case 141: break;
          case 21:
            { return DELAY;
            }
          // fall through
          case 142: break;
          case 22:
            { return IDENTIFIER;
            }
          // fall through
          case 143: break;
          case 23:
            { return LBRACK;
            }
          // fall through
          case 144: break;
          case 24:
            { return LAMBDA;
            }
          // fall through
          case 145: break;
          case 25:
            { return RBRACK;
            }
          // fall through
          case 146: break;
          case 26:
            { return POWOP;
            }
          // fall through
          case 147: break;
          case 27:
            { return WIRE;
            }
          // fall through
          case 148: break;
          case 28:
            { return LBRACE;
            }
          // fall through
          case 149: break;
          case 29:
            { return OR;
            }
          // fall through
          case 150: break;
          case 30:
            { return RBRACE;
            }
          // fall through
          case 151: break;
          case 31:
            { return REC;
            }
          // fall through
          case 152: break;
          case 32:
            { return NE;
            }
          // fall through
          case 153: break;
          case 33:
            { return STRING_LITERAL;
            }
          // fall through
          case 154: break;
          case 34:
            { return LAPPLY;
            }
          // fall through
          case 155: break;
          case 35:
            { return BLOCK_COMMENT;
            }
          // fall through
          case 156: break;
          case 36:
            { return LINE_COMMENT;
            }
          // fall through
          case 157: break;
          case 37:
            { return MERGE;
            }
          // fall through
          case 158: break;
          case 38:
            { return SPLIT;
            }
          // fall through
          case 159: break;
          case 39:
            { return LSH;
            }
          // fall through
          case 160: break;
          case 40:
            { return LE;
            }
          // fall through
          case 161: break;
          case 41:
            { return EQ;
            }
          // fall through
          case 162: break;
          case 42:
            { return ARROW;
            }
          // fall through
          case 163: break;
          case 43:
            { return GE;
            }
          // fall through
          case 164: break;
          case 44:
            { return RSH;
            }
          // fall through
          case 165: break;
          case 45:
            { return C_HEADER;
            }
          // fall through
          case 166: break;
          case 46:
            { return ABS;
            }
          // fall through
          case 167: break;
          case 47:
            { return NOTYPECAST;
            }
          // fall through
          case 168: break;
          case 48:
            { return COS;
            }
          // fall through
          case 169: break;
          case 49:
            { return EXP;
            }
          // fall through
          case 170: break;
          case 50:
            { return INTCAST;
            }
          // fall through
          case 171: break;
          case 51:
            { return LOG;
            }
          // fall through
          case 172: break;
          case 52:
            { return MAX;
            }
          // fall through
          case 173: break;
          case 53:
            { return MEM;
            }
          // fall through
          case 174: break;
          case 54:
            { return MIN;
            }
          // fall through
          case 175: break;
          case 55:
            { return IPAR;
            }
          // fall through
          case 176: break;
          case 56:
            { return POWFUN;
            }
          // fall through
          case 177: break;
          case 57:
            { return ISEQ;
            }
          // fall through
          case 178: break;
          case 58:
            { return SIN;
            }
          // fall through
          case 179: break;
          case 59:
            { return ISUM;
            }
          // fall through
          case 180: break;
          case 60:
            { return TAN;
            }
          // fall through
          case 181: break;
          case 61:
            { return XOR;
            }
          // fall through
          case 182: break;
          case 62:
            { return ACOS;
            }
          // fall through
          case 183: break;
          case 63:
            { return ASIN;
            }
          // fall through
          case 184: break;
          case 64:
            { return ATAN;
            }
          // fall through
          case 185: break;
          case 65:
            { return CASE;
            }
          // fall through
          case 186: break;
          case 66:
            { return CEIL;
            }
          // fall through
          case 187: break;
          case 67:
            { return FMOD;
            }
          // fall through
          case 188: break;
          case 68:
            { return IPROD;
            }
          // fall through
          case 189: break;
          case 69:
            { return RINT;
            }
          // fall through
          case 190: break;
          case 70:
            { return SQRT;
            }
          // fall through
          case 191: break;
          case 71:
            { return WITH;
            }
          // fall through
          case 192: break;
          case 72:
            { return ATAN2;
            }
          // fall through
          case 193: break;
          case 73:
            { return FLOATCAST;
            }
          // fall through
          case 194: break;
          case 74:
            { return FLOOR;
            }
          // fall through
          case 195: break;
          case 75:
            { return LOG10;
            }
          // fall through
          case 196: break;
          case 76:
            { return ROUND;
            }
          // fall through
          case 197: break;
          case 77:
            { return ROUTE;
            }
          // fall through
          case 198: break;
          case 78:
            { return WHERE;
            }
          // fall through
          case 199: break;
          case 79:
            { return PREFIX;
            }
          // fall through
          case 200: break;
          case 80:
            { return ATTACH;
            }
          // fall through
          case 201: break;
          case 81:
            { return BUTTON;
            }
          // fall through
          case 202: break;
          case 82:
            { return ENABLE;
            }
          // fall through
          case 203: break;
          case 83:
            { return HGROUP;
            }
          // fall through
          case 204: break;
          case 84:
            { return IMPORT;
            }
          // fall through
          case 205: break;
          case 85:
            { return INS;
            }
          // fall through
          case 206: break;
          case 86:
            { return LETREC;
            }
          // fall through
          case 207: break;
          case 87:
            { return LOWEST;
            }
          // fall through
          case 208: break;
          case 88:
            { return MODULATE;
            }
          // fall through
          case 209: break;
          case 89:
            { return NENTRY;
            }
          // fall through
          case 210: break;
          case 90:
            { return PRFIX;
            }
          // fall through
          case 211: break;
          case 91:
            { return TGROUP;
            }
          // fall through
          case 212: break;
          case 92:
            { return VGROUP;
            }
          // fall through
          case 213: break;
          case 93:
            { return CONTROL;
            }
          // fall through
          case 214: break;
          case 94:
            { return DECLARE;
            }
          // fall through
          case 215: break;
          case 95:
            { return HIGHEST;
            }
          // fall through
          case 216: break;
          case 96:
            { return HSLIDER;
            }
          // fall through
          case 217: break;
          case 97:
            { return LIBRARY;
            }
          // fall through
          case 218: break;
          case 98:
            { return OUTS;
            }
          // fall through
          case 219: break;
          case 99:
            { return RDTBL;
            }
          // fall through
          case 220: break;
          case 100:
            { return RWTBL;
            }
          // fall through
          case 221: break;
          case 101:
            { return SELECT2;
            }
          // fall through
          case 222: break;
          case 102:
            { return SELECT3;
            }
          // fall through
          case 223: break;
          case 103:
            { return VSLIDER;
            }
          // fall through
          case 224: break;
          case 104:
            { return LIB_DOC_COMMENT;
            }
          // fall through
          case 225: break;
          case 105:
            { return CHECKBOX;
            }
          // fall through
          case 226: break;
          case 106:
            { return WAVEFORM;
            }
          // fall through
          case 227: break;
          case 107:
            { return COMPONENT;
            }
          // fall through
          case 228: break;
          case 108:
            { return FCONSTANT;
            }
          // fall through
          case 229: break;
          case 109:
            { return FFUNCTION;
            }
          // fall through
          case 230: break;
          case 110:
            { return FVARIABLE;
            }
          // fall through
          case 231: break;
          case 111:
            { return HBARGRAPH;
            }
          // fall through
          case 232: break;
          case 112:
            { return REMAINDER;
            }
          // fall through
          case 233: break;
          case 113:
            { return SOUNDFILE;
            }
          // fall through
          case 234: break;
          case 114:
            { return VBARGRAPH;
            }
          // fall through
          case 235: break;
          case 115:
            { return DEF_DOC_COMMENT;
            }
          // fall through
          case 236: break;
          case 116:
            { return ENVIRONMENT;
            }
          // fall through
          case 237: break;
          case 117:
            { return ASSERTBOUNDS;
            }
          // fall through
          case 238: break;
          case 118:
            { return QUADMODE;
            }
          // fall through
          case 239: break;
          case 119:
            { return DOUBLEMODE;
            }
          // fall through
          case 240: break;
          case 120:
            { return FLOATMODE;
            }
          // fall through
          case 241: break;
          case 121:
            { return FIXEDPOINTMODE;
            }
          // fall through
          case 242: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
